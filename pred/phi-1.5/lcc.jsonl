{"pred": "\t\t\t\tm_Participants[i].CloseGump( defs[i] );\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Ruleset.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Ruleset[i].CloseGump( defs[i] );", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "    def get_text_by_css(self, css_selector):\n        \"\"\"Return the text of the first element that matches the css_selector.\n        \"\"\"\n        elements = self.get_elements_list(css_selector)\n        if len(", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "\t\t\tfor root in roots:\n\t\t\t\tif root in self.graph.nodes():\n\t\t\t\t\tself.graph.remove_node(root)\n\t\t\t\n\t\t\tself.graph.add_edge(e_u, e_v, key=e_key, attr_dict=data.copy", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "private static final int BTN_HEIGHT = 18;\nprivate WndBag owner;\npublic WndAlchemizeItem(Item item, WndBag owner) {\n\tsuper(item);\n\tthis.owner = owner;\n\tfloat pos = height;\n\tif (", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "\t\t\t\t\twriter.addAttribute(\"value\", (OLStyleValue) value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof WMCStyleValue) {\n\t\t\t\t\tWMCStyleValue style = (WMCStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"style\", style.getStyleClass());", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "            p = Process(target=self.run_subprocess,\n                        args=(self.logger, CreateConnection, status_id.decode('UTF-8'), FM.Action.CREATE_CONNECTION, {\n                            \"login\": login.decode('UTF-8'),\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "            s.println(\"*** Certificate chain\");\n            s.println(\"*** Certificate chain\");\n            s.println(\"*** Certificate chain\");\n            s.println(\"*** Certificate chain\");\n            s.println(\"*** Certificate chain\");\n            s.println(\"*** Certificate chain\");\n            s.println", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and compare buffers\n        buff = a.read", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "        String[] activeAccountsArray =\n            (String []) activeAccounts.toArray(new String[0]);\n        String[] adminAccountsArray =\n            (String []) adminAccounts.toArray(new String[0]);\n        String[] deleteAccountsArray =\n            ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        if environ['REQUEST_METHOD'] == 'POST':\n            return self.do_post(environ, start_response)\n        elif environ['REQUEST_METHOD'] == 'PUT':\n            return self.do_put(environ, start_response)\n        ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        if self.type == TYPE_ANAGRAMS:\n            ret = \"Anagrams: %s\" % self.question\n        elif self.type == TYPE_TRIVIA:\n            ret = \"Trivia: %s\" % self.question\n        elif self.", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "        String[] argValues = new String[4];\n        Arg[] args = new Arg[] {\n            field.getArg(request, 0), field.getArg(request, 1),\n            field.getArg(request, 2), field.getArg(request, 3)\n        };", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b), \"Trusted+Untrusted\");\n\t\t}\n#if NET_2_0\n\t\t[Category (\"NotWorking\")]\n#endif\n\t\t[Test]\n\t\tpublic void Union_DifferentPermissions ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        sp = new JESpace (name, path);\n        spaceRegistrar.put (name, sp);\n        return sp;\n        }\n        return sp;\n    }\n    public static void warn (DatabaseException e) {\n        Log.warn (e);\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "                if (m_Owner.Caster.CanSee( from ) )\n                {\n                    m_Owner.Caster.SendLocalizedMessage( 500237 ); // Target can not be seen.\n                }\n                else\n                {\n                    Caster.SendLocalizedMessage( 500237", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "    self.__datastream_transport = await self.__event_loop.create_connection(\n        lambda: self.__project.datastream_pipe,\n        lambda: self.__setup_data_pump,\n        loop=self.__event_loop)\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "        self.webview.mark_status_as_repeated(status_id)\n        self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n        self.webview.execute_javascript(\"unsetRepeated('%s');\" %", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": ".. code-block:: python\n    :linenos:\n    :emphasize-lines: 1\n\n    from tornado.web import RequestHandler, redirect\n\n    class MyHandler(RequestHandler):\n        @addslash\n        def get(self):\n            self.write(\"Hello, world", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\t\tfirms.put(id, new Firm(id, conf));\n\t\t\t}\n\t\t}), TIMEDATA(new ConfigFile<String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "        return self.trust_managers[0].getAcceptedIssuers()\n    def getAcceptedIssuers(self):\n        return self.trust_managers[0].getAcceptedIssuers()\n    def getIssuer(self, alias):\n        for trust_manager in", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "                if (mod >= 151 && mod <= 155)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if(i.SkillBon", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "    \"\"\"Finalize the loaded state of the session.\n    This is called when the session is loaded from a file,\n    or when the session is created from a connection.\n    \"\"\"\n    if self.__binds:\n        self.__binds.clear()\n    if self.", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = store.GetIterFirst(out iter);\n\t\t\t\t\tif (store.IterNext(ref iter) && store.IterNext(ref iter) && store.IterNext(ref iter) && store.IterNext(ref iter) && store.Iter", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "            foreach (var argSyntax in argumentSyntaxs) {\n                if ( argSyntax.Parent.GetType() == typeof (MemberDeclarationSyntax) ) {\n                    var memberSyntax = argSyntax.Parent;\n                    var memberSyntaxName = memberSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "\t\t\n\t\t\tif (viewIndex >= Controls.Count) {\n\t\t\t\tviewIndex = 0;\n\t\t\t\tUpdateViewVisibility ();\n\t\t\t}\n\t\t\t\n\t\t\tif (viewIndex == -1) {\n\t\t\t\tviewIndex = controls.Count;\n\t\t\t\tUpdateViewVisibility ();\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "\t\t// Create the shell\n\t\tShell shell = new Shell(SHELL_HEIGHT, SHELL_LENGHT, SHELL_HEIGHT_DEFAULT,\n\t\t\t\tSHELL_LENGHT_DEFAULT);\n\t\tshell.setDefault(SHELL_HEIGHT, SHELL_HE", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\t\t\t\t\tif (cell.getNumVersions() > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"Creating new version of cell: \" + cell.getName());\n\t\t\t\t\t\t\tif (cell.getNumVersions() > maxDepth)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmaxDepth = cell.getNumVersions();", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "    if platform == 'os_windows':\n        builds.append({'os': 'os_windows',\n                       'os_pretty': 'Windows',\n                       'os_arch_pretty': 'Windows %s' % platform,\n                       'arch': 'x86',\n                       'arch", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "        for(IField field : fields) {\n            if (field2Name.containsKey(field.getName())) {\n                field2Name.get(field.getName()).add(field);\n            } else {\n                field2Name.put(field.getName", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "        split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        # Initially, no user_partition_id is set, and the split_test has no children.\n        self.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "    args = parser.parse_args()\n    \n    ## Check if the file exists\n    if not os.path.exists(args.outpath):\n        os.makedirs(args.outpath)\n    \n    ## Check if the file exists\n    if not os.", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "public void loadAllItems(NBTTagCompound compound, ItemStack stack)\n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "  }\n  private ListenableFutureTask<Bitmap> get() {\n    Util.assertMainThread();\n    if (bitmapReference!= null && bitmapReference.get()!= null) {\n      return new ListenableFutureTask<>(bitmapReference.get());\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectTypeID, issueTypeID, (Integer)fieldChangeValue.getValue());\n\t\t}\n\t\tif (stateBe", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(p.owns[0].owner, o)\n        self.assertEqual(o.owner.owner, p", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "public void notifyPoseListeners(BigInteger timestamp,\n\t\t\tGeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, skeleton);\n\t\t}\n\t}\n\nA:\n\nI think you", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "            if (vertical) {\n                for (int i = 0; i < metrics.Length; ++i) {\n                    int[] metric = (int[])metrics[i];\n                    if (metric[1] == 1000)\n                        continue;\n                    int m = metric[", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "public class TransformingMapEntry<K, E> implements Map.Entry<K, E> {\n\tprivate final K key;\n\tprivate final E value;\n\tprivate final Function<K, E> transform;\n\tprivate final Function<E, K> remappingFunction;\n\tpublic", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "    @Override\n    public String toString() {\n        return \"Effect [probability=\" + probability + \", scopes=\" + scopes + \"]\";\n    }\n}\n/**\n * The effect of a natural disaster or other event. How the\n * probability of the effect is interpreted", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n                ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "                    if (null == parcelVoiceInfoResponse)\n                    {\n                        m_log.ErrorFormat(\"[FreeSwitchVoice][PARCELVOICE]: ParcelVoiceInfoRequest() on {0} for {1} failed\",\n                                            scene.RegionInfo.RegionName, agentID);\n", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "    def plot(self, x=None, y=None, sel_dim=False, **kwargs):\n        \"\"\"\n        Plot two 1D-variables against each other.\n        :param x: Name of a 1D-variable\n        :param y: Name of another 1", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (Enabled)\n                    writer.WriteLine(\"<div class='toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-toolbar-", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "    if not user:\n        return {'success': False,'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_create', context, data_dict)\ndef _group_or_org_member_update(context, data", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "        if self.request.has_key('comcynapsecynincontextUID'):\n            uid = self.request['comcynapsecynincontextUID']\n        if self.request.has_key('comcynapsecyninitemindex'):\n            itemindex = self", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'admin',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "         int codePoint = ch;\n         if ('\\uDC00' <= ch && ch <= '\\uDFFF' && offset < strlen) {\n            return _range.get(codePoint);\n         }\n         return -1;\n      }\n   }\n   static", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t}\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs e) {\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void FormPayPeriodEdit_Close(object sender, System", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                _tempIgnoredPaths.AddOrUpdate(path, 1, (key, value) => value + 1);\n                if (rootFolder.IsDirectory())", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionList", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\t\t\t\tif (parentIndex == -1) {\n\t\t\t\t\t// no parent, so we are at the root\n\t\t\t\t\t// assigning the label and the confidence\n\t\t\t\t\texample.setValue(predictionAttribute, outcomes[resultIndex]);\n\t\t\t\t\texample.setValue(confidences[resultIndex], 1d);\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "\t\t}\n\t\tpublic ushort m_X\n\t\t{\n\t\t\tget { return m_X; }\n\t\t}\n\t\tpublic ushort m_Y\n\t\t{\n\t\t\tget { return m_Y; }\n\t\t}\n\t\tpublic sbyte m_Z\n\t\t{\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'typeName'", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "  if (IActionConstants.TRUE.equals(existingRequired) &&!accessionUsed) {\n    return ValidationResults.USED_FAIL;\n  } else {\n    if (IActionConstants.TRUE.equals(existingRequired) && accessionUsed", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "\t\t\tthis.comboBox1.SelectedIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndex = 1;\n\t\t\tthis.comboBox1.SelectedIndex = 2;\n\t\t\tthis.comboBox1.SelectedIndex = 3;\n\t\t\tthis.com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "if prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'don", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            var result = new SearchResults[segments.Length];\n            var err = new SearchResult() { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation };\n            for (int i = 0; i < segments.Length; i++)\n            {\n                result[i]", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "    _keep_tempdir = parser.parse_args().keep_tempdir\n    #print \"keep_tempdir is\", _keep_tempdir\n    #print \"keep_tempdir is\", _keep_tempdir\n    #print \"keep_tempdir is\", _keep_temp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tif (Info.WaterTerrainTypes.Contains(e.Attacker.Info.Name))\n\t\t\t\tfor (int i = 0; i < Info.WaterTerrainTypes.Count; i++)\n\t\t\t\t{\n\t\t\t\t\tif (Info.WaterTerrainTypes[i] == e.Att", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0} because {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\tDropClient(newConn);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   ", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "\t\t\tif (handle == -1)\n\t\t\t\tReportIOError (port_name);\n\t\t\t// Set port low level attributes\n\t\t\tSetAttributes (baud_rate, parity, data_bits, bits, hs);\n\t\t\t// Clean buffers and set sizes\n\t\t\tif (!PurgeComm (handle", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "def get_timbre_pitches_loudness(wav_dir):\n    # get the timbre and pitch of the wav file\n    # get the loudness of the wav file\n    # get the timbre and pitch of the wav file\n    # get the loudness", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\t\tself.APList = self.newAPList\n\t\tself.APListIndex = 0\n\t\tself.APListIndex = self.APListIndex + len(self.APList)\n\t\tself.APListIndex = self.APListIndex % len(self.APList)\n\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "        // Output Tables\n        int index = 0;\n        for (Statement stmt : plan.statements.getStatements())\n        {\n            Statement stmtParam = stmt.getParameters().add(String.valueOf(index));\n            stmtParam.setJavatype", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "        \n        if not original.__doc__:\n            original.__doc__ = \"\"\n        \n        if not original.argNames:\n            original.argNames = []\n        \n        if not original.argTypes:\n            original.argTypes = []\n        \n        if not", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "        # Test points on a regular global grid, with unrelated steps + offsets\n        # and an extended range of longitude values.\n        y_points = np.arange(-185.23, +360.0, 73.123)\n        # Test points on a regular global grid, with unrelated", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n\nA:\n\nI think you're", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_not_paused()\n        {\n            GivenGlobalSeedLimits(null, 20);\n            ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "        }\n        public void Add(TK key, int numReferences)\n        {\n            if (ReferenceEquals(key, null)) {\n                return;\n            }\n            int value;\n            if (!_refSet.TryGetValue(key, out value)) {\n                ", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "                return new Rectangle(0, 0, fontX, fontY);\n            }\n        }\n        \n        /** Gets the text that will be displayed on the barcode.\n        * @return the text\n        */    \n        public override string GetText(Rectangle rect) {\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        boolean hasEmptyFiles = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                hasEmptyFiles = true;\n                break;\n            }\n        }\n        if (hasEmptyFiles) {\n            header", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "            if (currPacket == null)\n            {\n                return;\n            }\n            if (_newStyleLogViewer)\n            {\n                toolStripButtonSave.Enabled = IsFrameModified();\n                toolStripButtonRevert.Enabled = IsFrameModified", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    # If the config directory doesn't exist, create it\n    if not os.path.exists(config_directory):\n        try:\n            os.makedirs(config_directory)\n        except:\n            module.fail_json(\"Could not create \" + config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            }\n        }\n        private static async Task OptimizedRecycleIncense(ISession session, CancellationToken cancellationToken)\n        {\n            var incense = await session.Inventory.GetItemAmountByType(ItemId.ItemIncenseOrdinary);\n            var maxInc", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "            this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63,\n            treeNode8,\n            treeNode9,\n            treeNode10,\n            tree", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "    getRoomFullName.name = \"room\"\n    def getRoomBookingList(self):\n        \"\"\" Session Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.reservationsList\n    getRoomBookingList.name = \"bookedRooms\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "        return self.locator.get_locator()\n    @property\n    def _course_details(self):\n        \"\"\"\n        Return the course details dict object.\n        \"\"\"\n        return self._course_details_from_json(self.studio_course_outline_", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "                if (alphaLevel < 0.0f)\n                    alphaLevel = 0.0f;\n                else\n                    alphaLevel--;\n                }\n                if (alphaLevel < 0.0f)\n                    alphaLevel = 0.0f;\n                else\n                    alphaLevel++;\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "        user = new GraphUser(currentSession, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "this.lblPrivacy.Text = \"Include username to im&prove accuracy\";\n\nA:\n\nI think you are looking for this:\nnamespace AutoWikiBrowser\n{\n    /// <summary>\n    /// Required method for Designer support - do not modify\n    /// the contents", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in',\\\n                     'x direction\\n'])\n        f.writelines(['G) ', str(NYPTS), '\t\t# Number of pixels in',\\\n                     'y", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "    if ZoneLetter == 'N':\n        Lat = (y + (3*e1/2-27*e1*e1*e1/32)*cos(2*mu) \n              + (21*e1*e1/16-55*e1*e1", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "                        if (e.getMessage().getClass().isAssignableFrom(MessageImportInvalidPathException.class)) {\n                            e.getMessage().setMessage(parent.mirthClient.getMessage(channelId, message));\n                        }\n                        return false;\n                    }\n                }", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\tif(splitNumber.length == 1) {\n\t\t\treturn chance;\n\t\t}\n\t\tif(splitNumber.length == 2) {\n\t\t\treturn Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\tif(splitNumber.length == 3) {\n\t\t\treturn Integer.", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tsum += emotions[i].strength;\n\t\t}\n\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\temotions[i].strength = emotions[i].strength / sum", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs_errors:\n                    self.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new NotImplementedException ();\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "    if request.method == 'POST':\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            report = form.cleaned_data['report']\n            report_user = UserProfile.objects.get(user=user)", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\t\t    \t\tif (value instanceof SortObject) {\n\t\t       \t\t\tlayer = (SortObject)value.get(LAYER);\n\t\t       \t\t} else {\n\t\t       \t\t\tlayer = new SortObject(value);\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "                index = this.AddCraft(typeof(EnchantedSwitch), 1044294, 1072893, 45.0, 95.0, typeof(BlankScroll), 1044377, 1, 1044378);\n                this.AddRes(index, typeof(SpidersSilk", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * Read from File\n     *\n     * @return the datatype converted to a file\n     */\n    public File file()\n    {\n        return new File(\"/", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n        # test list\n        self.assertListEqual([\n            {\n              'stage': {\n                    'duration': 2,\n                    '", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceType", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 128., unit=\"%\", offset=-100)\n    ]\nclass OBD_PID1D(_OBD_PID14_1B):\n    name = \"PID_1D_", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\treturn string.Format (\"{0} {1}\", type, unit);\n\t\t}\n\t\t\n\t\tpublic static bool operator < (FontUnit left, FontUnit right)\n\t\t{\n\t\t\treturn left.type < right.type || left.unit < right.unit;\n\t\t}\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "    def get_context_data(self, request):\n        \"\"\"Return the context data for this view.\n\n        This method is called by the template engine to get the context\n        data for this view.  The context data is a dictionary of the form\n        {'title': '', 'description", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "        if self.preserved:\n            self._preserved_exc = exc\n        if exc is None:\n            exc = self._preserved_exc\n        if exc is not None:\n            self.request.routing_exception = exc\n        self.request.routing_", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "                for (int w = 0; w < width; w++) {\n                    T2 t = new T2(w, h, \"square-cylinder\", \"square-cylinder\", \"square-cylinder\", \"square-cylinder\", \"square-cylinder\", \"square-cylinder", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    def post_process_tag_regex(tag,\n            constants.supported_tags,\n            constants.supported_variants,\n            constants.supported_lengths,\n            constants.tempdir_fixture_name,\n            constants.gem5_sim", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "    # Compute angles\n    phi = np.arctan(dx / (src_radius + det_radius))\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "        assert alert.check_for_alert(history, virginia_under_a_nickle) is None, \"Should see an alert for Virginia Under A Nickle\"\n        assert alert.check_for_alert(history, virginia_over_twenty) is None, \"Should see", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\tself.listen_for_signals(dbus.signals.NewSessionCreated,\n\t\t                        dbus.signals.NewSessionClosed,\n\t\t                        dbus.signals.NewSessionDeleted,\n\t\t                        dbus.signals.NewSessionCreated,\n\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\tif ((block2.Length > GetInputBlockSize())\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbyte[] output = new byte[block1.Length + block2.Length", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n    ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef _pubsub_", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "    ds.config[\"setup\"][\"channel width\"] = 30\n    ds.config[\"setup\"][\"temperature\"] = 23.0\n    ds.config[\"setup\"][\"medium\"] = \"CellCarrier\"\nNext line of code:\n    ds.config[\"setup\"][", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "            _selectedTreeNode = new Selection(value);\n        }\n        public event EventHandler FolderInvalidated\n        {\n            _folderInvalidateTimer = new Timer(this, () => _folderInvalidate());\n        }\n        public event EventHandler FolderInvalidated\n        {\n            ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        return re.sub('^(?P<url>.*)$', self._buildURL, regx)\n    def _buildQuery(self, regx):\n        \"\"\" Return the Proxyfied Query string \"\"\"\n        if self.isEnabled():\n            regx = re.sub", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tDownloader download = new Downloader();\n\t\t\tdownload.download(FilesPath + \"res/\", FilesPath + \"res/mse-1.2.rdf\",\n\t\t\t\t\tFilesPath + \"res/policies\");\n\t\t\tdownload.download(FilesPath + \"res/\", Files", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n        self.system['STAT", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t}\n\t\tstring _text4 = @\"{\n    \"\"JSON Test Pattern pass4\"\": {\n        \"\"The innermost value\"\": \"\"must be an object or array.\"\",\n        \"\"In this test\"\": \"\"It is an array.\"\"\n    }\n}\";\n\t\t[", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "        return new CmsLink(\n            m_anchor,\n            m_query,\n            m_structureId,\n            m_target,\n            m_type,\n            m_internal);\n    }\n    /**\n     * Converts this to a CmsLink.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                vertices[x] = getVert(i, x);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>normal</code> array the normal values of quad\n     * <code>i</code>. If <code>i</code> is", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        final String[] args = new String[] { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "        final StorageDomain importDomain = new StorageDomain();\n        importDomain.setName(name);\n        doReturn(importDomain).when(dao.get(any(Guid.class))).thenReturn(importDomain);\n        doReturn(dao).when(command.getBack", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "      m_State = eButtonState.Normal;\n      Invalidate();\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseEnter(MouseEventArgs e)\n    {\n      m_State = eButtonState.MouseOver;", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void EnableTexture(ITexture texture)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glEnable(OpenGL.GL_TEXTURE_2D);\n\t\t\tOpenGL.glTexEnvf", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "\t\t\tILGenerator ilgen = mb.GetILGenerator();\n\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Call, Type.GetConstructor(BindingFlags.Instance | BindingFlags.Public |", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "            if (CriteriaCodesUsed.Count == 0)\n            {\n                VerificationResultCollection.Auto_Add_Or_AddOrRemove(this, VerificationResult, ValidationColumn);\n            }\n            else\n            {\n                VerificationResultCollection.Auto_Add_Or", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "            } catch (Exception e) {\n              // TODO Auto-generated catch block\n              e.printStackTrace();\n            }\n            // Set the ownership to the account\n            osgObject.setOwnerCanonicalId(owningAccount.getCanonicalId());\n            ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "        if (showDateData.equals(property(PROPERTY_COLUMNS_HIDE, \"datecreated\", \"\"))) {\n            result.add(\"datecreated\");\n        }\n        return result;\n    }\n    /**\n     * Returns the default sort direction.\n     ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t}\n\t\tpublic void UpdateRangeInterval()\n\t\t{\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tRangeMinInterval = _rangeMinInterval;\n\t\t\t\tRangeMaxInterval = _rangeMaxInterval;\n\t\t\t\tRangeMinInterval = _rangeMinInterval + RangeMin", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tglobal::Gtk.SpinButton spinbuttonCpuPercent = new global::Gtk.SpinButton (1D, 100D, 1D);\n\t\t\tthis.spinbuttonCpuPercent.CanFocus = true;\n\t\t\tthis.spinbuttonCpuPercent.Name = \"spinbutton", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                Users.Add(lastUser);\n            }\n            // get all users that have created or modified the records in the past week(s)\n            List <String>Users = new List <string>();\n            ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "public class ContextMenuEntry : Item\n{\n\tpublic ContextMenuEntry( int itemID ) : this( itemID, 0x9E9 )\n\t{\n\t}\n\tpublic ContextMenuEntry( Serial serial ) : this( serial, 0x9E9 )\n\t{\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "      return new Builder(prototype);\n    }\n    public static Builder CreateBuilderForType(SendInvitationRequest prototype) {\nNext line of code:\n      return new Builder(prototype, prototype.GetFieldNames());\n    }\n    public static Builder CreateBuilder(SendInvitationRequest prototype,", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                using (StreamReader reader = new StreamReader (stream)) {\n                    // Reading file content\n                    int read = 0;\n                    while ((read = reader.Read (buffer, 0, buffer.Length)) > 0) {\n                        args.Add (filename, buffer, read);\n                    }", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "        return self.parse_item(self._retr_file(filename))\n    def pollen_forecast(self, region, location):\n        filename = 'gds/specials/forecasts/tables/germany/Daten_'\n        frames = ['frueh','", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t}\n\t\tpublic string DisplayName {\nNext line of code:\n\t\t}\n\t\tpublic string ProcessName {\nNext line of code:\n\t\t}\n\t\tpublic string LocaleDir {\nNext line of code:", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "        c = self.copy()\n        return c.__rmul__(other)\n    \n    def __imul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t\tpublic override", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n                JungleClear();\n            }\n        ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "    s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_multi_global\n    assert s.name_is", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "        return not self._reqs\n    @property\n    def requirements(self):\n        \"\"\"List of all requirements.\n        return: list of all requirements\n        rtype: list of PayloadRequirement\n        \"\"\"\n        return list(self._reqs.values())\n    def __", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(field_def, field_model_def)\n        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(field_def", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "        assert!contains(invoke.callTarget().graph());\n        invokeQueue.pop();\n        assert invokeQueue.size() <= maxGraphs;\n    }\n    private void pushInvocationAndGraphs(Invoke invoke) {\n        assert invoke.callTarget().graph()!=", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "            if (bugAnnotation.getClass()!= BugAnnotation.class) {\n                emitLine(\"The bug instance \" + bugInstance.getName() + \" is not a valid BugInstance.\");\n                return;\n            }\n            if (bugAnnotation.getPriority()", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "    def replace_arch_section(self, cr, uid, res_id, xpath, arch_section, context=None):\n        \"\"\" Replace an embedded field with a t-field.\n        :param str model:\n        :param int res_id:\n        :param str", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "    if (event == MSG_SET_CALLBACK) {\n        mCallback = (IImsVideoCallCallback) event.obj;\n    }\n    if (event == MSG_SET_CAMERA) {\n        onSetCamera((String) event.obj);\n    }\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor, DEFAULT_FILL, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\t\t\t\tmapping.SqlLoader = new SqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, Action<IKeyMapper> keyMapper)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "    \"\"\"Method to remove a user session for debugging.\n    Accepted parameters are the same as to the constructor of :py:class:`~xmpp_backends.base.UserSession`.\n    \"\"\"\n    user = '%s@%s' % (username, domain)\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "                var result = env.CompileExecuteFAF(\"select * from MyInfraW where f1=10 and f2='>E1<'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "            if pytest_con:\n                pytest_command = [pytest_con, '--pytest-args', '--pytest-args-file',\n                                  pytest_args_file, '--pytest-args-file-path',\n                                  pytest_args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new Error(e);\n\t\t}\n\t\tif(!(uri.getScheme()== null || uri.getHost()== null || uri.getPort()== -1 || uri.getUserInfo()", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        if (htmlDisabled) {\n            value = null;\n        } else {\n            value = BasicHTML.createHTMLView(c, text);\n        }\n        if (value!= null) {\n            c.setClientProperty(BasicHTML.propertyKey, value);\n            ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "                if (from.InRange(Map.TerMur, 1))\n                {\n                    if (from.InRange(Map.TerMur, 2))\n                    {\n                        if (from.InRange(Map.TerMur, 3))\n                        {\n                            if (from.InRange", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "        Map<String, AnnotationMirror> r2 = new HashMap<String, AnnotationMirror>();\n        for (AnnotatedTypeMirror type : types) {\n            if (type.hasAnnotationRelaxed(I)) {\n                String immutableString =\n                    ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "public void UpdateRanks()\n{\n\tif (!m_Faction.IsFactionReady )\n\t{\n\t\treturn;\n\t}\n\tif ( m_Faction.FactionReady )\n\t{\n\t\tm_Faction.Rank = 0;\n\t\tm_", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        \"\"\"\n        with open(fpath, 'wb') as f:\n            f.write(self.encode(self.wrapwidth))\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the string representation of the file to *fpath*.", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "        private void addOpenDocumentMenu(JMenu _jMnuRoot){\n            ActionListener oActionListener = new ActionListener(){\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    String sTDocUrl = evt.getActionCommand();", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "            }\n        }\n    }\n    private void mergeReadCache(List<ReadEliminationBlockState> states) {\n        for (Map.Entry<CacheEntry<?>, ValueNode> entry : states.get(0).readCache.entrySet()) {\n            CacheEntry<?>", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "    def test_single_build_success_sends_summary_review(self):\n        d = self.check_summary_build(buildResults=[SUCCESS, SUCCESS],\n                                     finalResult=SUCCESS,\n                                     resultText=[\"succeeded\",", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    \"\"\"\n    Return the cross-publication's announcement.\n    \"\"\"\n    return self.announcement.title\ndef _redo_announcements_twitter_cross_publication_rendering(sender, **kwargs):\n    \"\"\"\n    Redo text rendering of all", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "    'RecordMetadata',\n    'BibrecBibxxx',\n    'BibrecBibxxxMixin',\n    'BibxxxMixin',\n    'BibrecBibxxx',\n    'BibrecBibxxxMixin',\n    'Bib", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        row = sub.row(align=True)\n        row.active = bool(mat.light_group)\n        row.prop(mat, \"use_light_group_exclusive\", text=\"Exclusive\")\n        row.prop(mat, \"use_light_group_local\",", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "    # Get the last snapshot\n    last_snapshot = conn.execute(\"SELECT last_snapshot FROM projects WHERE project_id =?\", (project_id,)).fetchone()\n    if not last_snapshot:\n        # If there is no last_snapshot, create one", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "  #############################################################################\n  def updateWaitingIntegrity( self ):\n    \"\"\" This method updates the waiting integrity status\n    \"\"\"\n    gLogger.info( \"Updating waiting integrity status\" )\n    res = self.integrityClient.getWaitingIntegrity( int(", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\n\t\tAddPhrase(\"...\");\n\t\tAddPhrase(\"A sword does not betray its own will.\");\n\t\tAddPhrase(\"A sword is not a stick. I don't feel any tension from you!\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "    def __repr__(self):\n        return '<TaskData uuid=%s name=%s path=%s play=%s>' % (self.uuid, self.name, self.path, self.play)\nNext line of code:\n    def __", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "  self.category = atom.Category()\n  self.category.type = 'text'\n  self.category.text = 'Less: &lt;'\n  self.assert_(self.category.type == 'text')\n  self.assert_(self.category.text == 'Less", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "phplexer = PhpLexer(\n    # Enable highlighting for PHP code not between <?php...?> by default\n    #phplexer.flags.ignore_comments = True,\n    #phplexer.flags.ignore_whitespace = True,\n    #", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "        if self.compile:\n            bytecode_outputs = self._bytecode_filenames(pure_outputs)\n        else:\n            bytecode_outputs = []\n        ext_outputs = \\\n            self._mutate_outputs(self.distribution", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "            if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n                mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\t\t\t\tMsg(\"You're a Complicity, huh?<br/>I don't know what that means. What's that?\");\n\t\t\t\tMsg(\"Well, it means you're a Complicity, and you're a Complicity, and you're a Complicity, and you're a Complicity, and you", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "            var models = service.TryGetAllForEventDelegate(0);\n            ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = true;\n            return View(\"DelegateList\", models);\n        }\n        // Add a relationship", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\t\t\tint height = 0;\n\t\t\tint width = 0;\n\t\t\tint maxWidth = 0;\n\t\t\tint maxHeight = 0;\n\t\t\tint maxWidthHeight = 0;\n\t\t\tint maxWidthHeight = 0;\n\t\t\tint maxWidthHeight = 0;\n\t\t\tint maxWidthHeight = 0", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "        }\n    }\n}\n\nA:\n\nI think you can use the following code to get the URL of the redirect:\nString url = \"http://www.google.com/search?q=http://www.google.com/search&oq=http://www.google", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\t// If we found a path, we can now harvest the resources.\n\t\t\t\tvar harvPos = path.Last();\n\t\t\t\tvar harvOffset = harv.LastLinkedProc?? harv.LinkedProc?? 0;\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row = cursor.fetchone()\n    print \"Row is: sdate %s, stime %s, edate %s, etime %s, duration %s, src_callsign %s,", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity);\n\t\t\t\tif (InitializeLazyProperty(field", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "            if (skip)\n            {\n                gotoLoopEntry = true;\n            }\n            if (gotoLoopEntry)\n            {\n                states[stateIndex++] = _allocator.AllocateUnits(1);\n                if (states[stateIndex] == Ppm", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "                        var radius = (int) obj.Radius;\n                        return string.Format(\"({0},{1},{2})\", radius, radius, radius);\n                    }\n                    if (obj is DateTime)\n                    {\n                        var date = (DateTime) obj;\n                        return", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x00' * 8, self.read(o))\n    def test_insert", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "        if restart_dhcp==\"0\":\n            self.logger.info(\"restarting DHCP\")\n            self.dhcp.restart()\n        else:\n            self.logger.info(\"restarting DHCP with restart_dhcp=%s\" % restart_dh", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "    def test_UID_and_GID_switches(self):\n        \"\"\"\n        Check UID/GID switches when current effective UID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(1, 0, 0, 0, [0, 1], [])", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "    ]\n    sge_cmd_arg += [\n        '-c', '-f', log_name,\n        '-o', log_name,\n        '-l', '-c', '-f', log_name,\n        '-l', '-c', '-f',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "        /// <summary>\n        /// The Signed Double VR.\n        /// </summary>\n        public static readonly DicomVr ODvr = new DicomVr(\"OD\", false, false, true, 8, true, '\\0', 8,\n            delegate(D", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "    @HOSTED_ONLY\n    public void writeHeaderValue(Object mirror, int offset, Value value) {\n        assert offset == lengthOffset;\n        mirror.writeArrayLength(value);\n    }\n    @HOSTED_ONLY\n    public void writeHeaderValue", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "        if premium_url:\n            self.download(premium_url, post={\"download\": \"normal\"})\n            self.logDebug(self.req.http.lastEffectiveURL)\n            check = self.checkDownload({\"expired\": self.LINK_EXPIRED_", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "  <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n  <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "        if ((paramintW.val == 0? 0 : 1)!= 0) {\n          return;\n        }\n        i11 = paramintW.val;\n        i20 = i18 - 1 + paramintW.val;\n        i21 = paramintW.val;", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "    }\n    @Override\n    public Event.Builder newEventBuilder() {\nNext line of code:\n    }\n    @Override\n    public Event.Builder newEventBuilderBuilder() {\nNext line of code:\n    }\n    @Override\n    public Event.Builder newEventBuilder", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "\t\t\t\t}\n\t\t\t\telse if(model.isRollover()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(bDrawCross){\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\nA:\n\nI think you are looking for something like this:\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t\n\t\t//this will be much better doing a select distinct(session) instead of using SelectJumps or Runs\n\t\tArrayList sessionValuesArray = new ArrayList();\n\t\tforeach(string t in sessionValuesArray)", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "            if (relativePath == null) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(relativePath, fileName);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\t\t[DefaultValue (\"\")]\n\t\tpublic virtual void AddToConstraintCollectionSetup (ConstraintCollection collection)\n\t\t{\n\t\t\tcollection.AddToConstraintCollection (this);\n\t\t}\n\t\t[DefaultValue (\"\")]\n\t\tpublic virtual void AddToConstraintCollection", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "    plt.plot(cr['combined'][app][VC]['durations'],\n             cr['combined'][app][VC]['stats'][stat],\n             'o', ms=8, label='%s, %s' % (app, test))\n    ", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"\\n\";\n\t\t\tstr += \"Transition: \\n\";\n\t\t\tstr += _current_transition.ToString() + \"\\n\";\n\t\t\tstr += \"\\n\";\n\t\t\tstr += \"Desired", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\t\t\t\ttx = s.BeginTransaction();\n\t\t\t\tstats.Clear();\n\t\t\t\ttx = s.BeginTransaction();\n\t\t\t\tstats.Clear();\n\t\t\t\ttx = s.BeginTransaction();\n\t\t\t\tstats.Clear();\n\t\t\t\ttx = s.BeginTransaction();\n\t\t\t\tstats.Clear();\n\t\t\t\ttx = s", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "  knn.learn(v[0], 0)\n  knn.learn(v[1], 0)\n  knn.learn(v[2], 0)\n  knn.learn(v[3], 1)\n  knn.learn(v[4], 1)", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        import os\n        os.popen('ls -l /')\n        self.assertRaises(OSError, os.popen, 'ls -l /')\n        self.assertRaises(OSError, os.popen, 'ls -l /', shell=True)\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "        return new CeylonParseController(sourceViewer);\n        }\n        return new CeylonParseController(sourceViewer, controller);\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer, String contentType) {\n        ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "    \n    # Accept whitespace directly inside {%... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        self.verticalLayout_3.addLayout(self.horizontalLayout)\n        self.verticalLayout_3.addWidget(self.settings_ui_groupbox)\n        self.verticalLayout_3.addWidget(self.gridLayout)\n        self.vertical", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                  if (valueChoices!= null && valueChoices.contains(value))\n                  {\n                     chosenObj = valueChoices.iterator().next();\n                     break;\n                  }\n                  else\n                  {\n                     chosenObj = value;\n                     break;\n                  }", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotLine,\n                    Delay = 500,\n                    ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n\n}\n\nA:\n\nI think you are looking for the following:\npublic class ClientOperation\n{\n    public string Name { get; set; }\n    public string Action { get; set; }\n    public string ReplyAction {", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "                uiCRCITTSum = (uiCRCITTSum << 8) | uiByteValue;\n            }\n            return (uiCRCITTSum);\n        }\n        public ulong crcbitbybitfast(byte[] p)\n        {\n            // fast", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\t\tICommand.Run(\"StartCoreServices\");\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Starts the core services.\n\t\t/// This initializes the PropertyService and ResourceService.\n\t\t/// </summary>\n\t\tpublic void ConfigurePropertyService()\n\t\t{\n\t\t\tIC", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "class endpoint_key_list(XDRStruct):\n    __slots__ = ['keys']\n    def __init__(self, keys=None):\n        self.keys = keys\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "        self.l.addWidget(self.drawingModeWidget)\n        self.l.setAlignment(self.drawingModeWidget, qt.Qt.AlignLeft)\n        self.buttonGroup = qt.QButtonGroup(self)\n        j = 0\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "                if ( stationId.length() > 0 ) {\n                    // We have the station with TAF\n                    builder = new SQLiteQueryBuilder();\n                    builder.setTables( Wxs.TABLE_NAME );\n                    selection = Wxs.STATION_ID+\"=?\";\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "  if is_method:\n    print' return new %s%d<%s>;' % (parent_class, exec_count, signature)\n  else:\n    print' return new %s%d<%s>;' % (parent_class, exec_", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "if (i!=j)\n\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]/numHistories;\n\t\t\t}\n\n}\n\nA", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\treturn (int) (Math.random() * (int) (Math.max(1, (int) (Math.random() * (int) (Math.max(1, (int) (Math.random() * (int) (Math.max(1, (int) (Math", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "    def get_context_data(self, **kwargs):\n        context = super(UserDetailView, self).get_context_data(**kwargs)\n        context[\"contact\"] = self._get_bind_contact()\n        return context\nNext line of code:\n    ", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        permission", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\t}\n\t\t\tif ( shouldSet )\n\t\t\t{\n\t\t\t\tif ( shouldSend )\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.SendGump( new PropertiesGump( m_Mobile, m_Object, m_Stack, m_List, m_Page ) );\n\t\t\t\t}\n\t\t\t\telse", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\t\t\treturn new Apfloat[]{sortedNumbers[left / 2]};\n\t\t} else {\n\t\t\tApfloat[] medians = new Apfloat[2];\n\t\t\tmedians[0] = sortedNumbers[left / 2];\n\t\t\tmedians[1] = sortedNumbers[right / 2", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "\t\t\t\t    if (workerSocket!= null)\n\t\t\t\t    {\n\t\t\t\t\tif(workerSocket.Connected)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(workerSocket.Connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// if not already sending data to this client\n\t\t\t\t\t\t\tif (!sending_data.Contains(i", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nA:\n\nI think you are looking for something like this:\npublic static void runAPIv1ExampleRunnerProcurePurchaseOrderFromSupplier()\n{\n    Console.WriteLine(\"Example", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam &&!botController.IsAdmin)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t   botOptions.Add(slot);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t   botOptions.Add(slot);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "    Returns a range query result in JSON format.\n    The order of items in the JSON rows are:\n    1) Primary key\n    2) Start time as UNIX timestamp\n    3) End time as UNIX timestamp\n    4) 'title' from default metadata strand, if metadata exists;", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "\t\t\treturn new Vector2 (v.X - viewport.Center.X, v.Y - viewport.Center.Y);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 relative)\n\t\t{\n\t\t\treturn new Vector2 (v.X - relative", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "            if (cluster.RectangularBoundary!= null)\n                cluster.RectangularBoundary.CheckClusterConsistency();\n            if (cluster.RectangularBoundary.ClusterConsistency!= null)\n                cluster.RectangularBoundary.ClusterConsist", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The hashed 8 bytes of the public key called public key token of the referenced assembly. This is non empty of the referenced assembly is strongly signed.\n    /// </summary>\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            mActivity.setActivityType(type);\n            mActivity.setActivityId(requestId);\n            mActivity.setActivityName(type.getName());\n            mActivity.setActivityType(type);\n            mActivity.setActivityId(requestId);\n            mActivity.", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "if (nbttagcompound!= null && nbttagcompound.hasKey(\"color\", 3))\n{\n    NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n    if (nbttagcomp", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "                if sample_count[v, j] > 0:\n                    L[v] = left - sample_count[v, j]\n                    A[v, j] = left - sample_count[v, j]\n                    sample_count[v, j] += 1\n                v", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "                        new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new StatementPatternNode(\n                        new VarNode(\"subj\"), new VarNode(\"p\"), new VarNode(\"lit\"),\n                        null/* c */", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\t\t\twhen(classCache.getLookupService()).thenReturn(lookup);\n\t\t\tAnswer<Object> callableAnswer = new Answer<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\t\tCallable<?> callable", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override int GetStatus()\n\t\t{\n\t\t\treturn _status;\n\t\t}\n\t\tpublic override Exception GetRootCause()", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "            // Initialize the solver fields\n            // Set the convergence monitor\n            if (_iterator == null)\n            {\n                _iterator = Iterator.CreateDefault();\n            }\n            if (_preconditioner == null)\n            {\n                _preconditioner = new UnitPrecondition", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "    'command',\n    '--no-human-readable',\n    '--list-only',\n    '-r',\n   'src',\n    'dst'\n],\nshell=False, env=None,\nstdout=PIPE, stderr=PIPE,", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "}\nvoid btKinematicCharacterController::setMaxSlopeDot(double slopeDot)\n{\n\tm_maxSlopeDot = slopeDot;\n}\nvoid btKinematicCharacterController::setMaxSlopeDotDot(double slopeDot", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if ( this.id == null ) {\n            return false;\n        }\n        if ( proxyThat == null ) {\n            return false;\n        }\n        if ( this.id.equals(proxyThat.id) ) {\n            return true;\n        }\n        ", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "        if not mapping_json:\n            return result\n        mapping = json.loads(mapping_json)\n        if'mappings' not in mapping:\n            return result\n        mapping_mapping = mapping['mappings']\n        if 'properties' not in mapping_m", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t}\n\t\t\t// init accessor\n\t\t\tif (_accessor!= null)\n\t\t\t{\n\t\t\t\tXmlAttribute accessorAttribute = _accessor.Attributes[ACCESSOR_ATTRIB];\n\t\t\t\tXmlAttribute modifier", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "class PermissionGroupsFormWithGroup(forms.Form):\n    \"\"\"Form to manage (select/deselect) user permission groups\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user')\n        community =", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "        return frame_header + padding_bytes + self.data\nclass DataFramePacket(object):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "\t\tif (this.neighbors == null)\n\t\t\treturn false;\n\t\tif (other.neighbors == null)\n\t\t\treturn false;\n\t\tif (this.neighbors.size()!= other.neighbors.size())\n\t\t\treturn false;\n\t\t\n\t\tfor", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "    def _map_filtered_to_global(self, filtered_data, data, current_filter, key):\n        \"\"\"Map filtered data to global data.\n        Parameters\n        ----------\n        filtered_data : array\n            Filtered data.\n        data : array\n            Global", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "        if (initializers.size() > 0) {\n            // TODO: Handle the case where the initializer is a\n            // constructor call.\n            if (initializers.get(0).getKind() == Kind.CONSTRUCTOR) {\n                // TODO: Handle the case", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.RuntimesChanged -= DbgProcess_RuntimesChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.IsRunningChanged -= DbgProcess", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "    self.assertEqual(c.branch, \"test/mail/syncmail.1\")\nNext line of code:\n    self.assertEqual(c.branch, \"test/mail/syncmail.2\")\nNext line of code:\n    self.assertEqual", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "using (Form myForm = new Form()) {\n    myForm.Controls.Add(myTrackBar);\n    myForm.Show();\n    \n    Assert.AreEqual(50, myTrackBar.Height, \"#SIZE2_5\");\n    Assert.AreEqual", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "# Create bodies\nbodies = []\nbody_types = []\nbody_names = []\nfor ID, structure in enumerate(structures):\n  print('Creating structures = ', structure[1])\n  # Read vertex and clones files\n  struct_ref_config = read_vertex", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community>", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "            int min2 = wideRExtent[end][r.rightChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[start", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "            def wrap(*arg, **kw):\n                if not retval:\n                    query = arg[0]\n                    fn(*arg, **kw)\n                    return query\n                else:\n                def wrap(*arg, **kw):\n                    if not retval:\n                        query = arg[", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "    for (int i = 0; i < exceptionDates.size(); i++) {\n      exDateList.add(exceptionDates.get(i));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the occurrences of", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\n}\n\nA:\n\nI think you are looking for the following:\npublic class YafaRayWriter\n{\n    private final XMLWriter _writer;\n    private final Map<Appearance, String> _appearanceMap = new HashMap<Appearance, String>();\n    private final Map", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\t\tilgen.BeginCatchBlock(type);\n\t\t\t@catch.Generate(context, ilgen);\n\t\t}\n\t\tprivate void BeginCatchBlock(Type type)\n\t\t{\n\t\t\tilgen.BeginCatchBlock(type);\n\t\t}\n\t\tprivate void EndCatch", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate static final class ImageHelper extends ims.framework.utils.ImagePath\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate final String path;\n\t\t\tprivate final Integer width", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        if (isinstance(node.op, AdvancedSubtensor1) and\n                node.op.set_instead_of_inc and\n                node.inputs[1].owner and\n                isinstance(node.inputs[1].owner.op, Elemwise) and\n", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "        if (termData == null || termData.isEmpty()) {\n            return;\n        }\n        for (Map.Entry<String, Collection<String>> datum : termData.asMap().entrySet()) {\n            if (!datum.getValue().isEmpty()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "            buffer.Append(\"        .fontindex = \")\n              .Append(StringUtil.ToHexString(FontIndex)).Append(\"\\n\");\n            buffer.Append(\"        .formatindex = \")\n              .Append(StringUtil.ToHex", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "        if self.show_in_read_only_mode:\n            self.runtime.add_block_as_child_node(self, xml_object)\n        else:\n            self.runtime.add_block_as_child_node(self, xml_object,\n                               ", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "    if not \"more_info\" in res:\n        update_needed = False\n\ndef _backup_tables(logger):\n    \"\"\"This function backs up the tables that are not in the database yet\"\"\"\n    logger.info(\"Backuping tables that are not in the", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tstream = new InputStreamReader(location.openStream());\n\t\t\tclose = false;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tif (close)\n\t\t{\n\t\t\tstream.close();\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            this.label3.Size = new System.Drawing.Size(48, 16);\n            this.label3.TabIndex = 15;\n            this.label3.Text = \"X:\";\n            // \n            // objZLabel\n            // \n            this.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = gameObject, MemberName = \"SourceEvent\" };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = gameObject, MemberName = \"TargetEvent\" };\n\t\tsourceEventB", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "        if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb,\n                float(self.__done) / len(results))\n    def run(self):\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\t\tif(player.getWorld().isBlockLoaded(wand.getPos())) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void onWandered(EntityPlayer player, ItemStack wand) {\nNext line of code", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "        return rnd.nextInt(size);\n    }\n    public static class SqlPropertiesParser {\n        private static final String[] files = { \"test_data.properties\" };\n        private static final String[] files2 = { \"test_data2.properties\" };\n        ", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n        \n    def get_slice(self):\n        \"\"\"Return slice of k-point/spin combinations.\"\"\"\n        if self.gamma:\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\t\t\tthis.updateTreeViews();\n\t\t\tthis.updateListViews(\"Computer\");\n\t\t\tthis.updateListViews(\"Computer\");\n\t\t\tthis.updateListViews(\"Computer\");\n\t\t\tthis.updateListViews(\"Computer\");\n\t\t\tthis.updateListViews(\"Computer\");\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "\t\t\t\tif(value >= 0x0100)\n\t\t\t\t\t++length;\n\t\t\t}\n\t\t}\n\t\t// Return the length to the caller.\n\t\treturn length;\n\t}\n\t// Get the bytes that result from encoding a character buffer.\n\tpublic unsafe override int GetBytes (\n\t\tchar", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\t    if (IsRagdoll && RootBodyPart!= null) {\n\t        return;\n\t    }\n\t    if (IsRagdoll) {\n\t        Ragdoll = true;\n\t    }\n\t    else {\n\t        Ragd", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "            return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         * Returns true if", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "            // Derive the privilege this user has on the current container\n            String userPrivilege = request.getUserPrivilege().getName();\n            if (userPrivilege == Privilege.READ) {\n                // Get the node id of the node to which the port is being added\n                String", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "            this.source = source;\n            this.objectVariables = objectVariables;\n        }\n        public Iterable<PatternMatch> getIterable()\n        {\n            return new FilteredPatternIterator( this.source,\n                this.objectVariables );\n        }\n        ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        if (PhotonEditor.Current.RpcList!= null)\n        {\n            if (PhotonEditor.Current.RpcList.Count > 0)\n            {\n                for (int i = 0; i < PhotonEditor.Current.RpcList.Count; i++)", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "                # make a close match assertion\n                la = LinkAnnotation()\n                la.subject = uri\n                la.subject_type = 'uri'\n                la.project_uuid = project_uuid\n                la.source_id = 'label-match'\n                la.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "    if __name__ == '__main__':\n        import doctest\n        doctest.testmod()\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Feb  3 11:57:57", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "        doReturn(AccessResult.noProblem()).when(draftAccessServiceHelper).evaluateAllowToCreateUtkast(anyString(), any(Personnummer.class));\n        assertEquals(OK.getStatusCode(), response.getStatus());\n        ArgumentCaptor<CreateNewDraft", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "@ispec(\"32<[ ~off2(4) ~off3(6) ~off1(6) b(4) a(4) {99} ]\", mnemonic=\"LD_A\", mode=\"Long-offset\")\n@ispec(\"32<[ ~off2(", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "                m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n    internal sealed class Win32_FileInfo : IDisposable\n    {\n        public Win32_FileInfo(string fileName, Guid subject)\n        {\n            cb", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "    def __init__(self, config={}):\n        self.name =  \"\"\n        \"\"\"Layer Name\"\"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        \"\"\"Accoding topology type interface node set or interpolated node set", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None, userSid, groupSid, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0);\n\t\t\tAssert.AreEqual", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "        infoText += \"<br>\"\n        infoText +=  str(numberOfHiddenFiles) \n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n        infoText += \"file\" if numberOfHiddenFiles==1 else \"files\" \n        ", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform_values_holder_xml_json_to_json(value_holder_xml_json, format = 'date'):\n    if format", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "        String full_msgid = full_subj.getText().toString();\n        String full_repto = full_from_to.getText().toString();\n        String full_date = full_date.getText().toString();\n        String full_msgid =", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\t\t\t\tdelta[ 0 ][ idx ] += MULT( chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx ] + chemical[ 0 ][ idx + 1 ]\n\t\t\t\tdelta[ 1 ][ id", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight? 0 : p.getRasterWidth() - 1; \n        (leftToRight && x <", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\t\t\t\tif (block.Body.Count > 1) {\n\t\t\t\t\tif (prevChildAsBB!= null) {\n\t\t\t\t\t\tblock.Body.Add(prevChildAsBB);\n\t\t\t\t\t}\n\t\t\t\t\tprevChildAsBB = block;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tblock.Body.Add(", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Disassemble(object value, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "LOGIN_URL = '/accounts/login/'\n\n# The default login backend.\nLOGIN_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n)\n\n# The default password hashing backend.\nPASSWORD_H", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "        out[outOff] = (byte)(num & 0xff);\n        out[outOff + 1] = (byte)((num >> 8) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[out", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "    public void endElement(String namespaceURI, String localName) throws SAXException {\n        digest.update((byte) ((NAMESPACE_CODE >> 24) & 0xff));\n        digest.update((byte) ((NAMESPACE_CODE >> 16) &", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "        code = re_m4.sub('%%', code)\n        # replace all % by %% to prevent errors by % signs\n        code = re_m4.sub('%%', code)\n        # replace all % by %% to prevent errors by % signs\n        code = re_m", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "  }\n  }\n  public void mouseReleased(MouseEvent e) {\n    if (SwingUtilities.isLeftMouseButton(e)) {\n      btn.setSelected(false);\n      if (frameToClose!=null)\n        frameToClose.closeFrame();", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "            if isinstance(entry, gtk.Entry):\n                value = entry.get_active_text()\n            else:\n                value = entry.get_active_text()\n            if value:\n                self.on_keypressed(entry, event)\n        elif event.", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "if (pattern == null) {\n    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n}\ncolumnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\nbreak;\n        }", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "                    db.update(Db.Table1.TABLE_NAME, Db.Table1.ID_GROUP + \" = \" + newId, Db.Table1.VALUE);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, Db.Table", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "    - If C(state=absent), the module will attempt to remove the given key configuration.\n      If a matching key configuration isn't found on the device, the module will fail.\n    - If C(state=absent) and C(authentication=on), authentication will be turned on", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "\t\t\tif (numberToCancel > 0)\n\t\t\t{\n\t\t\t\tvar unit = self.World.Map.Rules.Actors[itemName];\n\t\t\t\tif (unit == null ||!unit.HasTraitInfo<BuildableInfo>())\n\t\t\t\t\treturn;\n\t\t\t\tif (self.World", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "    elif node.nodeType == Node.ELEMENT_NODE:\n        clone = newOwnerDocument.createElementNS(node.namespaceURI,\n                                                 node.nodeName)\n        for attr in node.attributes.values():\n            clone.setAttributeNS(", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "    return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mktype(type, data):\n    return aetypes.Type(type, data)\ndef mkunknown(type, data):\n    ", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "        #print \"this is the action list to send\"\n        #delete last element\n        #del listOfInput[-1:]\n        #print listOfInput\n        #print \"this is the action list to send\"\n        #delete last element\n        #del listOfInput[-", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "        send(myPlayer.getWeaponCooldown());\n        send(myPlayer.getWeaponCooldown());\n        send(myPlayer.getWeaponCooldown());\n        send(myPlayer.getWeaponCooldown());\n        send(myPlayer.getWeaponCooldown());\n        send(myPlayer.getWeaponCooldown", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        }\n        return beanProperties;\n    }\n}\n\nA:\n\nI think you can use the following code:\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "\t\t\tif (Param.DbType == DbType.Int32)\n\t\t\t{\n\t\t\t\tParam.ParameterName = \"@auto_inc\";\n\t\t\t\tParam.Size = 1;\n\t\t\t\tParam.Value = 1;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\t\treturn true;\n\t\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t\t\t\tservice.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response!= null)\n\t\t\t\t{\n\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "        if (!directedAclKeys.isEmpty() ) {\n            if (!authorizedUsers.containsKey( directedAclKeys.getId() ) ) {\n                authorizedUsers.put( directedAclKeys.getId(), new SecurePrincipalsManager( directedAclKeys )", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        \"\"\"\n        # Verify that all nodes were last edited in the past by create_user\n        for block in [component, child, sibling]:\n            check_node(block.location, None, after_create, editing_user, None, after_create, editing_user)\n        #", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        migrations.CreateModel(\n            name='State',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('code', models.CharField(max_", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "            if (parameterNames.Contains(\"*\"))\n            {\n                formatters.Add(new DefaultSampleObjectFactory());\n                return ActionSamples[new ActionSamplesKey(controllerName, actionName, parameterNames, sampleDirection, \"*\")];\n            }\n            if", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "IPooledEnumerable itemsInRange = src.Map.GetItemsInRange(p, range);\n\nThis line of code is the one that is causing the problem.\nI have tried to use the following code to get the items in range:\nIPooledEnumerable itemsInRange = src", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "  }\n  /**\n   * \n   */\n  public void hide()\n  {\n    m_panel.setVisible( false );\n  }\n}\n\n/**\n * \n * @author Kroc\n * \n * During the game join process, this dialog ask", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        if f:\n            f.readline()\n        except IOError:\n            # No preexisting file to remove blank lines from\n            f = None\n    if f:\n        f.close()\n    if not os.path.exists(path):\n        if not create", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tbuff[5] = (byte)((address & 0x00000000)  >>  0);\n\t\t\tbuff[6] = (byte)((address & 0x00000000)  >>  ", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "    c_elements = [\n        coeff * met.elements.get(\"C\", 0) for met, coeff in reaction.metabolites.items()\n    ]\n    return [elem for elem in c_elements if elem!= 0]\ndef _", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This verifies that the tag is in", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "                if portnum in self.ports:\n                    self.ports[portnum].flowlet_arrival(arp, self.name, srcip)\n                else:\n                    self.ports[portnum] = PortInfo(self.name, portnum, srcip, dstip)\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset))\n\t\t\t\tdecodeKeyLocatorDigest(keyLocator.getKeyDigest(), decoder);\n\t\t\telse\n\t\t\t\tthrow new Error(\"Unrecognized KeyLocatorType \"", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "\t\t\tif ( length < MapBufferThreshold )\n\t\t\t{\n\t\t\t\tif ( length < 0 )\n\t\t\t\t{\n\t\t\t\t\tthrow new AxiomException( \"Invalid buffer length\" );\n\t\t\t\t}\n\t\t\t\tif ( length < MapBufferThreshold )\n\t\t\t\t{\n\t\t\t\t\tIntPtr retPtr = ( (", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "                if (filter == 0) {\n                    // No filter\n                    fout.Write(curr, 0, bytesPerRow);\n                    fout.Write(prior, 0, bytesPerRow);\n                    fout.Write(endobj, 0, bytesPerRow);\n                    f", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic MskJointVoComparator(SortOrder order, boolean caseInsensitive)\n\t\t{\n\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "        return self.filter(\n            submitted_by=user,\n            commented_by=user,\n            reviewed_by=user,\n            store=poole_path,\n        )\n    def get_for_path_and_user(self, pootle_path", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "            \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n            \"named \\\"nosuchfield\\\".\",\n            \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"prot", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "            _indx2Units[i] = k & 0xff;\n            for (k++; i < N1 + N2; i++, k += 2)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "  if (m_IgnoreChanges) {\n    m_RecentItems.add(item);\n  } else {\n    m_RecentItems.add(item, m_RecentItems.size());\n  }\n  if (m_RecentItems.size() > m_MaxCount)", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "        return self.with_context(ctx).attendance_action(next_action)\n    @api.model\n    def attendance_change(self, next_action, entered_pin=None):\n        \"\"\" Changes the attendance of the employee.\n            Returns either an action or a warning", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tself.retune(None)\n\tdef predefinedTerrTranspondersList(self):\n\t\tself.list.append(getConfigListEntry(_(\"Transponder\"), self.TerrestrialTransponders))\n\t\tself.retune(None)\n\tdef predefined", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\t\t\tif (a!= null) a.follow.Or(p.follow);\n\t\t\telse a = p;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic Node LeadingOpt(Node p) {\n\t\tif (p == null) return null;\n\t\tNode a =", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "        if cwd:\n            if debugtab:\n                self.set_debugtab(cwd)\n            else:\n                self.set_cwd(cwd)\n        if profile:\n            if debugtab:\n                self.set_debugtab(profile)\n            else", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "    self.assertEqual(s.get_interface(), None)\n    self.assertFalse(s.has_interface(':1.23'))\n    s.set_interface(':1.23')\n    self.assertEqual(s.get_interface(), ':1", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                throw new Exception(\"Could not find model: \" + args.Key, e);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\nA:\n\nI think you are trying to do something like this:\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Net.Mail;\nusing Server;\nusing Server.Accounting;\nusing", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t@Override\n\tpublic Collection getOrphans(Serializable snapshot, String entityName) throws HibernateException {\n\t\tfinal Map sn = (Map) snapshot;\n\t\treturn getOrphans( sn.values(), map.values(), entityName, getSession() );\n\t}\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "            if old_num!= new_num:\n                headbook.set_tab_reorderable(child, new_num)\n                headbook.set_tab_reorderable(key2gmwidg[child].boardvbox, new_num)\n                headbook.set", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "        return rate\n    def delete(self, cancel=False):\n        \"\"\" Delete a CB rate in the UI\n        Args:\n            cancel: boolean, whether to cancel the action on alert\n        \"\"\"\n        view = navigate_to(self, 'Details')\n        view.toolbar", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\tif(!(orderInvestigationLiteVo.getSpecimenGridIsNotNull()))\n\t\t{\n\t\t\trow = form.getLocalContext().getRows().get(orderInvestigationLiteVo.getSpecimenGrid().getRowIndex());\n\t\t\trow.setValue(order", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "            tcpAcceptFilters.add(new TCPAcceptFilters(filterStr));\n            return;\n        case ZMQ.ZMQ_SEND_FILTER:\n            String filterStr = (String) optval;\n            if (filterStr == null) {\n                tcpAccept", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "HMAC hmac = new SelectableHmacSha512 (key, true);\n\nA:\n\nThe problem is that HMACSHA512 is a legacy implementation of HMAC-SHA-512. It is not part of the standard library.\nYou can use the new HMACSHA512 implementation", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "                if ( typeFragment.Equals( \"STRUCT\", StringComparison.InvariantCultureIgnoreCase ) ) {\n                    int count = 0;\n                    var structPart = new List<string>();\n                    do {\n                        bool isEndStruct = fragments[index].Equals", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "        output += \"</h1>\\n\"\n        output += \"</table>\\n\"\n        output += \"</body>\\n\"\n        output += \"</html>\\n\"\n        _file = open(filename, 'w+')\n        _file.write(", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "\n---\n\n'''\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom scipy.optimize import minimize\nfrom scipy.stats import norm\nfrom scipy.stats import norm\nfrom sc", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "    \"\"\"\n    I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible\n    for translating the interface of the standard library ``SSLContext`` object\n    to calls into PyOpenSSL.\n    \"\"\"\n    def __enter__(self):\n        return self\n    ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t\t( auction.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member viewing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction item</param>", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "    \"Run-file\": QKeySequence(Qt.CTRL + Qt.Key_F6),\n    \"Run-project\": QKeySequence(Qt.Key_F6),\n    \"Debug\": QKeySequence(Qt.Key_F7),\n    ", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "                int image = c.Read();\n                if (image < 0) image = 0;\n                if (image < 0x100) image = 0;\n                if (image < 0x200) image = 0;\n                if (image < 0x400) image = 0;\n                ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n        'creator': ('django.db.models.fields.related.ForeignKey', [], {'related", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "this.butAttach.Location = new System.Drawing.Point(97, 65);\nthis.butAttach.Size = new System.Drawing.Size(82, 20);\nthis.butAttach.TabIndex = 2;\nthis.butAttach.Name = \"butAttach\";\nthis", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\t\t\t\tif (HasImage)\n\t\t\t\t\treturn Module.Read (this, (type, reader) => reader.IsValueType (type));\n\t\t\t\treturn base_type.IsValueType (type);\n\t\t\t}\n\t\t\tset {\n\t\t\t\tif (HasImage)\n\t\t\t\t\treturn Module.Read (this", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "        }\n        /// <summary>\n        /// Gets or sets the delegate that checks whether the user wants to delete selected rows\n        /// </summary>\n        public CheckUserConfirmsDeletion CheckUserConfirmsDeletionDelegate { get; set; }\n        /// <returns></", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\t\t\tthis.vbox6 = new global::Gtk.VBox ();\n\t\t\tthis.vbox6.Name = \"vbox6\";\n\t\t\tthis.vbox6.Spacing = 6;\n\t\t\t// Container child vbox6.Gtk.Box+BoxChild\nGlobal::G", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "        \"cargo build --release --target arm-linux-androideabi --jobs %d --debug-mozjs --no-default-features --features %s\" %\n        (jobs, \" \".join(opts)), env=env)\n        if status:\n            return status\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t@Override\n\tpublic String toString() {\n\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" +\n\t\t\t\tthis.persistenceUnitName +\n\t\t\t\t\", persistenceProviderClassName=\" +\n\t\t\t\tthis.persistenceProviderClassName +\n\t\t\t\t\", transactionType=\" +\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "modifier.vertex_group_a = modifier_json['vertex_group_a']\n\nA:\n\nI think you are looking for something like this:\nimport bpy\nimport bmesh\nimport math\n\n# create a mesh\nmesh = bpy.data.", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "    assert job.total_num_assign_items == 3\n    assert job.has_assign_items(lattice_buffer_id, output_buffer_id)\n    assert job.num_assign_items(lattice_buffer_id, output_buffer_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "                except Exception as e:\n                    print(self.fatal+str(e)+self.blk)\n                    print(\"\")\n                    return\n            except KeyboardInterrupt:\n                print(\"\")\n                return\n            except Exception as e:\n                print(self.fatal+str", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "        if (sb!= null)\n        {\n            sb.append(\"&#\");\n        }\n        return sb.toString();\n    }\n}\n\nA:\n\nI think you are looking for something like this:\npublic static String encode(String string)\n{\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\t} else {\n\t\t\t\t\ts += \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "            }\n        }\n        return false;\n    }\n    /**\n     * INTERNAL:\n     * This function is referenced by processImport or processInclude possibly recursively\n     * @param Include theImportOrInclude\n     * @throws Exception\n     */\n    ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      return java.Value.ToString();\n      else\n        return null;\n    }\n    private static String GetJavaHome(String javaHome)\n    {\n      if (File.Exists(javaHome + @\"\\bin\\jvm.exe\"))\n        return javaHome +", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "        if ptype == 'DATA':\n            self.data = data\n        else:\n            self.bits = data\n        self.ss, self.es = ss, es\n        # The next packet is guaranteed to be a 'BITS' one.\n        if ptype == 'BIT", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "            return \"MixerLine(LineId=\" + this.LineId + \", ComponentType=\" + this.ComponentType + \", TypeDescription=\" + this.TypeDescription + \", Channels=\" + this.Channels + \", SourceCount=\" + this.SourceCount + \", ControlsCount=\" + this.Control", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                if(rankCounts[i] == 0)\n                {\n                    rankCounts[i] = min", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "    def _get_subject_key_identifier(self):\n        return self.cert.get_subject().get_subject_key_identifier()\n    def _get_authority_key_identifier(self):\n        return self.cert.get_authority_key().", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t}\n\t\treturn this.getScore(new double[] { p, 0 }, true) + this.getScore(new double[] { 0, n }, false);\n\t}\n\t/**\n\t * Computes the best possible score that might be achieved by refining the rule. During learning\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 133);\n            this.rptComboBox.MaxLength = 200;\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptCom", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (t.pos > beg)\n\t\t\t sym.attrPos = new Position(beg, t.pos, col);\n\t\t} else if (la.kind == 29) {\n\t\t\tGet();\n\t\t\tif (t.pos > beg)\n\t\t\t sym.attrPos = new Position", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "    }\n    /**\n     * @see java.lang.Object#hashCode(Object)\n     */\n    @Override\n    public int hashCode() {\n        return 0;\n    }\n    /**\n     * @see java.lang.Object#toString(Object)\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "        self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "                permissions = new ArrayList<PermissionEntry>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testReadonlyNodePermissions", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\t_eGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ETypedElement\" : \n\t\t\t\t\t_eType = (ETypedElement)value;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault : \n\t\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\t\t\tvalue10 =\n\t\t\t\tdomainFactory.getCareContext(domainObject.getCareContext());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tims.framework.utils.DateTime dateTime11 = valueObject.getCareContext().getEndOfRegistrationDateTime();\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "    if (index_elements[0] == \"Alpha:\"):\n        for j in xrange(1, len(index_elements)):\n            if (index_elements[j]!= \"*******\"):\n                rv['alphaCoefficients'].append", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "    } while (true);\n    // (, line 200\n    // [, line 201\n    // delete, line 201\n    slice_del();\n    // ], line 201\n    limit = limit_backward;\n    // (, line 201\n    // [, line 202\n    ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                var workTreeRev = new GitRevision(ObjectId.WorkTreeId)\n                {\n                    ParentIds = new[] { ObjectId.IndexId }\n                };\n                var indexItems = gitItemStatuses.Where(item => item.Staged == StagedStatus.Index", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "\t\t\t\tif (i == s.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t/* We have just called a slot, and this may have resulted in\n\t\t\t\t   disconnection of other slots from us.  The list copy", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "                        b,\n                        callback,\n                        asyncState\n                    }, asyncState);\n        }\n        public System.IAsyncResult CompleteAddInt(System.IAsyncResult asyncState) {\n            return asyncState;\n        }\n        public System.Web.Services.WebServiceResponse Inv", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_w", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "            edi_doc['__import_module'] = 'purchase.order.line'\n            edi_doc['__import_model'] ='sale.order.line'\n            edi_doc['__import_module'] ='sale.order.line'\n            edi_doc['__", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "    if args.index_file is not None:\n        log.msg('Index file: {}'.format(args.index_file))\n    if args.input_file is not None:\n        log.msg('Input file: {}'.format(args.input_file))\n    if", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        result = new ActionFactory(getConfig(), this._dbManager);\n        notifyListeners(new EventObject(this), EventStatusType.INFORMATION,\n                getClass().toString() + \", getClassByName(), \"\n                + \"class (\" + className + \"/\" +", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "    devices = context.list_devices(nomatch=True)\nNext line of code:\n    assert not list(devices)\nNext line of code:\n    devices = context.list_devices(nomatch=True)\nNext line of code:\n    assert list(devices)\nNext", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "                o = cls.newInstance(new Object[msg_size]);\n                o.setChannel(channel);\n                o.setData(cd);\n                o.setFingerprint(fingerprint);\n                channelList.add(o);\n            } catch (Exception e) {", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "            if (shell == null) {\n                throw new IllegalArgumentException();\n            }\n            final IProgressMonitor monitor = shell.getProgressMonitor();\n            if (monitor == null) {\n                throw new IllegalArgumentException();\n            }\n            final IProgressMonitor.ProgressMonitor", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "        if (m_Keys.Count >= MaxKeys)\n        {\n            m_Keys.Clear();\n            goto case 0;\n        }\n        }\n    }\n}\n\nA:\n\nI think you are trying to implement a keyring.\nA keyring is a", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "    # The interval lies entirely >= 0x10000\n    if X.begin >= 0x10000: return [ X ]\n    \n    # The interval lies entirely < 0x10000\n    if X.end < 0x10000: return [ X ]\n    \n    # The interval lies entirely in the", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "            if (map == 0)\n            {\n                if (map == 1)\n                {\n                    if (map == 2)\n                    {\n                        if (map == 3)\n                        {\n                            if (map == 4)\n                            {\n                                if (map == 5)\n                               ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "      if (split.length < 2) continue;\n      String regex = split[0];\n      String type = split[1];\n      if (type.equals(\"overwritable\")) {\n        String[] overwritableTypes = split[2].split(\",\");\n        if (", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "        return new ServiceDescription(\"_openhab-server._tcp.http.\", \"openHAB\", httpPort, getDefaultServiceDescription());\n    }\n    \n    public void registerItems(ItemResource itemResource, ItemUIRegistry itemUIRegistry) {\n        if (item", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "    @property\n    def type(self):\n        return 'difference'\n    @property\n    def description(self):\n        return 'The difference between the monitored resources'\nclass Status(object):\n    def __init__(self, want, have=None):\n        self.", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    device = Device(deviceToken)\n    print device.check_inspection()\n    print device.notification_postDevicetoken(loginId, password)\n    print device.newUser(loginId, password)\n    print device.mainmenu()\n    print device.end", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_Type_CustomType_StringString ()\n\t\t{\n\t\t\tActivator.CreateInstance (new CustomUserType (), \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Create", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"title\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        ", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new Tuner(device, addDevice);\n            tunerList.add(tuner);\n        }\n        return tuner", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (group.hasMember(player.getObjectId())) {\n        group.onEvent(new ChangeLeaderEvent(group, player));\n    } else {\n        log.warn(\"TEAM2: leader not in group {}\", group.onlineMembers());\n    }\n}\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if (first)\n        {\n            first=false;\n            \n            data.outputRowMeta = getInputRowMeta().clone();\n            meta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n            \n            for (int i=", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "        if SCons.Util.is_List(env['ENV'][var]):\n            env['ENV'][var] = os.pathsep.join(env['ENV'][var])\n        # Split at os.pathsep to convert into absolute path\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "\t    if (parent == null) throw new PageException(\"GridColumn.doStartTag: parent is null\");\n\t} while (parent!= null);\n\treturn 0;\n    }\n    /**\n     * @param mask the mask to set\n     */\n    public void setMask(", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "        if not utils_misc.wait_for(self.vm.is_running,\n                                  self.params.get(\"smp\"),\n                                  self.params.get(\"smp_timeout\"),\n                                  self.params.get(\"smp_retry_time\")):", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "    def __init__(self, *args, **kwargs):\n        super(MethodAddView, self).__init__(*args, **kwargs)\n        self.playbook_name = kwargs.get('playbook_name', '')\n        self.playbook_", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)iter.next()", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\t\t\tvar bytes = new byte[8];\n\t\t\tvar bytesLength = 0;\n\t\t\twhile (value > 0) {\n\t\t\t\tbytes[bytesLength++] = (byte)(value & 0xFF);\n\t\t\t\tvalue >>= 8;\n\t\t\t}\n\t\t\tbytes[bytesLength++] = (", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "    if env.get('WINDOWS_INSERT_MANIFEST', 0):\n        manifestSrc = target[0].abspath + '.manifest'\n        if os.path.exists(manifestSrc):\n            # If the manifest already exists, we don't need", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "if(stackInSlot==null)\n    continue;\n\nNext line of code:\nif(useBaubles)\n    BotaniaAPI.internalHandler.sendBaubleUpdatePacket(player, slot);\n\nNext line of code:\nif(remove)\n    manaItem", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "    assert f('12:30..+5', last) == (d(2014,1,31, 12,30), d(2014,1,31, 12,35))\n    assert f('12:30..-5', last) == (d(2014,1,31, 12", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false;\n        } else if ((!this.actionTraceList.equals(other.actionTraceList)))\n            return false;\n        if ((", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "        if params.get(\"show_header\", True):\n            if params.get(\"show_footer\", True):\n                return self.header + \"\\n\" + self.footer\n            else:\n                return self.header\n        else:\n            if params.get(\"show_", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "assertThat(rc, is(true));\n\nA:\n\nI think you are trying to do something like this:\npublic void testPubConnectSubBindIssue289and342() throws Exception\n{\n    ZMQ.Context context = ZMQ.context(1);\n    Socket pub = context", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                float v = valueAt(x, y);\n                Debug.Assert(v >= 0 && v < 256);\n                mesh.vertices[y * xSizeP + x] = new", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "                Dialog = new DialogEntry();\n                Dialog.Lines.Add(Lands);\n                Dialog.Lines.Add(Abilities);\n                Dialog.Lines.Add(Skills);\n                Dialog.Lines.Add(Inventory);\n                Dialog.Lines.Add", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "        self.fm.env.copy.append(one_file)\n        self.fm.env.copy.append(one_file.dirname)\n        self.fm.env.copy.append(original_path)\n        self.fm.env.copy.append(cwd", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "        outs.writeBoolean(false);\n        outs.writeUTF(name);\n        outs.writeObject(null);\n        outs.flush();\n        outs.close();\n        in.close();\n        }\n        else\n            outs.writeBoolean(true);\n            outs", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "        new Version(0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "            self.Log.debug(\"User state: %s\", userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        el", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        if (graph.isDefCollider(x, y, x)) return true;\n        if (graph.isAdjacentTo(x, y)) return true;\n        if (graph.isAdjacentTo(y, x)) return true;\n        if (graph.is", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "from django.conf import settings\n\n# This is the default value for the 'django.contrib.auth.backends.ModelBackend'\n# class.\n# This is the default value for the 'lazysignup.backends.LazySignupBackend'\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, True)\n        tree_model.add_map(tree_iter, self._create_store_map(1, True, 15, 2))\n        column.quantity_renderer.set_property", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "                    if (m_From == mobiles[i])\n                        m_From = mobiles[i];\n                    else\n                        m_From = mobiles[i].From;\n                    if (m_From == null)\n                        return;\n                    if (m_From.Deleted)", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "            if (RILJ_LOGD) riljLog(dc.serialString() + \"> \" + requestToString(dc.mRequest));\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected void\n    process", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\tm_key[i].Name = \"Exodus\";\n\t\t\t\t\tm_key[i].Hue = 0;\n\t\t\t\t\tm_key[i].ItemID = 0x207A;\n\t\t\t\t}\n\t\t\t\tm_Pe", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    for (String a : files) {\n                        mAdapter.createZip(new File(a));\n                    }\n                    mode.finish();\n                    return true", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, new ServerRecord(url, testInt1));\n\t\t\t\n\t\t\tif (rawResult!= null)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Test passed. The result of the call was \" + rawResult.toString());", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "byte[] pbIV = new byte[16];\nbyte[] pbTestKey = new byte[32];\nbyte[] pbTestData = new byte[16];\nbyte[] pbReferenceCT = new byte[16] {\n\t0x75, 0xD1, 0x", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "      return R.string.IdentityUtil_\"%s\" % resourceOne + R.string.IdentityUtil_\"%s\" % resourceTwo + R.string.IdentityUtil_\"%s\" % resourceMany;\n    } else {\n      String name = recipients", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "                16 + (~stactics_display_buffer.read(i) & 0x0f),\n                16,\n                0, 0,\n                pixel_x, pixel_y,\n                Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\t\t\t\t\t\t\"{1}), but was {2}\",\n\t\t\t\t\t\tNextLine.Length,\n\t\t\t\t\t\tNextLine,\n\t\t\t\t\t\tNextLine.Length));\n\t\t\tif (NextFrame.PixelCount > 0)\n\t\t\t{\n\t\t\t\t// Copy the layer to the output queue\n\t\t\t\tOutputQueue.Enqueue (", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if (script instanceof String) {\n            free(script);\n        } else if (script instanceof File) {\n            free(script);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n    private void free(Object obj) {\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "        if (this.ordinvcurrentstatus == null)\n            return -1;\n        if (this.ordinvcurrentstatus.isValidated())\n            return -1;\n        if (this.ordinvstatushistory == null)\n            return -1;\n        if (", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\t\t\t@Override\n\t\t\tpublic void setBlockSelection(final int start, final int end)\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setBlockSelection(final int start, final int end, final int start1, final int end1)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "\t\t\tWorldChat.CMOptions.HistoryBuffer--;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (!IsUser(user))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\t\t\t// $capture or $(..capture)\n\t\t\tLNode sub = GetCaptureIdentifier(pattern);\n\t\t\tif (sub!= null)\n\t\t\t{\n\t\t\t\tcaptures = captures?? new MMap<Symbol, LNode>();\n\t\t\t\tAddCapture(captures, sub", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                                   .Cast<Vector3>\n                                   .Where(\n                                        position =>\n                                            position.Distance(minionPrediction.CastPosition) <=\n                                            minionPrediction.RealRadius)\n                                   .ToList()\n                                   .ForEach(position =>\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "    public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {\n        if (this.g()) {\n            this.m();\n            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "    \"\"\"\n    Run pip to find the packages we need to get rid of.  Believe it or not,\n    edx-val is installed in a way that it is present twice, so we have a loop\n    to really really get rid of it.\n    \"\"\"\n    for _ in", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "        if (this.personFinIntDisclosureId == other.personFinIntDisclosureId) {\n            return true;\n        }\n        return false;\n    }\n    public String toString() {\n        return \"FinancialEntityAttachment [fileId=\" + fileId + \", attachment", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "        if hosts_file_path:\n            env[\"HOSTS_FILE\"] = hosts_file_path\n        return env\n    def build(self, release=False, dev=False, hosts_file_path=None):\n        \"\"\"Run the build command and return the output.\"\"\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "            }\n        }\n    }\n}\n\nA:\n\nI think you can use the following code:\npublic class WrappedNetworkLayer<T, R> : BaseNetworkLayer<T, R>\n{\n    private WrapperServerDataAdapter _networkLayer;\n    private Wra", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "  @Override\n  public void addComponentInst(String sComponentId, ComponentInst light) {\n    mock.addComponentInst(sComponentId, light);\n  }\n  @Override\n  public void addComponentInsts(List<ComponentInstLight> lComponentInsts) {", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                case Param.Campus:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token.Text;\n                    break;\n                case Param.CampusAddress:\n                    c.CampusAddress", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "        assertEquals(stacks[0].getTags().size(), 2);\n        assertEquals(stacks[1].getTags().size(), 1);\n        assertEquals(stacks[2].getTags().size(), 1);\n        assertEquals(stacks[3].", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "                z_arr[p_index, 0, 0] = z_dict[z_key][kk]\n                z_arr[p_index, 0, 1] = z_dict[z_key][kk+1]\n                z_err_arr[p_index, 0", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            UnityEngine.Vector3 @value = (UnityEngine.Vector3)typeof(UnityEngine.Vector3).CheckCLRTypes(StackObject.ToObject(ptr_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "                if (colisionList.Count > 0)\n                {\n                    actionQueue.EnqueueAction(\n                        laneClearQueue,\n                        () => true,\n                        () => e.Cast(),\n                        () =>!e.IsReady());\n                    return;\n                }\n                if (", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "            for path, tests in iteritems(type_paths):\n                for test in tests:\n                    tests[test].add(path)\n            source_files[test_type] = tests\n        self._data = {test_type: tests for test_type, tests in iteritems", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        if srv_token is not None:\n            self.transport._send_message(Message(\n                self.transport.session_id,\n                self.transport.host_key,\n                self.transport.gss_kex_used,\n                self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "    f = Form(self.env['test_testing_utilities.m2o'])\n    with self.assertRaises(AssertionError):\n        f.f2 = 5\n        f.f1 = 6\n        f.f3 = 7\n        f.f", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  def transform_array(self, X, y, w):\n    \"\"\"Transform the data in a set of (X, y, w) arrays.\"\"\"\n    if self.transform_X:\n      X = np.nan_to_num((X - self.X_means)", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "        #Number of Msun objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        mf.append(cosmo.M_sun(zi))\n        dlnmdlnm.append(cosmo.dlnM(zi))\n        #", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "                this._newItemList.Add(changedItems);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n                this._newItemList.RemoveAt(startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "        pf.setParameter(pf.getParameterFamilyCode(\"DEPTH\"), depth);\n        //EXCLUSION\nNext line of code:\n        pf.setParameter(pf.getParameterFamilyCode(\"EXCLUSION\"), exclusionRegexp);\n        //INCLUSION\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\twindow.Hide();\n\t\t\twindow.Show();\n\t\t}\n\t\tprivate void OnClose(CancelEventArgs e)\n\t\t{\n\t\t\tProperties.Settings.Default.Save();\n\t\t\t_securitiesWindow.DeleteHideable();\n\t\t\t_ordersWindow.DeleteHideable();\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "\t\t\t\ticonDir.idEntries[i] = new IconDirEntry ();\n\t\t\t\ticonDir.idEntries[i].width = ide.width;\n\t\t\t\ticonDir.idEntries[i].height = ide.height;\n\t\t\t\ticonDir.idEntries[i].colorCount =", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "\t\tsuper.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));\n\t\tsuper.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));\n\t\tsuper.setLocalContext(new LocalContext(context, form.get", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2r)\n            else:\n                im1L = im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\tlblLabelPosition.setText(\"Chart Position: \" + position.getText());\n\t\t}\n\t}\n}\n\nA:\n\nI think you need to use a different approach.\nI would suggest you to use a List<String> to store the labels.\nThen you can", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "    assert simplify(Sum(x**2, (x, 1, n))) == \\\n            Sum(x**2, (x, 1, n))\n    assert simplify(Sum(x**2, (x, 1, n), (x, 1, m))) == \\\n            Sum", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "/**\n * This listener will be notified of all autonomous events that originate from\n * the specified TID.\n */\n@Override\npublic void addAutonomousListenerForAll(String tid, ReportListener listener) {\n\tengine.registerForAll(tid, listener);\n}\n/**\n *", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "            DefaultTreeModel model = treeModel.getModel();\n            DefaultTreeNode node = tree.getRootNode();\n            if (disableTreeSelection) {\n                node.setParent(null);\n                node.setParentNode(null);\n                node.setParentNode(null);", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "        } else {\n            desc = (XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getClass());\n        }\n        int sizeBefore = getNamespaceResolverSize(desc);\n        Byte", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "            if (chance < 0)\n                return;\n            if (chance > 1)\n                return;\n            if (chance == 0)\n                return;\n            if (chance == 1)\n                return;\n            if (chance == 2)\n                return;\n            if (chance", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "        d.setWidth(font.getWidth());\n        d.setHeight(font.getHeight());\n        return d;\n    }\n    \n    @Override\n    public Dimension getMaximumSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "                stack.addToSubroutine(id, nbSubroutines);\n            }\n        }\n    }\n    /**\n     * Finds the basic blocks that belong to this method, and marks these\n     * blocks as belonging to this method. This method follows the control\n     ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "                return (bool)this.ViewState[\"SubmitText\"]? true : (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue),", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.IsExpired)\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n        #region Properties\n        ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        }\n        return ret;\n    }\n    protected void configureApplication(Application app) {\n        if (app.getProperty(SPEC.PROP.CURRENCY)!= SPEC.CUR.CNY) {\n            app.setProperty(SPEC.PROP.CURRENCY", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\"\"\"\n                self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_payslip as hp, hr_payslip_", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tempty = string.Empty;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception exception)\n\t\t\t{\n\t\t\t\tErrorMessage.Show(exception, Assembly.GetExecutingAssembly(), MethodBase.GetCurrentMethod());\n\t\t\t\tempty = string.Empty;", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "        # Get the path from the environ\n        path = environ.get('PATH_INFO', '')\n        # If the path is empty, return an empty list\n        if not path:\n            return []\n        # If the path is a single slash, return the app\n        if", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "        #calculate the distance b/ p1 and p2\n        f2=lambda p1,p2:np.sqrt(np.sum((p1-p2)**2))\n        #anonymous function f3 is to calculate the coordinates of basis with magnitude of 1.,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\tcoll.add(new TumourGroupListVo(beans));\n\t\treturn coll;\n\t}\n\tpublic static TumourGroupListVoCollection buildFromBeanCollection(java.util.List beans)\n\t{\n\t\tTumourGroupListVoCollection coll = new Tum", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "            if entry_name in entries:\n                self.msg.fatal(\"Duplicate enumeratedValue entry '%s'\" % entry_name, self.src_ref)\n            entries[entry_name] = rdltypes.UserEnum(entry_name, entry_value", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "        finalizeQuery(connection.getProtocol(), query);\n        synchronized (queries) {\n            //queries.add(nextQuery);\n        }\n        if (contact!= null) {\n            finalizeQuery(connection.getProtocol(), query);\n            syn", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                if (HighestNumber < row.Category)\n                {\n                    HighestNumber = row.Category;\n                }\n            }\n            // add the new key to the table\n            if (HighestNumber > 0)\n            {\n                ARow.Category = HighestNumber;\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "    def createDescription(self):\n        if self.desc_func:\n            return self.desc_func(self)\n        else:\n            return \"Unknown block\"\n    def createDescription(self):\n        if self.desc_func:\n            return self.desc_func(", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "                if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture();\n                }\n                this", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "\tdata = Data( sys.argv[ 1 ], sys.argv[ 2 ] )\n\tmodel = Model( data )\n\tmodel.loadmodel( sys.argv[ 3 ] )\n\tmodel.initialize()\n\tmodel.precalculate_scores()\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "    # If the list is empty, return an empty list.\n    if not var:\n        return []\n    # If the list is not empty, return the list.\n    else:\n        return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "                if (headless)\n                {\n                    pnlIP.Dock = DockStyle.Fill;\n                    pnlIP.Visible = false;\n                    pnlIP.Top = pnlIP.Top + 10;\n                    pnlIP.Left = pnlIP.Left +", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "        }\n        public AttributeCollection(ShaderProgram shader, AttributeCollection attributes)\n        {\n            _sCurProgram = shader;\n            _attributes = attributes;\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "    exposedHeaders = exposedHeaders.replace('\\n', '\\n' + header + '\\n')\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef get_course_key(request):\n    \"\"\"\n    Get", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the current highlighted image\n     *\n     * @return the current highlighted image\n     */\n    public Vector_Rectangle getHighlightedImage() {\n        if(highlightedImage", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "QUEST.set(\"name\",\"StolenDignity\")\nQUEST.set(\"description\",\"StolenDignity\")\nQUEST.set(\"quest_number\",\"386\")\nQUEST.set(\"quest_name\",\"StolenDignity\")\nQUEST.set(\"quest_description\",\"StolenDign", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.predict(pssm, i);\n\t\t}\n\t\t\n\t\tthis.globalComposition(pssm);\n\t\t\n\t\tfor (int", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
{"pred": "        self._model = self\n        self.__dict__.update(self.__dict__)\n        self.__dict__.update(self.__dict__)\n        self.__dict__.update(self.__dict__)\n        self.__dict__.update(", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "        mNavigationList.add(set);\n        mNavigationView.setAdapter(controller);\n        mNavigationView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClickListener(View v, ContextMenuInfo menuInfo)", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
