{"pred": "\t\t\t\tif ( m_Participants[i] is ParticipantGump )\n\t\t\t\t{\n\t\t\t\t\tm_Participants[i].CloseAllGumps( types, defs );\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\tdef get_graph_score(self, A):\n\t\tscore = 0\n\t\tfor u,v,key,data in A.edges(data=True, keys=True):\n\t\t\tscore += data[self.attr]\n\t\treturn score\n\tdef best_branching(", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\t\t\t\t\twriter.addAttribute(\"value\", value.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(Object value, HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tOLBaseClass ol = (OLBaseClass) value;\n\t\t\t\t\n\t\t\t\tif", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "    def get_language_status(self, language):\n        if language in self.subtitle_languages():\n            return True\n        else:\n            return False\n    def get_language_code(self, language):\n        els = self.get_elements_list(self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "        if self.type == TYPE_ANAGRAMS:\n            ret = \"Anagrams\"\n        elif self.type == TYPE_TRIVIA:\n            ret = \"Trivia\"\n        elif self.type == TYPE_BOTH:\n            ret = \"Anagrams", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "            spaceRegistrar.put (name, new JESpace (name, path));\n        }\n        return (JESpace) sp;\n    }\n    public synchronized void wait (long timeout) {\n        try {\n            if (gcTask.isDone())\n                return;", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "            s.print(\"Certificate: \");\n            for (byte[] b : chain) {\n                s.print(b);\n            }\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * ClientHello... send by CLIENT\n *\n * ClientHello", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "        if environ['REQUEST_METHOD'] == 'POST':\n            # return SOAP POST gateway\n            request = self.rfile.read(int(self.headers.getheader('content-length')))\n            response = self.dispatcher.dispatch(request)\n            ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void consumeAlchemize() {\n\t\tif (item.quantity() == 1) {\n\t\t\tif (item.energyVal() > 0) {\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "    def action_create_copy(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker create_copy %s %s\", pprint.pformat(status_id),\n                             pprint.p", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "    def mark_status_as_repeated(self, status_id):\n        mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "        for trust_manager in self.trust_managers:\n            try:\n                return trustManager.getAcceptedIssuers()\n            except CertificateException:\n                pass\n        return None\n    def getAcceptedIssuerTypes(self):\n        for trust_manager in self.trust", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\t\t\ta.Union (b);\n\t\t}\n\t\t[Test]\n\t\tpublic void Union_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tSecurityPermission b = new SecurityPermission (Permission", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "    self.__datastream_transport,\n    self.__datastream_protocol)\n    self.__datastream_transport,\n    self.__datastream_protocol)\n    self.__datastream_transport,\n    self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "        MailManagerException e = new MailManagerException(\"domain_admin.jsp\");\n        e.setMessage(\"domain_admin.jsp\");\n        request.setAttribute(\"domain_admin.jsp\", e);\n    }\n    /**\n     * Prepares the account info\n     ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tif (option1 == false) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnThis);\n\t\t\t\t\t//if option is 2, then change the weight\n\t\t\t\t\tif (option1 == true) {\n\t\t\t\t\t\tnewPersonWeight = Convert.ToDouble(Util.Change", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHELL_HEIGHT,\n\t\t\t\t\t\t\"Shell height\", getFieldEditorParent()));\n\t\t\t\taddField(new Integer", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new TimedData(", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "        self._autoflush()\n        self._flush_all()\n        self._flush_all_loaded()\n        self._flush_all_deleted()\n        self._flush_all_deleted_loaded()\n        self._flush_all_deleted_deleted()", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                m_Owner.Caster.SendAsciiMessage(\"Target selected\");\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "    r'/foo/*' in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\n\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList<IField>(", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    args = parser.parse_args()\n    if args.coordfile:\n        WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    else:\n        print >> sys.stderr, 'Please provide a coord.rem", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "\t\t\tif (viewIndex >= 0) {\n\t\t\t\tView v = Views [viewIndex];\n\t\t\t\tif (v!= null) {\n\t\t\t\t\twriter.WriteLine (\"<div class=\\\"view\\\">\");\n\t\t\t\t\twriter.WriteLine (\"<div class=\\\"view-content\\\">\");\n\t\t\t\t\twriter.WriteLine", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "        builds.extend(android_builds(build, builds=builds))\n    if build == 'beta':\n        builds.append({'os': 'os_android',\n                       'os_pretty': 'Android',\n                       'os_arch_pretty': 'Android %", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "                if (mod >= 156 && mod <= 158)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if(i.SkillBon", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "            foreach ( ArgumentSyntax argumentSyntax in argumentSyntaxs ) {\n                if ( argumentSyntax.IsByRef ) {\n                    var memberSyntax = memberList.FirstOrDefault( m => m.Name.Token.Value.StringValue == argumentSyntax.ArgumentName", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t}\n\t\tif (stateBeansList!=null &&!stateBeansList", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            if (cff)\n                tmp.Add(new PdfName(subsetPrefix + fontName+\"-\"+encoding));\n            else\n                tmp.Add(new PdfName(subsetPrefix + fontName));\n            writer.Write(tmp);\n            writer", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "        split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to the first group configuration.\n        self.assertEqual(0, split_test.user_partition_id)\n        # Set to second group", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "        return new ListenableFutureTask<>(callable);\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      Bitmap bitmap = null;\n      try {\n        final String path = model.getSprite().getPath();\n        final String fileName", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\t\tcgn.depth = cgn.main.depth + 1;\n\t\t\t\t\t\t\tmore =", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeManageTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    ", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "                base.Render(writer);\n            }\n            if (Enabled)\n            {\n                writer.WriteLine(\"<div class='toolbar-button' role='toolbar-button' role-separator='{0}' role-visibility='{1}' role-enabled='", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp,\n\t\t\tLabanSequenceVector sequences) {", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "    return \"Effect [id=\" + id + \", probability=\" + probability + \", scopes=\" + scopes + \"]\";\n}\n}\n\nA:\n\nI think you are looking for a Map<String, Integer>\nMap<String, Integer> map = new HashMap<String", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\npackage com.github.lazylazuli.traps.common.tile.TileEntity;\n\nimport java.util.Random;\n\npublic class TileEntity extends TileEntity implements ITickable\n{\n\tprivate int sharpness;\n\t\n\tprivate int fire;\n\t\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "    def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(Document, DynamicDocument)\n        self.circular_reference", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (path.Contains(\".DS_Store\"))\n                {\n                    continue;\n                }\n                if (path.Contains(\"/\") || path", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "        if x and y:\n            if self._inspector.dim_name_to_size[x]!= self._inspector.dim_name_to_size[y]:\n                raise ValueError('Dimensions of x and y must be the same.')\n            if self", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic void putAll(Map<? extends K,? extends E> m) {\n\t\tinternalMap.putAll(new TransformingMap(m, writeTransform, (k, o) -> o, o -> o));", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": request: {4}, path: {5}, param: {6}\",\n                    //                  scene", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\tset { m_ID = value; }\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tinternal short m_Hue;\n\t}\n\t[System.Runtime.InteropServices.StructLayout( System.Runtime.", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.errorProvider2.GetError(textDateStart)!=\"\"\n\t\t\t\t|| textDateStop.errorProvider2.GetError(textDateStop)!=\"\"\n\t\t\t\t|| textDatePaycheck.", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "\t\t\t\toutcomes[resultIndex] = parentIndex;\n\t\t\t\tconfidences[resultIndex] = Math.pow(confidences[resultIndex], 1d / depths[resultIndex]);\n\t\t\t\tdefaultConfidence = (1d - confidences[resultIndex]) / numberOfPartitions;\n\t\t\t\tfor", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "    if not data_dict:\n        return {'success': False,'msg': _('No group_id or org_id provided, cannot check auth.')\n    model = context['model']\n    org_id = data_dict.get('org_id')\n    group_id", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "            codePoint = ch - 0xD800 + 0xDC00;\n         }\n         if ('\\uDC00' <= ch && ch <= '\\uDFFF' && offset < strlen) {\n            codePoint = ch - 0xDC00 + 0xDC00;", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "            return new[] { new SearchResult() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version!= ProtocolVersion.Version)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.IsNullOrEmpty(handshake.Version)?", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "    ValidationResults results = validFormat(accessionNumber, true);\n    SampleDAO sampleDAO = new SampleDAOImpl();\n    boolean accessionUsed = (sampleDAO.getSampleByAccessionNumber(accessionNumber)!= null);\n    if (results == Val", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "    if prnum == 'advanced':\n        advanced()\n    elif prnum == 'viewsdb':\n        viewsdb()\n    elif prnum == 'date':\n        date()\n    elif prnum == 'donate':\n        donate()\n    else:", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionList", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "  return S_OK( {'grouping':grouping, 'typeName':typeName, 'plotName':pD[ 'plotName' ], 'pinDates':pinDates, 'extraParams':extraParams } )\n\ndef parseFormData(data):\n  p", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "        // Output Parameters\n        for (int i = 0; i < plan.outputParameters.length; ++i) {\n            StmtParameter catalogParam = catalogStmt.getOutput_parameters().add(String.valueOf(i));\n            catalogParam.setJavatype", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tvar baseRadius = Info.MaxBaseRadius;\n\t\t\tvar baseRadius = Info.MinBaseRadius;\n\t\t\tvar baseRadius = Info.MaxBaseRadius;\n\t\t\tvar baseRadius = Info.MinBaseRadius;\n\t\t\tvar baseRadius = Info.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\t\t\tSetAttributes (baud_rate, parity, data_bits, bits, hs);\n\t\t\tif (!SetCommState (handle, dcb))\n\t\t\t\tReportIOError (null);\n\t\t}\n\t\tpublic override bool IsOpen ()\n\t\t{\n\t\t\treturn (GetCommState (handle", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\t\t\tthis.comboBox1.Items.Add(\"Bonjour\");\n\t\t\tthis.comboBox1.Items.Add(\"Bonjour\");\n\t\t\tthis.comboBox1.Items.Add(\"Bonjour\");\n\t\t\tthis.comboBox1.Items.Add(\"Bon", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"keep_tempdir is\", _keep_tempdir\n    #print \"args is\", args\n    #print \"args.keep_tempdir is\", args.keep", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "                if (generateChecksum && checksumText)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                fontX = font.GetWidthPoint(altText!=", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\t\tfor entry in newList:\n\t\t\tself.newAPList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n\t\tself.cleanList = []\n\t\tfor entry in self.new", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "        y_points = np.arange(-90.0, +90.0, 2.0)\n        # The sample points are in the same order as the x_points and y_points\n        # arrays, but with the longitude values reversed.\n        sample_points = [\n", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "    return Arrays.stream(results).map(String::trim).filter(s ->!s.isEmpty()).toArray(String[]::new);\n  }\n  \n  /**\n   * Loads a comma-separated list of integers from Properties.  The list cannot include", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "    print '\\033[1;33;40m'\n    print '\\033[1;32;40m'\n    print '\\033[1;33;40m'\n    print '\\033[1;31;40m'\n    print '\\033[1;", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n        private void toolStripButtonRevert_Click(object sender, EventArgs e)\n        {\n            _index = _packets.Count - 1;\n            UpdatePacketDisplay();\n        }\n        private void toolStripButtonSave_Click(object sender,", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "            this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        }\n    }\n}\n\nA:\n\nYou can use a Dictionary<TKey, TValue> to store the key-value pairs.\nDictionary<TKey, TValue> refSet = new Dictionary<TKey, TValue>();\n\nA:\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            writeUint64(header, emptyStreams.length());\n            writeUint64(header, emptyStreams.get(0));\n            for (int i = 1; i < emptyStreams.length(); i++) {\n                writeUint64(header, emptyStreams.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "        if isinstance( original, _BaseFunction ):\n            return self.constructFunction(\n                original.__name__,\n                original.DLL,\n                resultType = original.restype,\n                argTypes= original.argtypes,\n                doc = original.__doc__,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                alphaLevel = alphaLevel + 1;\n                if (alphaLevel > 255)\n                    alphaLevel = 0;\n                inRamp = false;\n                }\n                else\n                {\n                    alphaLevel = alphaLevel - 1;\n                    if (alphaLevel < 0)\n                        alpha", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "        f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in',\\\n                     'x-direction\\n'])\n        f.writelines(['G) ', str(NYPTS), '\t\t# Number of pixels in',\\\n                     '", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        return \"/course/{0}/{1}\".format(self._course_key, self.display_name)\n    @property\n    def _course_details(self):\n        \"\"\"\n        Return the course details dict.\n        \"\"\"\n        return self._course_dict\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n                    ", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "    # Download both cert files from the api host\n    types = ['key', 'cert']\n    for cert_type in types:\n        try:\n            # If we can't open the file it's not there, so we should download it\n            cert_file = open('%s/", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "\t\tif(splitNumber.length == 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[0]);\n\t\t} else {\n\t\t\tchance = Float.parseFloat(splitNumber[0]) * Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int)", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "// \n// tbPrefs\n// \nthis.tbPrefs.Location = new System.Drawing.Point(289, 40);\nthis.tbPrefs.Name = \"tbPrefs\";\nthis.tbPrefs.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "                        parent.mirthClient.sendError(channelId, e);\n                        return false;\n                    }\n                    return true;\n                }\n            } else {\n                MessageWriter messageWriter = new MessageWriter() {\n                    @Override\n                    public boolean write(Message message) throws MessageWriter", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "    def getRoomBookingList(self):\n        \"\"\" Session Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.reservationsList\n    getRoomBookingList.name = \"bookedRooms\"\n    def getStartDate(self):\n        \"\"\" Session", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "        if (currentSession == null) {\n            return;\n        }\n        if (currentSession.getState()!= SessionState.CREATED_TOKEN_LOADED) {\n            return;\n        }\n        try {\n            final SessionInfo sessionInfo = currentSession.getSession", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\t    \tif (value instanceof String) {\n\t\t       \t\tlayer = (String)value;\n\t\t    \t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.to_dict())\n        # test xml\n        self.assertEqual(\n            b'<build><stages/><stage/><job/><stage/><job/></build", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.strength /= sum;\n\t}\n\tprivate void reset(){\n\t\tcurrentEmotion = null;\n\t}\n}\n\nA:\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            message = form.cleaned_data['message']\n            msg = UserMessage.objects.create(\n                to_user = user,\n                from_user = request.user,\n                ", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    if NorthernHemisphere == 1:\n        phi1 = phi1 + 180;\n    else:\n        phi1 = phi1 - 180;\n    if phi1 < 0:\n        phi1 = phi1 + 360;\n    else:\n        phi1 =", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#else\n\t\tpublic void ApplyTo(FormForm)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "    def validate(self, data):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductAddSeriesView, self).validate(data)\n        self.validate_deactivation(data)\nclass ProductAddView(LaunchpadFormView):\n    \"\"\"A form", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "                if flag == constants.variant_tag_type:\n                    new_positional_tags_list.append((flag, regex))\n                elif flag == constants.length_tag_type:\n                    new_positional_tags_list.append((flag, regex))\n                else", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\nA:\n\nI think you are looking for BigInteger.\n\nA:\n\nYou can use BigInteger.\n\nA:\n\nYou can use BigInteger.\n\nA", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "    fields_desc = [\n        BitEnumField('obd_standard', 0, 1, obdStandards)\n    ]\nNext line of code:\n    fields_desc = [\n        BitField('obd_standard_id', 0, 1, 0x00),\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new Not", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\t\tself.listen()\n\t\tself.start()\n\t\tself.connect()\n\t\tself.start_listening()\n\t\tself.start_listening_for_signals()\n\t\tself.start_listening_for_events()\n\t\tself.start_listening_for", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef _pubsub_", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "        if exc is None:\n            exc = HTTPException(404)\n        if self._implicit_app_ctx_stack:\n            app_ctx = self._implicit_app_ctx_stack.pop()\n            if app_ctx is not None:\n                app_ctx.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "        axis_proj = np.array([np.dot(axis, angles) for axis in ray_trafo.geometry.det_init_axes])\n        axis_proj = axis_proj / np.linalg.norm(axis_proj, axis=0", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResource", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "\t\t\treturn string.Format (\"{0} {1}\", font_size_names [type], unit.ToString (fmt));\n\t\t}\n\t}\n}\n\nA:\n\nI think you are looking for the following:\npublic class FontUnit\n{\n    public FontUnit", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "            regx = re.sub('//2', self.option, regx).replace('&', '&amp;')\n            regx = re.sub('//3', self.option, regx).replace('&', '&amp;')\n            regx = re.sub('", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\tvar obj = (JObject)rootVal.Properties[0].Value;\n\t\tAssert.That(obj.Properties[1].Key, Is.EqualTo(\"The outermost value\"));\n\t\tAssert.That(obj.Properties[1].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t}\n\t\t\t// check for correct blocksize\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\tif ((block1.Length > GetOutputBlockSize())\n\t\t\t\t\t\t|| (block", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "    iso1 = ds.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  lut_identifier=\"test-LE-2D-ana-18\",\n                  channel_width=30,\n                  flow_rate=0.16,\n                  v", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "                for (int w = 0; w < width; w++) {\n                    edges.add(new T2(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<T2> getVertices() {\n            Array", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "        \n        final LocalTripleStore expected = new LocalTripleStore(args[0]);\n        final LocalTripleStore actual = new LocalTripleStore(args[1]);\n        \n        final TempTripleStore tmp = modelsEqual(expected, actual);\n        \n        if (", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\t}\n}\n\n#region Shader\npublic class Shader : IShader\n{\n\tpublic Shader(string name)\n\t{\n\t\tthis.name = name;\n\t}\n\tpublic string Name { get; private set; }\n\tpublic override string ToString()", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "\t\t\treturn performDownloadAndInstall();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "        return new CmsLink(m_anchor, m_query, m_structureId, m_target, m_type, m_internal);\n    }\n    /**\n     * Converts this to a string.\n     *\n     * @return a string representation of this bean", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "            _selectedFolderChanged += value;\n        }\n        #endregion\n    }\n}\n\nA:\n\nI think you need to use the following code:\npublic void SelectFolder(FolderTreeNode node)\n{\n    if (node == _selectedTreeNode)\n    {", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "                adminUser = getEucalyptusAdmin();\n              } catch (Exception e) {\n                LOG.warn(\"Failed to lookup account for owner ID \" + walrusObject.getOwnerId() + \" in bucket \" + walrusObject.getBucketName());\n              }\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.spinbuttonCpuPercent = new global", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "        final String nameWithSpecialChars = name.replace(\"$\", \"\").replace(\"%\", \"\").replace(\"#\", \"\").replace(\"*\", \"\").replace(\"&\", \"\").replace(\"^\", \"\").replace(\"_\", \"\").replace(\"+\", \"\").replace(\"=\", \"", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineTypeInitializer(MethodAttributes attribs, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineTypeInitializer(attribs, parameterTypes, null, null);\n\t\t}\n\t\tpublic", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sT", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "                throw new JmeException(\"Quad \" + i + \" has no vertex.\");\n            }\n        }\n    }\n    /**\n     * Stores in the <code>normals</code> array the normal values of quad\n     * <code>i</code>. If <code", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "    return new Builder(prototype);\n    }\n    public static void WriteTo(pb::ICodedOutputStream output) {\n      int size = SerializedSize;\n      string[] field_names = _sendInvitationRequestFieldNames;\n      if (hasChannelId) {\n        output", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t}\n\t\t\treturn new Del", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        if (showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n        }\n        if (showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATEMOD", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send emails to all users\n            foreach (string AUserId in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "        Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n  }\n}\n\nA:\n\nI think you are looking for a way to draw a line from the mouse position to the center of", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "        }\n        private void ValidateData(PcConferenceRow ARow)\n        {\n            PcDiscountTable DiscountTable = FMainDS.PcDiscount;\n            TVerificationResultCollection VerificationResultCollection = FPetraUtilsObject.VerificationResultCollection;", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t}\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "        return not self._reqs\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n\nA:\n\nI think you are looking for something like this:\nusing System;\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\t\t\tget { return Enabled && CopyRange && CopyRangeEnabled; }\n\t\t}\n\t\tpublic string _customRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\n}\n\nA:\n\nI think you are looking for this:\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.Generic;\nusing System.Collections.Generic;\nusing System.Collections.Generic;\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "            if (bugAnnotation.getType() == BugAnnotation.TYPE_ERROR) {\n                if (bugAnnotation.getMessage() == \"\") {\n                    System.err.println(\"Empty error message: \" + bugAnnotation.getSourceLine());\n                }\n            }\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "                }\n                if (minions.Any())\n                {\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                    {\n                        var qMinions = MinionManager.GetMinions(Me.Position, Q.Range);\n                        var q", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "        self.assertEquals(field_model_def['rules']['marc'][1]['function'],\n                          field_def['rules']['marc'][1]['function'])\n        self.assertEquals(field_model_def['rules'][", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "        try:\n            self._ftp.retrbinary(\"RETR {}\".format(filename), self._buffer_file)\n        except Exception as e:\n            logger.info(\"problem fetching {0}: {1}\".format(filename, e))\n            return {}\n        ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        return c.__imul__(other)\n    \n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "                    new[] {new object[] {\"E1\", 10L}});\n                SendEventLong(env, \"E2\", 20L);\n                var result = env.CompileExecuteFAF(\"select * from MyInfraW where f1=10 and f2='E2'\",", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "            value = createHTMLView(c, text);\n            if (oldValue!= null) {\n                oldValue.setClientProperty(BasicHTML.propertyKey, value);\n            }\n            c.setClientProperty(htmlDisable, Boolean.FALSE);\n        }\n    }", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    def replace_arch_section(self, cr, uid, res_id, xpath, arch_section, context=None):\n        \"\"\" Replace a view section with a new one.\n        :param str model:\n        :param int res_id:\n        :param str x", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "\t\t\t\tmapping.SqlLoader = new SqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(System.Type namedQueryReference)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "    s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items[", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "    }\n    private void popInvocations(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            popInvocation();\n        }\n    }\n    private void popInvocationsAndGraphs(int count) {", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "using System;\nnamespace Server.Factions\n{\n\tpublic class FactionState\n\t{\n\t\tprivate Faction m_Faction;\n\t\tprivate Mobile m_Commander;\n\t\tprivate int m_Tithe;\n\t\tprivate int m_Silver;\n\t\tprivate PlayerStateCollection m_", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "                if (phi) {\n                    ValuePhiNode other = getCachedPhi(key, states.get(0).getStamp());\n                    if (other == null) {\n                        other = ValuePhiNode.create(states.get(0).getStamp(), merge);", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "            if self.args['prtester']:\n                pytest = self.pr_metadata.get('pytest', None)\n                sprout_appliances = self.pr_metadata.get('sprouts', 1)\n                if pytest:\n                    pytest = pytest", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\t\t\t\tif(from.GetType() == Map.TerMur)\n\t\t\t\t{\n\t\t\t\t\tif(from.GetType() == Map.TerMur)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(from.GetType() == Map.TerMur)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(from.GetType() == Map", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "        if (event == MSG_SEND_SESSION_MODIFY_REQUEST) {\n            onSendSessionModifyRequest(requestProfile);\n        } else if (event == MSG_SEND_SESSION_MODIFY_RESPONSE) {\n            onSendSession", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "        if domain not in self._domains:\n            raise BackendError('Backend does not serve domain %s.' % domain)\n        user = '%s@%s' % (username, domain)\n        log.debug('Remove user: %s', user)\n        data =", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "    'Bibxxx',\n    'BibrecBibxxx',\n    'BibrecBibxxxMixin',\n    'BibrecBibxxxMixin',\n    'BibxxxMixin',\n    'BibrecBibxxxMixin',\n    '", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to obtain transformation directories\", res['Message'] )\n      return res\n    transDirectories = res['Value'].splitlines()\n    directories = self._addDirs( transID, transDirectories", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the string representation of the file to *fpath", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "        yield self.run_fake_single_build(self.setupGerritStatusPush(),\n                                         buildResult,\n                                         expWarning=True)\n        defer.returnValue(SUCCESS)\n    @defer.inlineCallbacks\n    def check_single_build", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\t\t\tString[] parts = uri.toString().split(\"/\");\n\t\t\tif(parts.length!= 2)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tString[] parts2 = parts[1].split(\"?\");\n\t\t\tif(parts2.", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        Map<String, AnnotationMirror> r2 = collector.visit(type, templateMapping);\n        return r1.putAll(r2);\n    }\n    /**\n     * A helper class that tries to resolve the immutability type variable,\n     * as the", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "    self.category = atom.Category()\n  def testTitleToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text ='sub & title'\n    self.assert_(self.category.type == 'text')\n    self.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "            if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n                mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "    def draw(self, context):\n        layout = self.layout\n        base_mat = context.material\n        mat = active_node_mat(base_mat)\n        split = layout.split()\n        col = split.column()\n        if simple_material(base_mat", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "Add(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\n//----------------\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\nNext line of code:\nAdd(\"Party Quest\", 70025); // Party Quest Scroll [", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "            m_jPopupMenu.add(getOpenDocumentMenuItem(oActionListener));\n        }\n        private JMenuItem getOpenDocumentMenuItem(ActionListener _oActionListener){\n            JRadioButtonMenuItem oJRadioButtonMenuItem = new JRadioButtonMenuItem();\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\"\"\"\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement's cross-publication.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.announcement.slug", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\t\t\tint height = SizeHeightToFit (min);\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic int SizeHeightToFit (int height)\n\t\t{\n\t\t\tint width = SizeWidthToFit (height);", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "    ''', (i,))\n    data = cursor.fetchall()\n    for row in data:\n        print \"Row is: sdate %s, stime %s, edate %s, etime %s, duration %s, src_callsign %s, altitude", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "lexer = PhpLexer(\n    # Use the PhpLexer with the default configuration\n    #lexer_class=PhpLexer,\n    # Use the PhpLexer with the following configuration\n    #lexer_class=PhpLexer,\n    # Use", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "\t\t\tMsg(\"I don't know what you're talking about. I'm just a shepherd. I don't do anything else. I don't even know what you're talking about. I don't know what you're talking about. I don't know what you're talking about. I don't know what you're", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "    # TODO: this is a hack to get the last_snapshot field to be set\n    # TODO: this is a hack to get the last_snapshot field to be set\n    # TODO: this is a hack to get the last_snapshot field to be set\n    ", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "    def _get_host_data(self, host_uuid, host_data):\n        \"\"\"\n        Add host data to the task data.\n        \"\"\"\n        if host_uuid in self.host_data:\n            self.host_data[host_uuid].append", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        SharedPreferences sharedPreferences = getSharedPreferences(\"com.germainz.crappalinks_preferences\",\n                Context.MODE_WOR", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = null;\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j, null))\n\t\t\t\t{\n\t\t\t\t\tresult = null;\n\t\t\t\t}", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, cmd):\n        \"\"\"", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "        return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult AddEventDe", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "        '--log-dir', log_name,\n        '--log-level', 'info',\n        '--log-file', log_name,\n        '--log-file-level', 'info',\n        '--log-file-format', 'json',\n        '--", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "                elif res['error_code'] == \"404\":\n                    self.error(_(\"File not found\"))\n                elif res['error_code'] == \"401\":\n                    self.error(_(\"Invalid credentials\"))\n                elif res['error_code'] == \"403\":\n                    ", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "                        return string.Format(\"({0},{1},{2})\", obj.X, obj.Y, obj.Radius);\n                    }\n                    if (obj is Rectangle)\n                    {\n                        return string.Format(\"({0},{1},{2},{3})\",", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "                        self.logger.error(\"dhcpd -t failed\")\n                        return False\n                rc = utils.subprocess_call(self.logger, \"dhcpd -t -q -s %s\" % restart_dhcp, shell=True)\n                if rc!", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\t\t\tif (path == null)\n\t\t\t\treturn null;\n\t\t\t// If the path is empty, we are at the refinery.\n\t\t\tif (path.Count == 0)\n\t\t\t\treturn self.Location;\n\t\t\t// If the path is not empty, we have a harvestable cell to claim.\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "            if (context.Suffix == PpmContext.ZERO)\n            {\n                goto NoLoop;\n            }\n            if (context.Suffix == PpmContext.ZERO)\n            {\n                goto NoLoop;\n            }\n            if (context", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "        return new EventBuilder();\n    }\n    @Override\n    public void sendEvent(Event e) {\n        if (logAllMessages) {\n            log.debug(\"event: {}; {}\", e.getSeverity(), e.getMessage());\n        }\n        e", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "\t\t\tstring session = tFull[0];\n\t\t\tstring test = tFull[1];\n\t\t\tstring startIn = tFull[2];\n\t\t\tstring weight = tFull[3];\n\t\t\tstring description = tFull[4];\n\t\t\tif(!sessionValuesArray.Contains(session))", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Unsigned Long VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00ij', self.read(o))\n    def test_smaller_than_file_at_end_with_overflow(self", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "        self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1, 0, 1], [1, 0])\n        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1, 0, 1], [1, 0])\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "    plt.plot(range(1, len(cr['combined'][app][VC]['durations']) + 1),\n             cr['combined'][app][VC]['durations'],\n             'o-',\n             label='individual')\n    plt.", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "  failures += \"Inference failed with k=3\\n\"\n  failures += \"Inference failed with k=3\\n\"\n  failures += \"Inference failed with k=3\\n\"\n  failures += \"Inference failed with k=3\\n\"\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlBackground());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlBackground());\n\t\t\t\t\tg.fillRect(x, y, control", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "            if (relativePath == null) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(SolutionTask.Project.Directory, \n                relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeHeaderValue(ObjectMirror mirror, int offset, Value value", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "        i20 = i18 - i16;\n        i21 = i18 - i19;\n        i22 = i18 - i20;\n        i23 = i18 - i21;\n        i24 = i18 - i22;\n        i25 = i18 - i23", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "    return string.format(*args, **kwargs)\ndef str_format_list(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "                },\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianRMis\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 500,\n                    Range", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "        self.assertRaises(OSError, subprocess.Popen,\n            ['/sbin/modinfo', '-d','somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            st", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t@When\n\tpublic void mockSecurityContext() {\n\t\twhen(securityContext.getCurrentTenantId()).thenReturn(\"test.tenant\");\n\t}\nNext line of code:\n\t@When\n\tpublic void mockSecurityContext() {\n\t\twhen(securityContext.get", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "#if!NET_2_0\n\t[DataCategory (\"Data\")]\n#endif\n\tpublic abstract DataTable Table {\n\t\tget { return _table; }\n\t\tset { _table = value; }\n\t}\n\tinternal abstract DataTable Table {\n\t\tget { return _", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new ArgumentNullException(\"propertiesName\");\n\t\t\t\n\t\t\t// create the property service\n\t\t\tPropertyService.DefaultMessageBoxTitle = propertiesName;\n\t\t\tPropertyService.DefaultMessageBoxIcon = \"icons/icon-info.ico\";\n\t\t\tPropertyService", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "                String[] wxColumns = new String[] {\n                        Awos1.WX_SENSOR_IDENT,\n                        Awos1.WX_SENSOR_TYPE,\n                        Awos1.STATION_FREQUENCY,\n                        Awos1.SECOND", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "        self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_misc_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_project_groupbox", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                uiCRCITTSum = (uiCRCITTSum << 8) ^ crcbitbybit(uiByteValue);\n            }\n            return (uiCRCITTSum);\n        }\n        /// <summary>\n        /// CalcCRC16 is an algorithm found", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(\"from Country\");\n\t\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void IncrementQueryExecutionCount_WhenQueryIs", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "            return null;\n        }\n        return controller.getHyperlinkDetectors();\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer, String contentType) {\n        return new CeylonInformationPresenter(editor, contentType);\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "\t\treturn shootingSpeed;\n\t}\n\tpublic void setShootingSpeed(int shootingSpeed) {\n\t\tshootingSpeed = shootingSpeed;\n\t}\n\tpublic int getShootingRange() {\n\t\treturn shootingRange;\n\t}\n\tpublic void setShootingRange(int shooting", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Set button\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "        self.l.addWidget(self.drawingModeWidget)\n        self.l.setSpacing(4)\n        self.l.setContentsMargins(0, 0, 0, 0)\n        self.l.setContentsMargins(0, 0, 0, 0", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][k]+\"\\t\"+totalWithAmount[i][j][k]+", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic TaskTask {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotIm", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\treturn v.ToVector2 () - viewport.Center;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Point p)\n\t\t{\n\t\t\treturn v.ToVector2 () - p.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "        final int userId = 1;\n        final int mode = ALL;\n        final ACE_ACCESS_TYPE access_type = ACE_ACCESS_TYPE.ALLOWED;\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assert", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// sends a message to a single client\n\t\t/// </summary>\n\t\t/// <param name=\"clientnumber\">index number of the client", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "import xdrlib\nclass XDREnum(object):\n    __slots__ = ['name', 'value']\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n    def __int__(self):\n        return", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "  PrintLongLine('}')\n  print '''\n  /**\n   * @brief A helper function to create a new %s with %d\n   * create-time arguments and %d execution time arguments.\"\"\" %\n   (parent_class, bind_count, exec_count)", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "            if(type == RequestType.Step) {\n                mActivity = new ActivityBucket(list);\n                mActivity.setActivityType(ActivityType.STEP);\n                mActivity.setActivityName(\"Steps\");\n                mActivity.setActivityDescription(\"Steps\");\n                m", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "                        new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n            }\n        }\n        /**\n         * The AST after the rewrite\n         * \n         * <pre>\n         * PREFIX bd: <http://www.big", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    \"\"\"\n    response = HttpResponse(mimetype", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public key used to sign the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get { return this.Resolved", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "        if self.object.is_superuser:\n            raise Problem(_(\"You can not deactivate a superuser.\"))\n        if self.object == self.request.user:\n            raise Problem(_(\"You can not deactivate yourself.\"))\n        self.object.is_active =", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "\t\t\treturn new Apfloat[]{sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[]{sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of numbers\n\t *", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var w = new DenseVector(input.Count);\n            var t = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "        result['mapping'] = csv_mapping.to_dict()\n        result['mapping_json'] = mapping_json\n        result['mapping_type'] = 'csv'\n        result['mapping_type_json'] = 'csv'\n        result['mapping", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "            if reference_set_map[v]!= -1:\n                raise ValueError(\"Duplicate value in reference sets\")\n            reference_set_map[v] = j\n            sample_count[v] += 1\n            v = parent[v]\n        for edge in", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\t\t\treturn \"SmbException: \" + GetMessageByCode(_status) + \" \" + GetRootCause().ToString();\n\t\t}\n\t\telse\n\t\t\treturn \"SmbException: \" + GetMessageByCode(_status);\n\t\t}\n\t}\n}\n\nA:\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam &&!slot.Value.LockBot &&!slot.Value.LockBot &&!slot.Value.LockBot &&!slot.Value.LockBot &&!slot.Value.LockBot &&!slot.Value.LockBot &&!slot.Value.", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "            if (cluster.Cluster.UnderCollapsedCluster())\n                return;\n            if (cluster.Cluster.UnderCollapsedCluster())\n                return;\n            if (cluster.Cluster.UnderCollapsedCluster())\n                return;\n            if (cl", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "    def __repr__(self):\n        return '<{}| length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            FRAME_TYPE_TO_FRAME[self.frame_type].__name__,\n            len(", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "        if (initializers.size() > 0) {\n            ExpressionTree init = initializers.get(0);\n            if (canBeLeaked(init)) {\n                checker.report(Result.failure(\"unique.leaked\"), init);\n            }\n        }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setMaxSlopeDot(double maxSlopeDot)\n{\n\tm_maxSlope", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\t\t\t\t_returnType = (Type)Enum.Parse(typeof(Type), typeAttribute.Value, true);\n\t\t\t}\n\t\t\t// init class list\n\t\t\t_class = string.Empty;\n\t\t\tif (_returnNode!= null)\n\t\t\t{\n\t\t\t\tXmlAttribute classAttribute =", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tif (nbttagcompound!= null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1.hasKey(\"color\"))\n\t\t\t\t{\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "@Test\npublic void searchNarrowAddNothingForNonClassTypes() throws Exception {\n\t\t\tdoReturn(assignment).when(instrumentationApplier).getSensorAssignment();\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowBy", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t}\n}\n\nA:\n\nYou can use the following code to get the width and height of the trackbar.\nint width = myTrackBar.Width;\nint height = myTrackBar.Height;\n\nA:\n\nYou can use the following code to get the width and", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\t\n\t\tif (this.neighbors == null) {\n\t\t\tif (other.neighbors!= null)\n\t\t\t\treturn false;\n\t\t} else if (!this.neigh", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "\t\tvoid DbgProcess_IsRunningChanged(object? sender, DbgProcessIsRunningChangedEventArgs e) {\n\t\t\tif (process.IsRunning)\n\t\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid D", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "    rsync -r -p -e '%s' -e '%s' -e '%s' -e '%s' -e '%s' -e '%s' -e '%s' -e '%s' -e '%s' -e '", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\tif ( (this.id == null) &&\n\t\t\t\t(proxyThat.id!= null) &&\n\t\t\t\t(this.hashCode!= null) ) {\n\t\t\tSAVED_HASHES.put( proxyThat.id, this.hashCode );\n\t\t\treturn true;\n\t\t}", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a texture identifier.\n\t *\n\t * @param   name    Name of the parameter.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "        if cdata is None:\n            return\n        # Check if the indices are equivalent to arange(0, input.shape[0], 1)\n        # using either an explicit list/vector or the ARange op.\n        if (isinstance(cdata, (list, tuple))", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\tif n == 0:\n\t  status = 'w'\n\telse:\n\t  status = 'a'\n\twith open(name, status) as f_ID:\n\t  f_ID.write(str(body_types[i]) + '\\n')\n\t", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "            return wrap\n        else:\n            return fn\n    def before_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object before it is composed into a\n        core :class:`.Select` object.\n        This event is intended to allow changes to the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.models import User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.mess", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "        for key, old_value, new_value in data_model_changes:\n            if key in self.current_filter:\n                self.change_filter(self.data, self.current_filter, self.get_axes(self.data)[key], new_value)", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "            for location in self.show_tag_list:\n                self.runtime.add_block_as_child_node(location, xml_object)\n        return xml_object\n    def get_children(self):\n        \"\"\"\n        Returns a list of ConditionalDescriptor instances", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "\t}\n}\n\nA:\n\nI think you are looking for the following code:\nusing System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace Mapeditor\n{\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\t}\n\tpublic sealed class LdtokenType : Instruction\n\t{\n\t\t[XmlAttribute(\"type\")]\n\t\tpublic string type;\n\t\tinternal override void Generate(CodeGenContext context, CodeEmitter ilgen)\n\t\t{\n\t\t\tilgen.Emit(OpC", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "        if (termData == null || termData.isEmpty()) {\n            return;\n        }\n        for (Map.Entry<String, Collection<String>> datum : termData.asMap().entrySet()) {\n            if (!datum.getValue().isEmpty()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.5\"]))\n        self.assertEqual", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "            int nbNeighbors = component.getNeighbors().size();\n            int nbNeighborsInC = c.getComponents().size();\n            int nbNeighborsInC = nbNeighborsInC - 1;\n            int nbNeighborsInC = nb", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic void onWandered(EntityPlayer player, ItemStack wand) {\n\t\tsuper.onWandered(player, wand);\n\t\tif(isPassiveFlower()) {\n\t\t\tNBTTagCompound cmp = wand", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\t}\n}\n\nA:\n\nI think you are looking for something like this:\npublic void UpdateTreeView(string name)\n{\n    if (treeView.Nodes.Count > 0)\n    {\n        foreach (var node in treeView.Nodes)\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "            if not are_equal:\n                logger.info(\"ERROR: Document %s: Expected flag %s and got %s\" % (str(docid), str(flagname), str(flags[flagname][version])))\n            else:\n                logger.info(\"Document", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<df", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return exDateList;\n  }\n  /**\n   * Generates the dates at which it exist some exceptions in the periodicity of the specified event.\n", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\tpublic int getId()\n\t\t\t{\n\t\t\t\treturn id;\n\t\t\t}\n\t\t\tpublic String getPath()\n\t\t\t{\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tpublic Integer getWidth()\n\t\t\t{\n\t\t\t\treturn width", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "            String jsonDataString = (jsonData == null)? \"null\": jsonData;\n            String jsonDataString = (jsonDataString == null)? \"null\": jsonData;\n            String jsonDataString = (jsonDataString == null)? \"null\": jsonData;\n            String jsonDataString", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "    lam = LinkAnnoManagement()\n    project_uuid = 'A5DDBEA2-B3C8-43F9-8151-33343CBDC857'\n    lam.make_von_den_driesch_equiv(project_uuid)", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "        int choice = rnd.nextInt(size);\n        return choice;\n    }\n}\n\nA:\n\nI think you are looking for the Random class.\n\nA:\n\nI think you are looking for the Random class.\n\nA:\n\nYou can use the", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\t\t\t\t++length;\n\t\t\t}\n\t\t\t// Return the length to the caller.\n\t\t\treturn length;\n\t\t}\n\t\t// Return the length to the caller.\n\t\treturn byteLength;\n\t}\n\t// Get the bytes that result from encoding a character buffer.\n\tpublic override int Get", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    public override string ToString()\n    {\n        StringBuilder buffer = new StringBuilder();\n        buffer.Append(\"[EXTENDEDFORMAT]\\n\");\n        if (XFType == XF_STYLE)\n        {\n            buffer.Append(\" STYLE", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\tstream = new InputStream(location);\n\t\t\tclose = false;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t// read the properties file\n\t\tString[] propertyNames = null;\n\t\tif (stream", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "    src1 = env.A[b]\n    off10 = off1//off2\n    src2 = env.cst(off10.int(-1),10)\n    obj.operands = [src1, src2]\n    obj.type = type_data_processing", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (false, false, 0);\n\t\t\tcsd.", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "            return this == CREATIVE || this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL || this == SPECTATOR;", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "        if (photonSettings.RpcList!= null)\n        {\n            additionalRpcs = photonSettings.RpcList;\n        }\n        photonSettings.RpcList = additionalRpcs;\n    }\n    #endregion\n    #region Converter\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb,\n                float(len(results)) / len(releases))\n        return releases\n    def run", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "            psit_G = np.einsum('ij,jk,kl->il', op_cc, psit_G, op_cc)\n            if time_reversal:\n                psit_G = psit_G.conj()\n            return psit_", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "@Override\npublic void onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getArguments()!= null) {\n            msgid = getArg", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\t\t\t\tforeach(ILBlock child in block.GetSelfAndChildrenRecursive<ILBlock>()) {\n\t\t\t\t\tif (child.IsUnconditionalControlFlow()) {\n\t\t\t\t\t\t// If the child is an unconditional control flow, then it is a block that is not part of the current node\n\t\t\t\t\t\t//", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, ut", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.brep_shape_ids = [ ]\n        \"\"\"List of shape indexes - in BREP geometry \"\"\"\n        self.brep_shape_ids = [ ]\n        \"\"\"", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\tif (!IsRagdoll) {\n\t    IsRagdoll = ragdoll;\n\t    if (IsRagdoll) {\n\t        if (DebugMovement)\n\t\t    DebugMovement = false;\n\t        else\n\t\t    DebugMovement =", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "            this.objectVariables = objectVariables;\n        }\n        @Override\n        public Iterator<PatternMatch> iterator()\n        {\n            return new FilteredPatternIterator( this, source );\n        }\n        private class FilteredPatternIterator implements Iterator<PatternMatch>\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        out[outOff + 3] = (byte)(num >> 24 & 0xff);\n        out[outOff + 2] = (byte)(num >> 16 & 0xff);\n        out[outOff + 1] = (byte)(num >> 8 & 0xff);\n        out[out", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            this.revalidate();\n            this.repaint();\n          }\n        }\n        public void mouseReleased(MouseEvent e) {\n          if (SwingUtilities.isLeftMouseButton(e)) {\n            btn.setSelected(false);\n          }\n        ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "        elif key == 'TAUX':\n            slice_json['rate'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] =", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterHeight(); z+= toolDiameterInPx/2)\n    ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "    elif sys.argv[1] == '--getLC':\n        print getLC(sys.argv[2])\nNext line of code:\n    elif sys.argv[1] == '--getIDList':\n        print getIDList()\nNext line of", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "                else\n                {\n                    m_ptr = IntPtr.Zero;\n                }\n            }\n        }\n        #endregion\n    }\n    internal sealed class GUID : IDisposable\n    {\n        private byte[] m_data;\n        internal GUID(byte", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "                    db.update(Db.Table3.TABLE_NAME, Db.Table3.GROUP_NAME + \" = \" + newId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, Db.Table4.GROUP_NAME +", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\t\t\tvar item = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\tif (item == null)\n\t\t\t\treturn;\n\t\t\tif (item.RemainingCost < numberToCancel)\n\t\t\t\treturn;\n\t\t\titem.RemainingCost -= numberToCancel;\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "# The URL to redirect to after a successful login.\nLOGOUT_URL = '/accounts/logout/'\n# The URL to redirect to after a successful logout.\nLOGIN_REDIRECT_URL = '/accounts/login/'\n# The URL to redirect to after a", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "        code = code.replace('%', '%%')\n        # replace all @ by %% to prevent errors by @ signs\n        code = code.replace('@', '%%')\n        # replace all @ by %% to prevent errors by @ signs\n        code = code.replace('@', '", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        infoText +=  str(numberOfHiddenFiles) \n        infoText += \" hidden \" \n        infoText += \"file\" if numberOfHiddenFiles==", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - chemical[ 0 ][ idx + reactorExtent + 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ]\n\t\t\t\t\t\t\t\t\t- chemical[ 1 ][", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n\nif __name__ == '__main__':\n    rospy.init_node('planning_", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampFormatFactory.get(pattern", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "        if self.authentication == 'enable':\n            state = 'true'\n        else:\n            state = 'false'\n        xml_str = CE_NC_MERGE_NTP_AUTH_ENABLE % state\n        ret_xml = set_nc_config(self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t\tget { throw new NotImplementedException", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        charBuff.put(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void startElement(String qName, Attributes atts) throws SAXException {\n    }", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "            self.store.update_item(component, editing_user)\n        # Verify that the component was edited\n        check_node(component.location, after_create, after_create, self.user_id, None, after_create, self.user_id)\n        # Verify", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "            if (sampleDirection == SampleDirection.Request)\n            {\n                return ResolveType(api, controllerName, actionName, parameterNames, SampleDirection.Response, out formatters);\n            }\n            return ResolveType(api, controllerName, actionName, parameterNames", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "    return aetypes.Range(dict[0], dict[1], dict[2], dict[3])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict[0], dict[1], dict[2], dict[3])\ndef mklogical", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            beanProperties.setPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            return beanProperties;\n        }\n        else\n        {\n            // If the bean already references global-properties, we have to 'upgrade' the bean", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "                if not value:\n                    return\n                if not record.validate(fields):\n                    invalid_fields = record.invalid_fields\n                    col = None\n                    for col in self.get_columns():\n                        if col.name in invalid_fields:\n                            break\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParamVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LP", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "            f.readlines()\n        except ValueError:\n            # File is empty\n            f.close()\n            f = None\n    if f:\n        f.close()\n    if f:\n        f = open(path, \"r\")\n        lines = f.readlines", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "        if element.text is not None:\n            for child in element:\n                if not self.verify_element(child):\n                    return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "        if ( directedAclKeys.getPrincipal().getPrincipalType()!= PrincipalType.USER ) {\n            throw new IllegalArgumentException( \"DirectedAclKeys must be of type PrincipalType.USER\" );\n        }\n        if ( directedAclKeys.getPrincipal", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "    return clone\ndef _clear_id_cache(node):\n    \"\"\"\n    Clear the ID cache for a node.\n    \"\"\"\n    if node.nodeType == Node.ELEMENT_NODE:\n        for attr in node.attributes.values():\n            a =", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).updateCooldown();\n        }\n        \n        //updates the player's health\n        myPlayer.updateHealth();\n        \n        //updates the player's weapon cooldown", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\t\t\twhile (true) {\n\t\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset))\n\t\t\t\t\tkeyLocator.appendComponent(new Name.Component\n\t\t\t\t\t  (new Blob(decoder.readBlobTlv(TlvTypeCodes", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "        action.setColor( color );\n        action.setJoinType( GameEngine.model().getGame().getJoinType() );\n        action.setJoinType( GameEngine.model().getGame().getJoinType() );\n        action.setJoinType( GameEngine.model().get", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "    if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot calculate reaction weight for reactions with multiple metabolites.\"\n        )\n    return [met.weight for met in reaction.metabolites.values()]\ndef _total_components_", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = \"No response from service\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (response.StatusCode!= MergeOrderResponse.Success)\n\t\t\t\t\t{", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "        migrations.CreateModel(\n            name='StateMap',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('state', models.ForeignKey(to", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "        return (\n            super(UnitManager, self).get_queryset().filter(\n                parent__path__startswith=pootle_path,\n                parent__user=user,\n            )\n        )\n    def get_for_path_and_user(self", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "    m_RecentItems.add(item);\n    if (m_IgnoreChanges) {\n      return;\n    }\n    notifyRecentItemListenersOfAdd(item);\n  }\n  \n  /**\n   * Removes the item from the internal list.\n   *", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "                if portnum == inputport:\n                    self.logger.debug(\"Got ARP reply: {}\".format(str(poxpkt.payload)))\n                    arp = poxpkt.payload\n                    dstip = str(IPv4Address(arp.protodst))", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "            if (src.Race == Race.Elf)\n                return true;\n            if (src.Race == Race.Dwarf)\n                return true;\n            if (src.Race == Race.Human)\n                return true;\n            if (src.Race == Race.Orc", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tbuff[5] = (byte)((address & 0xffff0000) >>  8);\n\t\t\tbuff[6] = (byte)((address & 0x00ff0000) >> 16);\n\t\t\tbuff[", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void DelGraph(Node p) {\n\t\tif (p == null) return;\n\t\tif (p.typ == Node.t) {\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t}\n}\n\nI am trying to create a program that will send an email to a specified email address when a crash occurs. However, I am having trouble with the code. Can someone please help me figure out what I am doing wrong?\n\nA:\n\nYou are missing a closing bracket in", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t@Override\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif(o1 == null)\n\t\t\t\treturn -", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "        }\n        public virtual void SplitBlock(int oldPtr, int i0, int i1)\n        {\n            int i, j, k;\n            for (i = oldPtr; i < i1; i++)\n            {\n                _tempRarNode = _tempR", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Axiom", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "        rate.create()\n        return rate\n    def delete(self, rate_id):\n        \"\"\" Delete a rate in the UI\n        Args:\n            rate_id (int): ID of the rate to delete\n        \"\"\"\n        rate = self.get(rate_id)\n        ", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "            tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n            return;\n        case ZMQ.ZMQ_SUB_FILTER:\n            byte[] val;\n            if (optval instanceof String) {\n                val = ((String", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "\tdef retune(self, value):\n\t\tif value:\n\t\t\tself.retune_nim(value)\n\t\telse:\n\t\t\tself.retune_frontend()\n\tdef retune_nim(self, value):\n\t\tif value:\n\t\t\tself.retune", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "    def test_interface(self):\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "            }\n        }\n    }\n}\n\nA:\n\nI think you are looking for the following code:\npublic class PdfReader : IPdfViewerPreferences\n{\n    static byte[] endstream = PdfEncodings.ConvertToBytes(\"endstream\", null", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "                except:\n                    output += \"no such element\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def compute_massey_product(self):\n        self.get_E_2", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member selling an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\t@Override\n\tpublic Object remove(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old!= UNKNOWN ) {\n\t\t\t\tqueueOperation( new Remove( key, value, old )", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "        if self.attendance_state == 'checked_in':\n            action_message['next_action'] = 'My Attendances'\n        elif self.attendance_state == 'checked_out':\n            action_message['next_action'] = 'Kiosk Mode", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "        if self.terminator.terminal_is_zoomed():\n            if self.terminator.terminal_is_maximised():\n                if self.terminator.terminal_is_fullscreen():\n                    if self.terminator.terminal_is_notebook", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                c = (ProcessMemoryChunk)c.ReadToStructure(0, typeof(ProcessMemoryChunk));\n                return new Point(c.x, c.y);\n            }\n        }\n        /// <summary>\n        /// The lower right corner of this item.\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "\t\t\treturn base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t}\n\t\t}\n\t\tpublic bool IsEnumValueType {\n\t\t\tget {\n\t\t\tNext line of code:\n\t\t\treturn base_type!= null && base_type.", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "    public struct StructTypeInfo {\n        public string Name { get; set; }\n        public Type Type { get; set; }\n        public UnmanagedType? marshalAttribute { get; set; }\n        public int ArraySize { get; set; }\n    }\n\nA:", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "        self.protocol = protocol\n        self.context = OpenSSL.SSL.Context(self.protocol)\n        self.context.set_verify(\n            self.protocol,\n            self.protocol.verify_mode,\n            self.protocol.verify", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "                throw new Exception(\"Could not find model: \" + args.Key, e);\n            }\n        }\n        #endregion\n        #region public methods\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"name\"></param>\n        ", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "            key2gmwidg[child].boardvbox.set_current_page(new_num)\n        headbook.set_tab_reorderable(page_reordered)\n    \n    # The game model\n    \n    def callback (widget, gpointer, page_num", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\tprivate global::Gtk.Label label2;\n\tprivate global::Gtk.TextView textviewComments;\n\tprivate global::Gtk.VBox vbox6;\n\tprivate global::Gtk.HBox hbox3;\n\tprivate global::Gtk.Label label8", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + persistenceUnitName + \", persistenceProviderClassName=\" + persistenceProviderClassName + \", transactionType=\" + transactionType + \", nonJtaDataSource=\" + nonJtaDataSource + \", jtaDataSource=\" + jtaData", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_2", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(97, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex =", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "    return (getEditorPart()!= null) && (getEditorPart().getReadOnly());\n  }\n  \n  public void setReadOnly(boolean readOnly)\n  {\n    if (getEditorPart()!= null)\n    {\n      getEditorPart().setReadOnly", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\nA:\n\nI have a solution for you.\npublic class HMACSHA512\n{\n    public static string GetHash(string input, string key)\n    {\n        byte[] keyBytes = Encoding.UTF8.GetBytes(key);\n        byte[] inputBytes = Enc", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "        if (sb!= null)\n        {\n            sb.append(string.substring(i));\n        }\n        return sb.toString();\n    }\n}\n\nA:\n\nI think you are looking for something like this:\npublic static void main(String", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "        return null;\n      String jdkVersion = java.GetValue(@\"Software\\JavaSoft\\Java Runtime Environment\\CurrentVersion\");\n      if (jdkVersion == null)\n        return null;\n      return jdkVersion;\n    }\n    private static String GetJdkVersion", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "# old - remove after recreating meshes through import\n# -------------------------------------------------\n# from.bl_types_conversion import BLset, BLObject, BLCacheFile, BLVector, BLImage, BLbpy_prop_collection, BLbpy_prop_array, BLCurveM", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            comment = l\n        # if we get here, no match\n        return None\n    def find_env(self, name):\n        # attempt to find env by 'Ansible:' header comment\n        comment = None\n        for l in self.lines:\n            if comment is not", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "            if(rankCounts == null)\n                continue;\n            double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 135);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "                    if self.choice.lower() == 'help':\n                        self.parser(self.choice, cap=self.cap)\n                        continue\n                    else:\n                        self.parser(self.choice)\n                except NameError:\n                    print(self.fatal+\"Check your option", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "                if (isProcessImports()) {\n                    processImportIncludeInternal(theImportOrInclude);\n                }\n            }\n        }\n        return false;\n    }\n    private boolean isProcessImports() {\n        return (theImportOrInclude.getSchema()", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "        }\n        /// <summary>\n        /// Gets and sets whether the Control is enabled or not\n        /// </summary>\n        public void Enable()\n        {\n            this.Enabled = true;\n        }\n        /// <summary>\n        /// Gets and sets whether the Control is enabled", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_validate_notificate(self, cr, u", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\t\t\tvalue10 = domainObject.getCareContext();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n}\n\nA:\n\nI think you are looking for the following:\npublic static void main(String[] args) {\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            return string.Format(\"Mixer Line: {0}\", mixerLine.szName);\n        }\n    }\n}\n\nA:\n\nI think you are looking for this:\npublic class MixerLine\n{\n    public MixerLine(IntPtr mixerHandle, int", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives? estP : estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true),\n\t\t\tthis.getScore(new double[] { 0, n },", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "            build_cmd = [\"cargo\", \"build\"]\n            if jobs is not None:\n                build_cmd += [\"-j\" + jobs]\n            if android:\n                build_cmd += [\"--target\", \"arm-linux-androideabi\"]\n            if verbose:\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "    assert lattice.cbuffer.get_object(bm1_index).out_address!= 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address!= 0\n    assert lattice.cbuffer.get_object(out_buffer0", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "                _asyncLoader.LoadAsync(() => Module.GetStashDiffFiles(gitStash.Name), LoadGitItemStatuses);\n                Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, ResourceManager.Strings.Index", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "                        b,\n                        callback,\n                        asyncState});\n        }\n        public System.IAsyncResult EndAddInt(System.IAsyncResult result) {\n            return result;\n        }\n        public System.IAsyncResult EndInvoke(System.IAsyncResult result) {", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "        if (o instanceof AuthScope) {\n            AuthScope that = (AuthScope) o;\n            return match(that);\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\t\t\t\t\tEClassifier eClass = (EClassifier)value;\n\t\t\t\t\tEType = eClass;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType eGenericType = (EGenericType)value;\n\t\t\t\t\tEGenericType = eGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto> snrs,\n\t\t\tBigDecimal mengen[", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "        self.miso_bits[mosi][1] = ss\n        self.miso_bits[miso][2] = es\n        # Check the command.\n        if ptype == 'DATA':\n            # Check the command.\n            if mosi == self.cmd_", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "    log.msg('===== Starting cryptostasis =====')\n    log.msg('cryptostasis', 'Starting cryptostasis')\n    log.msg('cryptostasis', 'Verbosity level: {}'.format(args.verbosity))\n    log.msg('cryptostasis',", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "                if (cd == null)\n                    cd = new ChannelData(channel, cls, null, null, null, null, null, null);\n                else\n                    cd.setClass(cls);\n                cd.setName(channel);\n                cd.setFingerprint(finger", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "          if (v_3 < v_2) {\n            limit_backward = v_3;\n            return false;\n          }\n          cursor = v_3;\n          break lab0;\n        } while (false);\n        // ], line 200\n        return true;", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\t\t\t\tif (i->_slot_id!= _slot_id) {\n\t\t\t\t\t/* The slot is no longer on the list, so we must invalidate it. */\n\t\t\t\t\ti->_slot_id = _slot_id;\n\t\t\t\t\ti->_slot_function = _slot_function;", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    def _get_subject_alt_name(self):\n        result = []\n        for alt_name in self.cert.get_subject_alt_name():\n            result.append([crypto_utils.pyopenssl_normalize_name(alt_name.get_comp", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\tif (t.pos > beg)\n\t\t\t sym.attrPos = new Position(beg, t.pos, col);\n\t\t} else {\n\t\t\tSemErr(\"bad attribute declaration\");\n\t\t}\n\t}\n\tvoid TokenTerm(out Graph g) {\n\t\tGraph g", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "    if X.begin >= 0x10000:\n        return [Interval(0, 0x10000), Interval(0x10000, X.end)]\n    else:\n        return [Interval(X.begin, 0x10000), Interval(0x10000, X.end)]", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"/tcp.ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.ssl", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "            # generate the main report\n            self._edi_generate_report_attachment(cr, uid, line, context=context)\n            # Get EDI doc based on struct. The result will also contain all metadata fields and attachments.\n            edi_doc = super(sale_order", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testReadOnlyNodeHasPermission() throws", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Get the antenna positions.\nmiriad.set_filter('uvfmeas', filter_uvfmeas)\nantlist = miriad.uvfmeas(vis=dsets[0], options=\"full,array\")\nantpos = antlist['antennas']", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "    dev = Device(deviceToken)\n    dev.check_inspection()\n    dev.notification_postDevicetoken(loginId, password)\n    dev.newUser(loginId, password)\n    dev.login()\n    dev.mainmenu()\n    dev.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        for (String device : devices){\n            // If we have a device that is not in the list of live devices, then we need to try to get it to come alive.\n            if (device.equals(null) ||!devices.contains(device)){\n                // If we", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "            if (m_Keys.Count == 0)\n                _ItemID = 0;\n            else\n                _ItemID = m_Keys.Count * 0x100 + m_Keys[0].KeyValue;\n        }\n    }\n}\n\nA:\n\nI think you", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      if (split.length!= 4) {\n        throw new IllegalArgumentException(\"Line \" + lineCount + \" in the mapping file is not formatted correctly. It should be: regex, type, overwritableTypes, priority\");\n      }\n      Entry entry = new Entry(Arrays.", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_w", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "            if os.path.exists(os.path.join(source_dir, n)):\n                return (n, sub_path)\n        # see if we find it using the path in env[var]\n        for n in self.path_function(source_dir, include", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.add_button.click()\n    def _get_playbook_input_parameters(self):\n        return self.playbook_input", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "    def __default(self, param):\n        return getattr(self.want, param)\n\nclass Monitor(object):\n    def __init__(self, module, name, description, parent, ip, port, interval, timeout, time_until_up, up_interval,", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        ", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "        throw new Exception(\"ActionFactory::getActionObject() - class (\" + className + \"/\" + classPath + \") not found\");\n    }\n        return result;\n    }\n    public IAction getActionObject(String className, String actionName) throws Exception {\n        return", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            final IProgressMonitorMonitorMonitor = new IProgressMonitorMonitor(shell);\n            final IProgressMonitorMonitorMonitor.setProgressMonitor(new IProgressMonitorJobsDialog(shell));\n            final IProgressMonitorMonitorMonitor.setProgressMonitor(new IProgressMonitorJobsDialog(shell));\n            ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "            if not os.path.exists(manifestSrc):\n                raise SCons.Errors.UserError(\"Manifest file %s does not exist\" % manifestSrc)\n            if not os.access(manifestSrc, os.R_OK):\n                raise SC", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "    assert f('-3..-2', last) == (d(2014,1,31, 19,47), d(2014,1,31, 19,47))\n    assert f('+5..+8', last) == (d(2014,1,31, 12,35", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "\t\t\n\t\tif (first)\n\t\t{\n\t\t\tfirst=false;\n\t\t\t\n\t\t\tdata.outputRowMeta = getInputRowMeta().clone();\n\t\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\t\t\n\t\t\tfor (int", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "        s, o = self._check_guest_suspend_log(**args)\n        if s:\n            raise exceptions.TestFail(\"Guest doesn't support suspend.\")\n    @error_context.context_aware\n    def verify_guest_up_disk(self, **", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "            //Place By Type\n            case \"r\":\n                if (fakespawnsA.Length > 0)\n                {\n                    if (fakespawnsA[0].Contains(\"r\"))\n                        PlaceNPC(fakespawnsA[0].Split(", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "        final int received = rc.get();\n        assertThat(received, is(15));\n        rc.get();\n        assertThat(rc, is(null));\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "        self.fm.env.copy.append(one_file)\n        self.fm.env.cut = True\n        self.fm.env.au_flags = au_flags\n        self.fm.env.au_descr = descr\n        self.fm.env.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\tstatic uint GetCompressedUInt32Bytes(uint value) {\n\t\tif (value <= 0x7F)\n\t\t\treturn (uint)value;\n\t\telse if (value <= 0x3FFF) {\n\t\t\treturn (uint)((value >> 8) | 0x80);", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        locale = Locale.objects.get(code='de')\n        repo = self._setup(locale, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringInt ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    /**\n     * Add player to group\n     */\n    public static final void add", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"volume\" in cmd.parameters:\n                userstate.volume = cmd.parameters[\"volume\"]\n            if \"volume_mute\" in cmd.parameters:\n                userstate.volume_mute =", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "        if j is not None:\n            cols = self.cols[j : j + 1]\n        for c in cols:\n            r.append(\"\".join([t[1] for t in c]))\n        return r\n    def __str__(self):\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "    public CreatureEntry(string name, CreatureEntry parent)\n    {\n        this.Name = name;\n        this.Parent = parent;\n        this.Flags = parent.Flags;\n        this.Gfx = parent.Gfx;\n        this.Sfx = parent.Sfx", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t} while (parent!= null);\n\treturn 0;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\tif (valuesdisplay!= null) column.setValuesDisplay(null);\n\tif (values!= null) column.setValues(null);", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)iter.next()", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActivation();\n                    else if ( m_Peerless", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "#if DEBUG\n\t\t\tbyte[] pbExpc = new byte[32] {\n\t\t\t\t0x51, 0x2B, 0x39, 0x1B, 0x6F, 0x11, 0x62, 0x97,\n\t\t\t\t0x53, 0x71", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "            new Version(0, new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n                    new ECB(0, 0), new ECB(0, 0), new ECB(0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\n# This is the main entry point for the Django application.\n# It is called when the application is started.\n# It is also called when the application is restarted.\n# It is called when the application is reloaded.\n# It is called when the application is restarted.\n# It", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Dispatches an exact amount of mana to items in a given player's inventory. Note that this method\n\t * does not automatically remove mana from the item", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false;\n        } else if ((!this.actionTraceList.equals(other.actionTraceList)))\n            return false;\n        if", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\t\t\t\t\t\"{1}) as the current queue (has {2}).\",\n\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\tLightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            dc.mRequest = p.readString();\n            dc.mResult = p.readInt();\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected void\n    processSolicited (Parcel p) {\n        int", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[]{testInt1, testInt2});\n\t\t\t\n\t\t\tif (rawResult!= null)\n\t\t\t{\n\t\t\t\tresult = rawResult.get", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                float x = x * xPixelsPerTile;\n                float y = y * yPixelsPerTile;\n                float z = 1.0f;\n                float x1 = x + 1", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(name + \" not found\");\n        }\n        else\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setBlockSelectionStart(final int start)\n\t\t\t{\n\t\t\t}\n\t\t\t@Override\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "                                    result.Add(minion);\n                                    break;\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            var wallPrediction = spell.GetBadaoStandarPrediction(spell.ServerPosition,\n                                                              ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "                        16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                    if (pop[i] is Drawable)\n                    {\n                        plcs.Push(pop[i]);\n                    }\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the ancestors of", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (graph.isDefCollider(x, y, null)) {\n            return true;\n        }\n        List<Node> adjx = graph.getAdjacentNodes(x);\n        List<Node> adjy = graph.getAdjacentNodes(y", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                        if (m_Item.From == mobiles[i])\n                            continue;\n                        if (m_Item.From.CanBeHarmful(mobiles[i], false))\n                            m_Item.DoHarmful(mobiles[i]);\n                        AOS.Damage(", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "        if (description == null) {\n            if (other.description!= null) {\n                return false;\n            }\n        } else if (!description.equals(other.description)) {\n            return false;\n        }\n       \n        if (this.attachmentFile ==", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIdsForUser(String sUserId, String sCompoName) {\n    return mock.getAvailComp", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\t\t\t\tHistory.Add(msg, user);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (!Available)\n\t\t\t{\n\t\t\t\tif (message)\n\t\t\t\t{\n\t\t\t\t\tInternalMessage(user,", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    }\n    public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {\n        if (this.g()) {\n            this.m();\n            this.a(packet, (GenericFutureListener[]) ArrayUtils", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                        files[++index] = (String) mListView.getItemAtPosition(key);\n                    }\n                    final DialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialogDialog", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      return StringUtils.join(name, \" and \");\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(StringUtils.join(recipients.subList(0, recipients.size() - 1), \", \"));\n    sb.append", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "                z_arr[p_index, kk, 0] = z_dict[z_key][per][0]\n                z_arr[p_index, kk, 1] = z_dict[z_key][per][1]\n                z_err_arr[p", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "            for path, tests_list in iteritems(type_paths):\n                for test_json in tests_list:\n                    test = test_cls.from_json(tests_root, test_json)\n                    tests[path].add(test)\n                    source_files[", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "            env[\"PATH\"] = os.pathsep.join(\n                [os.environ[\"PATH\"], *extra_path]\n            )\n        if extra_lib:\n            env[\"PATH\"] = os.pathsep.join(\n                [env[\"PATH\"], *extra_", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "        try {\n            final ScriptingSecurityManager scriptingSecurityManager = createScriptingSecurityManager(System.out);\n            ScriptingSecurityManager.removeScript(scriptingSecurityManager, compiledScript);\n        } catch (Throwable e) {\n            throw new ExecuteScriptException(e.get", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tif (caseInsensitive)\n\t\t\t{\n\t\t\t\treturn this.id.compareToIgnoreCase(", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\"\"\"\n    for i in range(len(tasks)):\n      transformed_grad.append(grad[i,1:]*grad_var + grad_means*energy_var + self.y_means[1:])\n    return np.array(transformed_grad", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "        crawlParameters.add(new Parameter(pf, Parameter.ParameterType.CRAWLER_DEPTH, depth));\n        //EXCLUSION\nNext line of code:\n        crawlParameters.add(new Parameter(pf, Parameter.ParameterType.CRAW", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "        assertEquals(found.size(), 3);\n        assertEquals(found.get(0).getName(), stacks[0].getName());\n        assertEquals(found.get(1).getName(), stacks[1].getName());\n        assertEquals(found.get", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = colisionList[0].To2D();\n                    }\n                }\n                int shortenWillHit = 0;\n                Vector3 shortenFarmLocation = Vector3.", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t\t// $capture or $capture(..capture)\n\t\t\tif (pattern.Calls(S.TriviaTrailing))\n\t\t\t{\n\t\t\t\tvar sub = GetCaptureIdentifier(pattern);\n\t\t\t\tif (sub!= null)\n\t\t\t\t{\n\t\t\t\t\tcaptures = captures??", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "    return re.search(pattern, frozen_output) is not None\ndef package_in_pip_requirements(package_name, pip_requirements_output):\n    \"\"\"Is this package in the output of 'pip freeze'?\"\"\"\n    # Look for either:\n    ", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\t\tsuper.setContextMenuFactory(ContextMenuFactory.getInstance());\n\t\tsuper.setContextMenuItemFactory(ContextMenuItemFactory.getInstance());\n\t\tsuper.setContextMenuItemFactory(ContextMenuItemFactory.getInstance());\n\t\tsuper.setContextMenuItemFactory(ContextMenuItem", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    i = Symbol(\"i\", integer=True)\n    k = Symbol(\"k\", integer=True)\n    j = Symbol(\"j\", integer=True)\n    # A simple example with a concrete summand and symbolic limits.\n    # The normal sum: m = k and n = k", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "            'name': \"A\",\n            'value': 1,\n            'has_parent': True,\n            'has_children': True,\n            'has_onchange': True,\n            'has_readonly': True,\n            'has_m2o': True,\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "                this._notifyAction = action;\n                this._newItemList = (changedItems == null)? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusAddress:\n                    c.CampusAddress = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            InputStream is = new ByteArrayInputStream(streamWriter.toByteArray());\n            Document testDocument = parser.parse(is);\n            streamWriter.close();", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                if (l.inSubroutine(id)) {\n                    l.addToSubroutine(id, nbSubroutines);\n                    if (l.next!= null) {\n                        l.next.addToSubroutine(id, nbSubroutines", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "\t\t\t\tif (ide.width!=0 || ide.height!=0 || ide.colorCount!=0 || ide.reserved!=0 || ide.planes!=0 || ide.bitCount!=0 || ide.bytesInRes!=0 || ide.imageOffset!=0", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "\t\tthis.lblLabelPosition.setText(\"Label Position: \" + String.valueOf(position.getSelectionIndex()));\n\t\tthis.comboLabelPosition.select(position);\n\t\t}\n\t\t\n\t\tprivate boolean isChartShowLabels() {return btnShowLables", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n        WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref UnityEngine.Ray instance_of_this_method);\n        __intp.Free", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "        self.transport._expect_packet(MSG_KEXGSS_CONTINUE,\n                                      MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR)\n        self.transport._activate_inbound()\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\",currImageValue\n        self.assertEqual( int(currImageValue),", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "                res = self.cr.fetchone()[0]\n                return res or 0.0\n        class Categories(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def _sum(self, code, from", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "            if (overallNodeName!= null) {\n                if (overallNodeName.startsWith(\"/\") == false) {\n                    overallNodeName = \"/\" + overallNodeName;\n                }\n                if (overallNodeName.endsWith(\"/\") == false", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "        d.setWidth(getWidth() + 2);\n        d.setHeight(getHeight() + 2);\n        d.setX(getX() + 1);\n        d.setY(getY() + 1);\n        return d;\n    }\n    \n    @", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #Number of Msun objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        bias.append(cosmo.bias(", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\t\t}\n\t\tprivate void ShowOrHide(Window window, bool hide)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t\tif (hide)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "        if flag=='off_center':\n            theta_res=0.1\n        #theta_res is the resolution of theta angle\n        #phi is the rotation angle\n        #theta_res and phi are the resolution of theta and phi angle\n        #", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "            contact.setLastMessageTransmitted(query.getLastMessageTransmitted());\n            contact.setFirstServerMsgId(query.getFirstServerMsgId());\n            contact.setAllMessageCount(query.getAllMessageCount());\n            contact.setWith(query.getWith());\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\t\t\treturn ret;\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> log) {\n\t\tfor (byte[] l : log) {\n\t\t\tfinal int n = Util.toInt(l, 0, 24);", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t/**\n\t * This listener will be notified of all autonomous events that originate from\n\t * the specified TID.\n\t */\n\t@Override\n\tpublic void removeAutonomousListenerForAll(String tid, ReportListener listener) {\n\t\tengine.deregisterForAll(tid", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        return \"Unknown block type %u\" % self[\"block_type\"].value\nclass File(FieldSet):\n    TAG_INFO = {\n        0: (\"header\", \"Archiver header\", markerFlags, markerHeader, None),\n        1: (\"file[]\", fileDesc, file", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\tmodel = Model( sys.argv[ 1 ], sys.argv[ 2 ] )\n\tresp = model.network['score']\n\tprint resp\nelse :\n\tprint \"Usage: %s <modelfile> <source> <target>\" % sys.argv[ 0 ]\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "        path_info = environ['PATH_INFO']\n        for path_prefix, app in self.apps:\n            if path_prefix == path_info:\n                return app(environ, start_response)\n        # If we get here, we didn't find a matching app.", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "            if entry_name in entries:\n                self.msg.error(\"Duplicate enumeratedValue name '%s'\" % entry_name, self.src_ref)\n            entries[entry_name] = (entry_value, displayname, desc)\n        # Create the enum", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "        if (chance < 0.0)\n            return;\n        if (chance > 1.0)\n            return;\n        if (chance < res.GetSuccessChance(from, resType, craftSystem, false, ref allRequiredSkills))\n            return;\n        if (chance", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "                return (string)this.ViewState[\"SubmitText\"]?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                MessageBox.Show(\"Fatal Error:\\nUnable to locate FOG service!\");\n                this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigured())\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "    exposedHeaders = exposedHeaders.split(',')\n    exposedHeaders.append(header)\n    response['Access-Control-Expose-Headers'] = ','.join(exposedHeaders)\n    return response\ndef expose_cookie(cookie, response):", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture();\n                }\n                if", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "        if not isinstance(var, (list, tuple)):\n            var = [var]\n    # List-like format.\n    elif not isinstance(var, (list, tuple)):\n        raise TypeError(f'{name} must be a list or tuple, not", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "                    Driver d = idlePool.Dequeue();\n                    if (d.IdleSince < now)\n                    {\n                        oldDrivers.Add(d);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1)) * 100);\n\t\t\t\t\tstring[] str = new string[] { \"[\", num", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "QuestJython = JQuest(QUEST)\nQuestJython.setQuestState(qn)\nQuestJython.setQuestItemsCount(SI_ORE)\nQuestJython.setQuestItemsCount(SI_ORE)\nQuestJython.setQuestItemsCount(SI_ORE)\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "        self._model = self\n    def _rebuild_index(self):\n        \"\"\"Rebuilds the indexes in the model\"\"\"\n        self.reactions._generate_index()\n        self.metabolites._generate_index()\n        self.genes._generate_", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "        }\n        public ShaderProgram(bool flat, bool immediate)\n        {\n            PrimitiveType = PrimitiveType.Triangles;\n            Flat = flat;\n            Immediate = immediate;\n        }\n        public ShaderProgram(bool flat, bool immediate, bool active)", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].height;\n\t\t\t\tcurrent.x=lines[selected", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\t\tfor(TumourGroupListVoBean voBean : beans)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)voBean.getBean();\n\t\t\tcoll.add(vo);\n\t\t}\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "                if (PartnerInterestRow.RowState == DataRowState.Deleted)\n                {\n                    ARow.RowState = DataRowState.Added;\n                    ARow.RowNumber = HighestNumber + 1;\n                    ARow.RowState = DataRowState.Added;\n                ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "        new LayoutAnimationController(set, mNavigationView);\n        mNavigationView.setLayoutAnimationController(controller);\n    }\n\t\n\t@Override\n\tpublic void onKeyDown(int keyCode, KeyEvent event) {\n\t\tswitch (keyCode) {\n\t\tcase", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "\t\tchar[] \t\tstructure \t= protein.getStructure();\n\t\t\n\t\tif (pssm.getLength()!= structure.length)\n\t\t{\n\t\t\tErrorUtils.printError(HelixIndexer.class, \"PSSM and structure annotation length do not match for", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
