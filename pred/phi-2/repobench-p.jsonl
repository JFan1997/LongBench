{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient KademliaRoutingTableFactory factory;\n    private final transient KademliaRoutingTableFactoryFactory factory;\n    private final transient KademliaRoutingTableFactoryFactory factory;\n    private final transient Kadem", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x[0]", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "        // https://github.com/protyposis/spectaculum-core/blob/master/src/main/java/net/protyposis/android/spectaculum/effects/Parameter.java\n        mParameterListAdapter = new EffectParameterListAdapter(mParameterList", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, StatusMessageEvent::fromCommand, this::queueEvent));", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private Float[] mRotationMatrix;\n    private Float[] mRemappedRotationMatrix;\n    private Float[] mInitialRotationMatrix;\n    private Float[] mInitialRotationMatrix;\n    private Float[] mInitialRotationMatrix;\n    private Float[] mInitialRotationMatrix", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "\t\t\tintegrityCheck.check(args.path, passphrase, args.checkFileIntegrity);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\nclass CheckCommand {\n\n\tprivate final Path path;\n\tprivate", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 全局流量限制服务\n     */\n    private GlobalRateLimiter globalRateLimiter;\n\n    /**\n     * 全局�", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "    when(mockDataStore.getEnrollSessionData(SESSION_ID)).thenReturn(\n        new EnrollSessionData(ACCOUNT_NAME, APP_ID_ENROLL, SERVER_CHALLENGE_SIGN));\n    HashSet<X509Certificate> trusted", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            //send the public key to the server\n            sendPubKeyToServer(deviceId, pubKeyInBase64);\n            //send the private key to the server\n            sendPrivKeyToServer(deviceId, rsa.getPrivKeyinBase64());\n            //send the deviceId", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    def __init__(self, uri):\n        super(URI, self).__init__()\n        self.uri = uri\n\n\nclass FlagList(Signature):\n    def __init__(self, flags):\n        super(FlagList, self).__init__()", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            if self.state == CCStateARComplete:\n                self.state = CCStateConnected\n                self.cld = self.cld.replace('%s-%d' % (self.call_id, self.max_index), '%s-%d' % (", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "                Activity.getActivity(activity.getActivityId()).getActivity(intent.getActivityId()).setAction(intent.getAction());\n                Activity.getActivity(activity.getActivityId()).getActivity(intent.getActivityId()).setUrl(url);\n                Activity.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "  def __repr__(self):\n    return 'TreeNode(kind=%s, data=%s)' % (self.kind, repr(self.data))\nequip/analysis/constraint/expr.py\nclass Comparator(object):\n  def __init__", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        # Test valid arguments.\n        ", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "        StringBuilder sb = new StringBuilder();\n        sb.append(location.getTime());\n        sb.append(\",\");\n        sb.append(location.getLatitude());\n        sb.append(\",\");\n        sb.append(location.getLongitude());\n        sb", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "    return\n\n\n@method(infix('&', bp=72))\ndef select_intersection_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(self", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "    user = User(id=\"user_id\", email=\"user@domain.com\")\n    assert user.id == \"user_id\"\n    assert user.email == \"user@domain.com\"\n    assert not hasattr(user, \"name\")\n    assert not init_called", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    private static final String ARGUMENT_MOVIE_ID = \"ARGUMENT_MOVIE_ID\";\n    private static final String ARGUMENT_DESCRIPTION = \"ARGUMENT_DESCRIPTION\";\n    private static final String ARGUMENT_TMDB", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MirrorTransformation(),\n                    new PolarTransformation(),\n                    new PosterizeTransformation(),\n", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "        await wild.monitor_task.add_done_callback(lambda x: self.bot.loop.create_task(self.load_wild_report(x.result())))\n        await wild.monitor_task.add_done_callback(lambda x: self.bot.", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "                server.getMBeanServerConnection().setMBeanInstance(instance);\n                server.getMBeanServerConnection().setMBeanInstance(instance);\n                server.getMBeanServerConnection().setMBeanInstance(instance);\n                server.getMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "  assert isinstance(doppler, DopplerPoly)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50., 3. * C / float(", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "    if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    if c['vocab_def']:\n        vocab_def = Vocabulary(c['voc", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "                mParticipantFragment = ParticipantFragment.newInstance();\n                getFragmentManager().beginTransaction().add(R.id.container, mParticipantFragment, Constant.PARTICIPANT).commit();\n            }\n        }\n    }\n\n    private void raffleParticipant", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "    def __init__(self, calg=0):\n        super(CompressedData, self).__init__()\n        self.calg = calg\n\n    def __bytearray__(self):\n        return self.calg.__bytearray__() +", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        return ConeSettings(\n            self._call_fmod(\"FMOD_Sound_GetThreedConeSettings\", c_void_p(self))\n        )\n\n    @threed_cone_settings.setter\n    def threed_cone_settings(self, settings):", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "            playSound(\"perfect.wav\");\n        } else if (accuracy == Accuracy.BAD) {\n            playSound(\"bad.wav\");\n        } else if (accuracy == Accuracy.NICE) {\n            playSound(\"nice.wav\");\n        } else if (accuracy", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "        size = scipy.ndimage.measurements.sum(numpy.ones(imgshape.shape, dtype = bool), labels = imgshape, index = numpy.arange(1, maxLabel + 1));\n        \n        #find cell size\n        findCellSize", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "                if (query.queryType == RequestType.GROUPBY) {\n                    ((GroupByQueryMeta) query).postProcess(stmnt.dataSource, reqHeaders);\n                }\n                if (query.queryType == RequestType.TIMESERIES) {\n                    ((", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n            exit(", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                            setupCombExpCheck(root, i);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (Config.DEBUG_PARSE_TREE) Config.log.println(\"<TREE>\\n\" + root + \"\\n\");\n\n        if (Config.", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "                EncryptionAlgorithmCoded(\n                    algorithm=HashAlgorithm.SHA256,\n                    key_name=KeyName(\n                        bank_identifier=message.segments[0].header.bank_identifier,\n                        user_id=message.segments[0].header", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "\t\t\n\t\tString[] tags;\n\t\t\n\t\tString[] colors;\n\t\t\n\t\tString notEnoughData;\n\t\t\n\t\tpublic ResourceData (Meter meter, SRSLevel srsLevel, String[] tags, String[] colors, String notEnoughData) {\n\t\t\tthis.meter = meter", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "    url(r'^pipeline-settings$', PipelineSettingsView.as_view(), name=\"pipeline-settings\"),\n    url(r'^pipeline-settings/languages$', PipelineSettingsLanguageView.as_view(), name=\"pipeline-settings-l", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "    @Override\n    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            $Argument2 argument, $Argument2 argument2) {\n        return andArgument(givenStep", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "        self._storage_type = storage_type\n        return self\n\n\n#\n# DB CREATE\n#\n# Creates a new database in the OrientDB Server instance.\n#\n# Request: (database-name:string) <-- before 1.0rc1 this was empty (server", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "\t\tif (textColor == null) {\n\t\t\ttextColor = new Color(0, 0, 0);\n\t\t}\n\t}\n\t\n\tprivate void setIconSize() {\n\t\tif (iconSize == null) {\n\t\t\ticonSize = iconSize;\n\t\t}\n\t}", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "    if (process.isRunning()) {\n      process.wait();\n    }\n    if (process.exitCode()!= 0) {\n      throw new IosDeviceException(RealDeviceImpl.this,\n          \"Process exited with code \" + process.exitCode());\n    }\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "    # 运行该 apk 文件，获取运行时特征并存储在 '该文件路径' + '_info_/' �", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "\t\tMessageBuilder messageBuilder = new MessageBuilder();\n\t\tmessageBuilder.addMessage(\"weixin\", xml);\n\t\tMessage message = messageBuilder.build();\n\t\tMessageEvent event = new MessageEvent(message);\n\t\tevent.setMessage(message);\n\t\tevent.setMessageType(Message", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 11, 12))\n        self", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "    @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @channel_checks.raid_report_enabled()\n    async def cmd_city(self, ctx, *city_name):\n        \"\"\"\n        **", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "                            if (picture.getText_content().trim().equals(\"分享自煎蛋 \" + picUrl)) {\n                                ShareUtil.sharePicture(mActivity, picUrl, text);\n                            } else {\n                                ToastHelper.Short(", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "        self.config_actor_socket.connect(SocketNames.CONFIG_ACTOR.value)\n        self.config_actor_socket.send('{0}'.format(Messages.CONFIG_ACTOR.value))\n        config_data = self.config_actor_socket", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                SurveyActivity.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.SurveyPromptLoader.SurveyPromptLoader.SurveyPromptLoader.SurveyPromptLoader.SurveyPromptLoader.Sur", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "\tif opts.outtype[i] =='mgh':\n\t\twrite_tm_filetype(\"pFWER_%s\" % opts.tmifile[0],\n\t\t\timage_array = positive_data,\n\t\t\tmasking_array = masking_array,\n", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "        nc.send_message(protocol, 'hello world')\n        self.assertEqual(protocol.send_string.call_count, 1)\n        self.assertEqual(protocol.send_string.call_args_list[0][0], 'hello world')", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "    'no_members': Counter,\n    'current_size': Counter,\n    'current_load': Gauge,\n    'current_load_percent': Gauge,\n    'current_load_percent_max': Gauge,\n    'current_load_percent_min':", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionSuccessWithQueryExecutionFactoryListener() {\n        StatementExec", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "        assertEquals(\"is statement\", qe instanceof StatementExecution);\n        assertEquals(\"is statement\", qe instanceof StatementExecution);\n        assertEquals(\"is statement\", qe instanceof StatementExecution);\n        assertEquals(\"is statement\", qe instanceof Statement", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "                continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            command = self._createLinkADRRequest(device)\n            yield self._sendADRCommand(device.deveui, command)\n            \n            # Update", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "        chatInfo = new View(this, LayoutInflater.INLINE_FILL);\n        chatInfo.setAdapter(mAdapter);\n        chatInfo.setText(\"Chat Settings\");\n        chatInfo.setTextAlignment(TextAlignment.CENTER);\n        chatInfo.", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "#\n#   0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0a  0x0b  0x0c  0x0d  ", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "            self.time = self.img_handle.time\n\n            # Convert to Julian date\n            self.JD = self.img_handle.time.jd\n\n        else:\n            self.time = self.JD\n\n        # Save the time\n        json_dict['time'] = self", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(HITANSBase):\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "        self.config = GlobalConfigCache()\n        self.guild_metadata = GuildMetadata(self.config)\n        self.bingo_card_manager = BingoCardManager(self.config)\n        self.bingo_card_writer = BingoCardWriter(self.", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        for (List<PublicRoom> publicRoomsList : mHomeServerNames) {\n            mPublicRoomsListList.add(publicRoomsList);\n        }\n    }\n\n    private void", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        plugins.registerEvents(new BlockSpawnListener(this), this);\n        plugins.registerEvents(new BlockSpawnListener(this), this);\n        plugins.registerEvents(new BlockSpawnListener(this), this);\n        plugins.registerEvents(new BlockSpawnListener(this), this);\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "        if args.chimera_detect:\n            chim_detect = ChimeraDetector(target_sequences,\n                                          args.chimera_detect)\n        else:\n            chim_detect = ChimeraDetector(target_sequences)\n\n    #", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        registry.put((byte) (QUERY_MBEANS ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(\n                SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "                    miPushInit();\n                }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {Next line of code:\n                    hwPushInit();\n                }\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "    /**\n     * It adds a new category chart panel to the tabbed pane set.\n     *\n     * @param metric The metric that will be shown in the chart.\n     * @param datasetGenerator The generator that will produce the datasetGenerator\n     * for this chart.\n     ", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "    protected void init() {\n        super(\"Personal Vulnerabilities\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(800, 600);\n        setLocationRelativeTo(null);\n        setDefaultCloseOperation(JFrame.EXIT_", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "        appRtcClient.videoConstraints().add(new MediaConstraints.KeyValuePair(\n          \"RtpDataChannels\", \"true\"));\n      }\n      VideoSource vsv = factory.createVideoSource(lMS, appRtcClient.videoConstr", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "        if (packet.getPacketType() == PacketType.ACK) {\n            AckRequest ackRequest = new AckRequest(packet.getAckId(), packet.getData());\n            ackManager.ack(ackRequest);\n        } else if (packet.", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private List<Card> cards;\n    private List<Card> cardsToShow;\n    private List<Card> cardsToShowAll;\n    private List<Card>", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "        }\n\n        @Override\n        public void onOpen(SQLiteDatabase db) {\n            if (mDatabaseCreated) {\n                super.onOpen(db);\n            } else {\n                super.onOpen(db);\n                mDatabaseCreated = true;\n            }\n        ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "        docker_config.add_environment_variables(\n            {\n                \"APP_ID\": self.package_name,\n            })\n        docker_config.add_extra_flags(self.config.extra_flags)\n        docker_config.add_extra_options(self", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    # create a copy of the system object\n    obj = copy.deepcopy(obj)\n    # inject clock on system object\n    inject(obj, '_clock', RecordClock())\n    inject(obj, '_system_data_path', system_data_path)\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        mAdapter = new UserAdapter(this);\n        mAdapter.setAdapter(this);\n        mAdapter.setAdapter(this);\n        mAdapter.setAdapter(this);\n        mAdapter.setAdapter(this);\n        mAdapter.setAdapter(this);\n        mAdapter", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "    final String[] FolderNames = { \"社区管理\", \"国内院校\", \"休闲娱乐\", \"五湖四海\", \"游戏运动\", \"", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "    def test_received_simulator_data_datagram(self):\n        simulator_data_datagram = fdm_pb2.SimulatorData()\n        simulator_data_datagram.x_body = 1.0\n        simulator_data_datagram.y", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "\tif (writeTML) {\r\n\t\tJUTPreferences.setTmlContainer(getTmlContainer());\r\n\t}\r\n\r\n\t// TODO: add test-class-name\r\n\tString testClassName = \"TestClass\";\r\n\r\n\t// TOD", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "    assert_unordered(create_table_request(\"Simple\", SimpleModel, description), expected_status)\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    ", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "            if (httpMessage.getRes().getResponse().getStatusCode() == 200) {\n                String response = httpMessage.getRes().getResponse().getResponse();\n                String[] lines = response.split(\"\\n\");\n                StringBuilder sb = new StringBuilder();\n                for", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "      visitProxOp(new VisitOrd3(n), query);\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "    def _load_file(self, fileobj):\n        \"\"\"Load the ID3 chunk from the fileobj\"\"\"\n        fileobj.seek(self.offset)\n        return self.parse_next_subchunk()\n\n    def _pre_load_header(self, fileobj):", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "            if self._header[1] == 0:\n                exception_class = b''\n                exception_message = b''\n            elif self._header[1] == 1:\n                exception_class = b''\n                exception_message = b''\n            elif", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "                    new EffectTransformation(\n                            new EffectTransformation.EffectType.BLOCK,\n                            new EffectTransformation.EffectType.BLOCK,\n                            new EffectTransformation.EffectType.BLOCK,\n                            new EffectTransformation.EffectType.BLOCK,\n                            new EffectTransformation", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryItem( proxy );\n\t\t\t}\n\t\t\titems.add( item );\n\t\t}\n\n\t\treturn items;\n\t}\n\n\t/**\n\t * Internal only\n\t * @param p proxy object\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    api = B1330(args.apikey)\n    if args.settlement_period is None:\n        print(\"A settlement period should be supplied using the --settlement-period flag (range 1 to 50).\"\n              \"Defaulting to 1\")\n    if args.date is", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "            new FormatElement() {\n                @Override\n                public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\n                    sb.append(format.format(monitor));\n                }\n            }\n        ),\n        new FormatElement() {\n            @Override\n            public void append", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "    assert dump_key(user_key, engine) == \"id=S=foo\"\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\n    assert extract_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "            events.append(Event(e, self))\n\n        return events\n\n    def create_event(self, name, description, tags=None):\n        params = {\"name\": name, \"description\": description, \"tags\": tags}\n        data = self.call_api(\"events\", type", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "\tpublic static FormFor formFor(String resource, String... fields) {\n\t\treturn new FormFor(resource);\n\t}\n\tpublic static FormFor formFor(String resource, String... fields) {\n\t\treturn new FormFor(resource);\n\t}\n\tpublic static FormFor form", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "            if (mWallpaper!= null) {\r\n                mWallpaper.setURL(mContext.getConfiguration().getWallpaperURL());\r\n                mWallpaper.setMimeType(mContext.getConfiguration().getWallpaperMimeType());\r\n                mWallpaper.", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "            Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "\t\tif args.id:\n\t\t\tprint 'Converting minimac data to genotype per subject files'\n\t\t\tself.convert_individuals()\n\t\t\tself.convert_probes()\n\t\t\tself.convert_genotypes()\n\t\t\tself.convert_phenotype()\n\t\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "  /**\r\n   * @param qs the query to translate\r\n   * @return the translated query\r\n   */\r\n  public Query translate(Query qs) {\r\n    return translate(qs, null);\r\n  }\r\n\r\n  /**\r\n   * @", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "    p.set_psf_params(kfki=1.07, zslab=-29.3, alpha=1.17, n2n1=0.98,\n            sigkf=-0.33, zscale=0.89, laser_wavelength=", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "        self.beginning_datetime = self.get_beginning_datetime()\n\n        # Read the number of frames in the video\n        self.num_frames = self.get_num_frames()\n\n        # Read the frame size\n        self.frame_size = self.get", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "from django.urls import reverse\n\nurlpatterns = [\n    path('', views.home_page, name='home_page'),\n    path('profile/', views.profile, name='profile'),\n    path('public_profile/<slug:slug>/',", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\tfor (FoodGroup foodGroup : foodGroups.values())\n\t\t{\n\t\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(foodGroup), player);\n\t\t}\n\t}\n}\n\nA:\n\nI think you are looking for a way to", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "    @keyclass.register(six.text_type)\n    def keyclass_str(self, val):\n        self._keyclass = val\n\n    @keyclass.register(bytearray)\n    def keyclass_bytearray(self, val):\n        self", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "\t\t\t\t\t\t// TODO: implement\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t/* #################################\n\t\t * Selection\n\t\t * #################################\n\t\t */\n\t\tselectionLayer.addListener(new SelectionListener() {\n\t\t\t@Override\n\t\t\tpublic void handleSelectionEvent(Se", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "from Timeline.Server.Constants import TIMELINE_LOGGER, LOGIN_SERVER, WORLD_SERVER, DIGGABLES, GOLD_DIGGABLES, DIGGABLE_FURN, GOLD_DIGGABLE_FURN\r\nfrom Timeline.Database.", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method('node')\ndef nud_pi_sequence_type(self):\n    XPathFunction.nud(self)\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "            manager = mp.Manager()\n            error_dict = manager.dict()\n            return_dict = manager.dict()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = CompileInformationFunction(args)", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    return states.ImageState(pos, rad, tile, P, H, I, im)\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "        contentValues.put(JobStorage.COLUMN_TAG, \"test\");\n        contentValues.put(JobStorage.COLUMN_TRANSIENT, true);\n        contentValues.put(JobStorage.COLUMN_REQUIRES_DEVICE_IDLE,", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "    platepar.rot_horizon = platepar.az_centre - platepar.alt_centre\n\n    # Recompute the rotation wrt the FOV centre\n    platepar.rot_FOV = platepar.az_centre - platepar.rot_horizon\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        model = Progress\n        fields = ['indicator', 'target', 'area', 'code', 'name', 'description',\n                  'created', 'last_modified', 'progress_count', 'area_code',\n                  'area_name', 'area_type', 'area_type_", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "        chatRem = (View) findViewById(R.id.chatRem);\n        chat = (Chat) findViewById(R.id.chat);\n        chatRem.setAdapter(mDelAdapter);\n        chatRem.setOnClickListener(new View.OnClickListener()", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "            @Override\n            protected Promise<Channel> doCompose(final Void value) throws Exception {\n                LOGGER.debug(\"Reconnecting transport...\");\n\n                return transport.connect(context, manager, false);\n            }\n        }).then(new ExecuteOn<Channel>", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "            uiHandler.postDelayed(showButton, 600);\n        }\n    }\n\n    @UiThread\n    protected void handleData(ArrayList<Produce> list) {\n        if (list == null || list.size() == 0) {\n            Toast.makeText", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "    private final int k;\n    private final int t;\n    private final Map<KState, Double> transition;\n    private final Map<KState, Map<KState, Double>> emission;\n    private final Map<KState, Map<KState, Double>> transitionCandidate;", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "                new RegisterFragment(name, email, password, message));\n    }\n}\n\n/**\n * Represents a task used to get the user's information.\n */\npublic class GetInfoTask extends AsyncTask<String, Void, Boolean> {\n\n    private Class classToNotify", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "  assert isinstance(args.message, Message)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "    private List<String> items;\n    private int menuCount;\n    private String menuTitle;\n    private int bottomMargin;\n    private ViewViewGroup parentViewGroup;\n    private ViewView parentView;\n    private ViewView parentViewGroupView;\n    private ViewView parent", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = new BaseData(data);\n\t\t\t\t\tif (needSave) {\n\t\t\t\t\t\tsaveApps();\n\t\t\t\t\t}\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "    def _read_path_commands(self, path):\n        self.cursor_x = 0\n        self.cursor_y = 0\n        self.close_index = 0\n        self.ctx_path = []\n        self.ctx_loop = []\n        self", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "        self.beg_alt = cartesianToPolar(self.beg_vect)[1]\n        self.end_alt = cartesianToPolar(self.end_vect)[1]\n\n        # Compute the normal vector\n        self.normal = vectNorm", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "                if (AppSetAction.isShow && AppSetAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSetAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "    /**\n     * Called when the visitor encounters a node with children.\n     * @param node The node to visit.\n     */\n    boolean visit(Node node);\n\n    /**\n     * Called when the visitor encounters a node with children.\n     * @param node The node to visit", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\t\tMMethod m = (MMethod)currentScope.resolve(fhead.ID().getText());\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterMethod(@NotNull MethodContext ctx) {\n\t\tsuper.enterMethod(", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "        bind(GerritRestModule.class).toInstance(new GerritRestModule());\n        bind(GerritActionsModule.class).toInstance(new GerritActionsModule());\n        bind(GerritDiffModule.class).toInstance(new GerritDiffModule());\n        bind", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "    private String package;\n    private String version;\n    private String versionString;\n    private String versionStringWithComma;\n    private String versionStringWithCommaAndSpace;\n    private String versionStringWithCommaAndSpaceAndSpace;\n    private String versionStringWithCommaAnd", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        if filter_type == FilterType.Date:\n            entries = [e for e in entries if e.date in date_range]\n        elif filter_type == FilterType.Amount:\n            entries = [e for e in entries if e.amount is not None]\n", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "                    if (snapshots.get(i).getZkId().equals(zxidLong)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsearchList.setVisibility(View.VISIBLE);\n\t\t\t\t\t\ttabLayout", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    ]\n    \n    def __init__(self, name, data, layer=None, parent=None):\n        '''\n        name : string\n            name of the segment\n        data : list of frame\n            list of frames\n        layer : Layer\n            layer of the segment\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\n", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "    pos = POS + rad[:, None]\n    # 2. background\n    bg = np.random.randn(IMG.shape[0], IMG.shape[1])\n    # 3. add noise\n    noise = np.random.randn(IMG.shape", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        instance, (int, float, Decimal, datetime.datetime, datetime.date, datetime.time,\n                   datetime.timedelta, Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass:", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "                    if (RequestFragment.sSelectedRequests.get(i)!= null) {\r\n                        stringBuilder.append(\"\\nRequest Id: \")\r\n                               .append(RequestFragment.sSelectedRequests.get(i).getId());\r\n                        stringBuilder", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "                if not checkFileExistence(pattern.get(\"DataFile\")):\n                    errmsg += \"Pattern << %-20s >> DataFile << %-20s >> does not exist.\\n\"%(pattern.name, pattern.get(\"DataFile\"))\n                    rvalue = False\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "        return SearchMenuPage(self._createSearchHistory(context))\n        \n    def _createSearchHistory(self, context):\n        searchHistory = SearchHistory(self.log, self.settings.get('storeFile'), self.settings.get('searchHistorySize'))\n        return search", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private RepositoryContentTask repoContentTask;\n    private RepositoryContentTask starContentTask;\nNext line of code:\n", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "                        user.setPassword(passwordTmp);\n                        user.setUsername(usernameTmp);\n                        user.setUsername(usernameTmp);\n                        user.setUsername(usernameTmp);\n                        user.setUsername(usernameTmp);\n                        user.setUs", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\t\tddi2fo.setPreprocessors(preprocessors);\n\t\tddi2fo.setPostprocessors(postprocessors);\n\t\tddi2fo.setBasePathDDI2FO(basePathDDI2FO);\n\t\tddi2fo.setBasePathForm", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.GPS.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    url(r'^$', PackagesSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"packages-new\"),\n    url(r'^view", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "                    p = Process(\n                        target=function.run,\n                        args=(\n                            self.jobs[i],\n                            self.jobs[i].utterances,\n                            self.jobs[i].utterance_directory,\n                            self.jobs[i].utterance_directory,\n                            ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "    return tgAsDict[IntervalTier.INTERVAL_TIER]\n\n\ndef test_save_short_textgrid():\n    \"\"\"\n    Test that a short textgrid can be saved and loaded back in\n    \"\"\"\n    tg = textgrid.Textgrid()\n    tg", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "    List<FixTag> tags = new ArrayList<>();\n    tags.add(new StringTag(\"a\"));\n    tags.add(new StringTag(\"b\"));\n    tags.add(new StringTag(\"c\"));\n    tags.add(new StringTag(\"d", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRTermListQueryNode termListQueryNode, Void param) throws RuntimeException {\n\t\t\treturn getTermListQueryNodeExplanations(termListQueryNode);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRTerm", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "            yield data_chunk(data, chunk, with_overlap=with_overlap)\n            chunk_idx += 1\n            if chunk_idx >= len(chunk_bounds):\n                break\n\nklusta/traces/detect.py\n", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "\tprivate ValorizatorParametersImpl valorizatorParametersImpl;\n\t\n\tprivate ValidationMessage validationMessage;\n\t\n\tprivate InputStream paramsIS;\n\t\n\tprivate InputStream paramsIn;\n\t\n\tprivate InputStream paramsOut;\n\t\n\tprivate InputStream params", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "                        content = content.replaceAll(\"[^a-zA-Z0-9\\\\s]\", \"\");\n                        content = content.replaceAll(\"\\\\s+\", \" \");\n                        content = content.toLowerCase();\n                        content = content.replaceAll(\"\\\\s+\",", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "    def get_contacts(self):\n        if self.language:\n            return Contact.objects.filter(phone_number=self.phone_number, language=self.language)\n        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        the minimum latency time is 100 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            \", \".join([\", \".join(values) for", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        self.generator = SimilarPathGenerator()\n\n    def test_generate_paths(self):\n        self.assertEqual(self.generator.get_pattern(\"http://example.com/\"),\n                         \"http://example.com/\")\n        self.assertE", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        pipeline.apply(\"Read live projects\", Read.from(org.getProjects()));\n\n    // Convert the live projects to GCPResource objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveProjectsStatesTuple = liveProject", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "    conditions.append(AndCondition(column, value, values))\n    conditions.append(AndCondition(column, value, values))\n    conditions.append(AndCondition(column, value, values))\n    conditions.append(AndCondition(column, value, values))\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        ", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    private final ICompilationUnit testMethod;\n    private final ICompilationUnit testMethodGroup;\n    private final ICompilationUnit testMethodGroupGroup;\n    private final ICompilationUnit testMethodGroupGroupGroup;\n    private final ICompilationUnit testMethodGroupGroupGroupGroup;", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0) == 3\n", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\tprivate static final String DEFAULT_FREQUENCY_CUTOFF = \"0\";\n\tprivate static final String DEFAULT_FREQUENCY_CUTOFF_HIGH = \"0\";\n\tprivate static final String DEFAULT_FREQUENCY_CUTOFF_LOW", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    self.next_sink.SetProperty(self._VARZ_BASE_NAME, self._VARZ)\n    self.next_sink.SetProperty(self.Varz.Varz.timeouts, sink_properties.timeout)\n    self.next_s", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "        return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, codigo_venda, codigo_venda_fiscal,\n            tipo_certificado, cnpj, codigo_uf):\n", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        Files.createDirectory(output.resolve(input.getFileName().toString()).getParent().toString(), false));\n    Files.createFile(output.resolve(input.getFileName().toString()), input.getFileName().toString(), null, null);", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "    if gopts.event_log:\n      if not os.path.exists(gopts.event_log):\n        print('Event log file %s does not exist' % (gopts.event_log,))\n        return 1\n      git_trace2_", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "        registerCallAction(new AnswerCallWithSpeakerAction(this), AnswerCallAction.ANSWER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        ", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "        ds.getQueryExecutions().add(getMockUpdateQueryExecution());  // update\n        ds.getQueryExecutions().add(getMockDeleteQueryExecution());  // delete\n        ds.getQueryExecutions().add(getMockUpdateQueryExecution());  //", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "    @ForApplication\n    Context provideApplicationContext(Context context) {\n        Context context = context;\n        Context context = context;\n        Context context = context;\n        Context context = context;\n        Context context = context;\n        Context context = context;\n        Context context = context;", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        verifiers = new HashMap<String, VerifierBackground>();\n        verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "    public String getSession()\n    {\n        return session;\n    }\n\n    public void setSession(String session)\n    {\n        this.session = session;\n    }\n\n    /**\n     * returns the list of users (via user.get)\n     *\n     *", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "            showProgress(false);\n            return;\n        }\n    }\n\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/activities/ChatListActivity.xml\n<activity name=\"ChatListActivity\" class=\"", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/debug', DebugHandler),\n            ", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "        self.mainwindow.idletime = 0\n        self.mainwindow.textArea.keyPressEvent(event)\n        self.mainwindow.textArea.textChanged.connect(self.sentMessage)\n        self.mainwindow.textArea.textChanged.connect(self.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "                informationCriterion = new InformationCriterion(modelCollection, confidenceInterval, calculatedSampleSize);\n                break;\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prott", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "    @Inject\n    public BatteryStatusProvider batteryStatusProvider;\n    @Inject\n    public AudioBookManager manager;\n    @Inject\n    public AudioBookPlayerModule audioBookPlayerModule;\n    @Inject\n    public PlaybackService playbackService;\n    @Inject", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    if ty1!= ty2:\n        raise TypeError(\"Pair of types {0!s} and {1!s} are not the same\".format(ty1, ty2))\n    return Pair(e1, e2)\n\n\n@with_info(st_term)", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    response = Response(\n        status=500,\n        content_type='application/json',\n        body='{\"foo\": \"bar\"}')\n    with pytest.raises(HTTPBadRequest):\n        handle_request(response)\n\ndef test_response_content_type_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "    private List<Expense> expenses;\n    private List<ExpenseCategory> categories;\n    private List<ExpenseType> types;\n    private List<SliceValue> slices;\n    private List<PieChartView> pieChartViews;\n    private List<PieChartView", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\n                traceback.print_exc()\n", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\t\n\t@Override\n\tpublic void enterAddOrDeleteEdgeCommand(AddOrDeleteEdgeCommandContext ctx) {\n\t\tif ( ctx.getRuleIndex() == 0 ) {\n\t\t\tif ( ctx.getToken(ConsoleCommandParser.STR, 0).equals(\"add\")", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assertAlmostEqual(gps.airspeed, fdmexec.GetPropagate().GetVtrueKts())\n        self.assertAlmostEqual", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    api.add_resource(\n        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate UserServices userServices;\n\t@Resource\n\tprivate ChallengeInManager challengeInManager;\n\t@Resource\n\tprivate UserList userList;\n\t@Resource\n\tprivate Users users;\n\t@Resource\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "    '--no, --names-only Retrieve only the object paths (names).',\n    '--no, --names-only Retrieve only the object paths (names).',\n    '--no, --names-only Retrieve only the object paths (names).',\n    '--no", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "        join_keyword=\"JOIN\")\n\n    def test_full_e2e_english_signup_and_cancel_flow_with_delay(self):\n        logging.info(\"running e2e full flow for sign up + cancel in English with delay...\")\n        ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "                            logError(t);\n                        } else {\n                            logError(t.getMessage());\n                        }\n                    }\n                }\n            });\n            setControlsEnabled(true);\n        } catch (Exception e) {\n            logError(e);\n        }\n        operation", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "        print \"\\n[INFO] MobSF will perform Dynamic Analysis on emulator\"\n        adb, avd_path, reference_name, dup_name, emulator = adb_load_wait(adb)\n        print \"\\n[INFO] ADB is connected to emulator\"\n        ref", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected PendingIntent pendingIntent;\n  protected List<Location> locations;\n  protected List<PlaceDetailFragment> placeDetailFragments;\n  protected List<PlaceListFrag", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "\t\t\t# create adjacency matrix\n\t\t\tprint(\"Creating adjacency matrix\")\n\t\t\tadj_lh = np.zeros((v_lh.shape[0], v_lh.shape[0]))\n\t\t\tadj_rh = np.zeros((v_rh.shape", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "        cacheService.createCacheList(listName);\n      }\n    } else {\n      dialogs.showError(resourceBundle.getString(\"dialog.msg.list.does.not.exist\"));\n    }\n  }\n\n  @FXML\n  public void delete", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "        result.append(OPEN_BRACKET);\n        result.append(baseVariableName);\n        result.append(OPEN_BRACKET);\n        result.append(CLOSE_BRACKET);\n        result.append(CLOSE_BRACKET);\n      }\n    ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "                        TimeEntryOvertimeAggregation.getDefaultAggregation()));\n\n        timeEntriesTable.getColumn(\"status\").setAggregation(\n                ScreensHelper.createAggregationInfo(\n                        projectsService.getEntityMetaPropertyPath(TimeEntry.class, \"status\"),\n                        Time", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "    ('Pt', 'PtFunc', 'Val', 'BitLen', 'BitLenFunc', 'Dict', 'DictFunc', 'Repr', 'Trans', 'TransFunc', 'CallName', 'ReprName', 'Pt', 'PtFunc", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "        self._expansion_num,\n        ExpansionInfo.BOARDTYPE)\n\n    @property\n    def board_name(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                             ExpansionInfo.BOARDNAME,", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDH_ES): ECDHESPub,\n            (True, PubKeyAlgorithm", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "            inactive_user = create_inactive_user(\n                full_name=full_name,\n                email=email,\n                site=site\n            )\n            inactive_user.save()\n\n            # Send invitation email\n            send_connect_email(\n                subject=", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        self.key_size = read_u16le(f)\n        self.index_name = read_u16le(f)\n        self.references = {}\n        for i in range(count):\n            ref = read_u16le(f)\n            self.", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Liqui('bcc_eth')\n        elif name == \"%s_BCH_BTC\" % constant.EX_HITBITC:\n            ex = Liqu", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "        await ctx.send(embed=Embed(title=\"Pokemon Form\", description=f\"{ctx.author.mention}'s Pokemon Form is: \" + str(ctx.message.content)))\n\n\n    @command(aliases=[\"dump-pokemon\"], pass_context", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "    helpTestQuery(0, 10);\n    helpTestQuery(1, 10);\n    helpTestQuery(9, 10);\n    helpTestQuery(10, 10);\n    helpTestQuery(11, 10);\n    helpTestQuery(20, 10);\n  }\n  ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n    elif self.xsd_types is None:\n        for item in context.iter_children_or_self():\n            if item is not None:\n                self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "                    miPushClient = new MiPushClient(mySettings.getString(\"mi_APP_ID\",\"2882303761517557334\"),mySettings.getString(\"mi_APP_KEY\",\"5631755784334\"),mySettings.getString(\"mi_APP_ID\",\"288230", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_FIELD)) {\n\t\t\tresult.setField(getFileAttribute(basedir, elt", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "            output.append(tabulate(rows, headers, tablefmt, numalign, stralign,\n                                   show_header=show_header))\n    if status:\n        output.append(status)\n    return '\\n'.join(output)\n\n\ndef expanded_table(", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "    private final KademliaNode bootstrapNode;\n    private final KademliaNode bootstrapNode;\n    private final KademliaNode bootstrapNode;\n    private final KademliaNode bootstrapNode;\n    private final KademliaNode bootstrapNode;\n    private final Kad", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\tprivate ContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContext", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "    return words_api(wordnik_api, token)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root);\n        this.vms = new SpringVms(restTemplate, root);\n    }\n\n    @Override\n    public String toString() {\n        return \"DirectorClient [info=\" + info + \", releases=\"", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "        self.assertEqual(handle, 0)\n        self.assertEqual(CreateEvent(bManualReset=False, bInitialState=False), 0)\n        self.assertEqual(CreateEvent(bManualReset=False, bInitialState=False), 0", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "    protected SimpleDispatcher dispatcher;\n\n    protected List<CrawlerRequest> requests;\n\n    protected List<CrawlerRequest> pendingRequests;\n\n    protected List<CrawlerRequest> completedRequests;\n\n    protected List<CrawlerRequest> failedRequests;\n\n    protected List<C", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "                    AtomicReference<Element> annotatedElement = new AtomicReference<>();\n                    doProcess(roundEnv, annotatedElement, new RoundDescriptor(roundDescriptor.incrementAndGet(), true));\n                    return annotatedElement.get();\n                })\n              .collect", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    private GuiButton[] buttons;\n    private GuiCheckbox[] checkboxes;\n    private GuiText[] textFields;\n    private GuiText[] hintFields;\n    private GuiText[] textFields2;\n    private GuiText[] hintFields2", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "            actionPopupGroup.addAction(new AddKeyAction(\"Add Key\", this));\n            actionPopupGroup.addAction(new AddValueAction(\"Add Value\", this));\n            actionPopupGroup.addAction(new DeleteKeyAction(\"Delete Key\", this));\n            actionPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "        form.setTitle(\"Configuration Web Module Editor\");\r\n        form.setTitle(form.getTitle() + \" - Jetty Web Module Editor\");\r\n        form.setTitle(form.getTitle() + \" - Jetty Web Module Editor - \" + IJettyConfiguration.__NAME", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_ALIPAY_SACNNER_CODE:\n                return new BtnAl", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "                new PingHandler());\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(AddTagCommand.class, AddTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new PingHandler());\n        commandProcessor.addHandler(", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        self.assertEqual(\"my_type\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"my_type\"\n\n        self.assertEqual(\"my_type", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "    frob = frob.replace('%20','')\n    frob = frob.replace('%2F', '/')\n    frob = frob.replace('%3A', ':')\n    frob = frob.replace('%2F', '/')", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "        k -= 1\n      except IndexError:\n        break\n      if bytecode[k][2] in NO_FALL_THROUGH:\n        cond_stack_size -= 1\n      else:\n        cond_stack_size += 1\n    condition_bytecode.insert(", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tCloser.close(messageStream);\n\t\t\t}\n\n\t\t\tif(fcp", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\nclass PlatformForm(forms.ModelForm):\n    \"\"\"\n    Platform Form\n    \"\"\"\n    class Meta:\n", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    //Data\n    int activeCreditCardId = -1;\n    CreditCard activeCreditCard = null;\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n\n    //CON", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "    pingparsing._parser.parse(ping_message)\n    pingparsing._parser.parse(ping_message)\n    pingparsing._parser.parse(ping_message)\n    pingparsing._parser.parse(ping_message)\n    pingpars", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "\napp/src/main/java/com/ratebeer/android/gui/lists/RatingAdapter.java\npublic final class RatingAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\n\n\tprivate static final int TYPE_HEADER = 0;\n\tprivate", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\tpublic int[] playerPosition;\n\tpublic int[] playerVelocity;\n\tpublic int[] playerInventory;\n\tpublic int[] playerInventorySelected;\n\tpublic int[] playerInventorySelectedSlots;\n\tpublic int[] playerInventorySelectedTile;\n\tpublic", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "            throw new ExceptionInInitializerError(\"chat == null\");\r\n        }\r\n\r\n        // Retrain instance variables!\r\n        // setRetainInstance(true);\r\n\r\n        // Retrain instance variables!\r\n        // setRetainInstance(true);\r\n\r", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "        assertThat(qe, is(batchStatement())));\n\n        // query\n        assertThat(qe, is(query(is(\"abc\"))));\n        assertThat(qe, is(query(is(\"abc\"))));\n        assertThat(qe, is(", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    if person is None:\n        person = Person(\n            display_name=fb_user['name'],\n            avatar=Media(\n                image_url=fb_user['profile_image_url'],\n                width=fb_user['profile_image_width'],", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "    merged_assembly_points = merge_assembly_points(assembly_points_by_sources)\n    logger.info(\"Merged assembly points: {n_merged_assembly_points}\".format(n_merged_assembly_points=len(merged_assembly_", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "    }\n  }\n\n  private void cancelUpload(String error) {\n    if (error!= null) {\n      if (error.toLowerCase().matches(\"cancel\")) {\n        log(\"canceling upload \" + getFileNames(), null);\n        successful = false", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_error_", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        MagnetometerResource,\n", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "    private DateTimeFormatter captionFormatter;\n\n    /**\n     * The calendar's date range starting point.\n     *\n     * @param startDate\n     */\n    protected ZonedDateTime setStartDate(ZonedDateTime startDate) {\n        this.startDate = start", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.string.install_levels_confirmation),\n\t\t\t\t\t\t\tnew Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    (signerId, keyId) -> Lists.newArrayList(new Verifier(keyId, hmacVerifier));\n\n    VerifierProvider jwtLocator = (signerId, keyId) -> Lists.newArrayList(new Verifier(keyId, hmacVerifier", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public void start() {\n        try {\n            this.restTemplate.start();\n        } catch (DirectorException e) {\n            e.printStackTrace();", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \n\t}\n\t\n\tpublic void test", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setContentView(R.layout.activity_main);\n        setContentView(R", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                    trackHistoryRepository.getLastInsertedHistoryItem((trackHistoryEntry, dao) -> {\n                        if (trackHistoryEntry!= null && trackHistoryEntry.title.equals(liveInfo.getTitle())) {\n                            // Prevent from generating several same entries when rapidly doing pause and", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "        encoding = Default.ENCODING\n\n    if proxy:\n        proxy_obj = urllib.request.ProxyHandler({})\n        opener = urllib.request.build_opener(proxy_obj)\n        urllib.request.install_opener(op", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "                        if (home.getType() == CandyBarApplication.GridStyle.FLAT) {\r\n                            if (home.getHomeGrid() == CandyBarApplication.GridStyle.FLAT) {\r\n                                if (home.getHomeGrid() == CandyBarApplication.GridStyle.FLAT", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        self.assertEqual(\n            _environment_to_string(u\"a=b\\0c=d\\0\\0\"),\n            u\"a=b\\0c=d\\0\\0\")\nNext line of code:\n        self.assertEqual(\n            ", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.playlist", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "                taskData.setQueueDate(new Date());\n                taskData.setRunDate(new Date());\n                taskData.setRunTime(System.currentTimeMillis() - taskData.getStartTime());\n                taskData.setTaskDelay(0);\n                taskData.", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "    if not isinstance(cmd, MirrorSafeCommand) and cmd.manifest.IsMirror:\n      print(\"fatal: '%s' requires a working directory\" % name,\n            file=sys.stderr)\n      return 1\n\nNext line of code:\n    ", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "        //用户的学科\n        stuCourse = split[2].replace(\"同学\", \"\");\n        //用户的学科编号\n        stuCode = split[3].replace(\"同�", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        await r.after_headers(Entry(Request(\"GET\", \"http://www.google.com/\", headers={\"Content-Type\": \"text/html\"}),\n                                    Response(200, {\"Content-Type\": \"text/html\"})))\n        self.assertEqual(", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        except AttributeError:\n            return\n        for i in inv:\n            self.add_basic_properties(state, i)\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            ", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "        self.__con.commit()\n        self.__con.close()\n        self.__con = None\n\n        self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\t\n\t\tthis.cleaningFolder = false;\n\t\t\n\t\tthis.surveyName = \"\";\n\t}\n\t\n\tpublic ParameterizedGenerationService(String surveyName) {\n\t\tthis.p", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "  public Query visit(BasicSearch n, Query query) {\r\n    return visitBooleanOp(new VisitOrd4(n), query);\r\n  }\r\n\r\n  /**\r\n   * f0 -> (BasicSearchType())+ f1 -> ( Ord4Search() )?", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "        except:\n            log.error(\"Could not get time error. Please check your clock.\")\n            sys.exit(1)\n        \n        self.time_manager.set_root_dispersion(self.root_dispersion)\n        self.time_manager.set_", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        if (snapFile!= null) {\r\n            decoder = new UnicodeDecoder();\r\n            snapFile = new File(dataDir, snapFile);\r\n            if (snapFile.exists()) {\r\n                try {\r\n                    snapFile.open(DataInput.class", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "    def EvtGenerationAvenant(self, _):\n        DocumentDialog(self, AvenantModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\ndatabase.py\nclass AvenantModifications(Base):\n    __tablename", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        MovieSelection whereNot = new MovieSelection();\n        whereNot.idNot(movieRowId);\n        Cursor cursorNot = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,whereNot.sel(),whereNot.args(),null);", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "\t\tsetContentView(R.layout.activity_map_view);\r\n\t\tmapView = (MapView) findViewById(R.id.map_view);\r\n\t\tlocationManager = (LocationManager) findViewById(R.id.location_manager);\r\n\t\tdataProvider", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "        self.assertEqual(list(node_children(element)), [])\nNext line of code:\n        self.assertEqual(list(node_children(element, with_root=False)), [])\nNext line of code:\n        self.assertEqual(list(node", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "            ConfigInterfaceCommandProcessor(self.switch_configuration, self.logger))\n\n\nclass Cisco2960SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return ConfigInterfaceCommandProcessor(self.switch_configuration, self.log", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        if retorno.codigo_ativacao == constants.CODIGO_ATIVACAO_REGULAR:\n            return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n        elif retorno.codigo_ativ", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "  assert config.SAMPLE_RATE_HZ == 0.5e6\n  assert config.SYMBOL_RATE_HZ == 0.5e6\n  assert config.SYMBOL_RATE_HZ_COUNTS == 1e6\n  assert config", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "from flask import Flask, render_template\nfrom flask_restful import Api, Resource\nfrom flask_restful import reqparse\nfrom flask_restful import abort\nfrom flask_restful import marshal_with\nfrom flask_restful import reqparse\nfrom flask_restful import abort", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    # TODO: this is a hack to get the correct number of points\n    calculate_dict['points'] = np.array(calculate_dict['points'])\n    calculate_dict['points'] = np.repeat(calculate_dict['points'],", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    public static final String TextBlockObject2 = \"TextBlockObject2\";\n    public static final String TextBlockObject3 = \"TextBlockObject3\";\n    public static final String TextBlockObject4 = \"TextBlockObject4\";\n    public static final String TextBlockObject5 = \"TextBlock", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "    def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "        return mongoManager.getServerConfigurations();\n    }\n\n    private void installActions() {\n        addAction(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (e.getSource() == null) {\n", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "                if(output.getWidth() > 640 || output.getHeight() > 480) {\n                    output = resize(output, 640, 480);\n                }\n                output.setColor(Color.BLACK);\n                output.setOnClickListener(new View.OnClickListener() {", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\t\t// H1(class=\"title\", text=\"TODO\");\n\t\t// InputNext(class=\"next\", type=\"submit\", text=\"Next\");\n\t\t// InputNext(class=\"next\", type=\"submit\", text=\"Next\");\n\t\t// InputNext(class=\"next\", type=\"submit", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "    assert validate_filter_condition(key, query_on.columns, query_on.column_blacklist)\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "    private void onLoad(View v) {\n        mActivity = v.getActivity();\n        mRecyclerView = v.getRecyclerView();\n        mRecyclerView.setAdapter(mAdapter);\n        mRecyclerView.setAdapterCallbacks(m", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "            '/properties':                   RestAppPropertys\n        }\n        \n        # Register the resources\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n        \n        # Register the system resource\n        self.api.add_", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "            GCTraceCheckpoint checkpoint) {\n        locker.chartProgress(gcTrace.getType());\n        checkpoint.setCheckpoint(gcTrace);\n        checkpoint.setCheckpointTime(gcTrace.getCheckpointTime());\n        checkpoint.setCheckpoint", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "        MIN_PACKET_CORRUPTION_RATE, MAX_PACKET_CORRUPTION_RATE\n    ),\n)\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "        self._df_manager.set_directory(directory)\n        self._df_manager.set_settings_ini(settings_ini)\n        self._df_manager.set_project_directory(directory)\n        self._df_manager.set_project_settings(settings_ini", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        public void onDateClicked(Date date) {\n            // TODO\n        }\n    }\n\n    /**\n     * Listener interface for listening to event drag items\n     */\n    public interface DragItemListener {\n        /**\n         * Triggered when a drag item was dragged", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "    private ChatBox chatBox;\n    private Map<String, ChannelStatus> channelStatusMap;\n    private Map<String, GuiComponent> componentMap;\n    private Map<String, GuiComponent> componentMap2;\n    private Map<String, GuiComponent> componentMap3", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "            namespacesHub.get(packet.getNsp()).onUpgrade(client);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().schedulePingTimeout();\n            namespacesHub.get(packet.getNsp()).on", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_db_type_plocal(self):\n        self._db_type = STORAGE_TYPE_PLOCAL\n        return self\n\n    def set_db_type_memory(self):\n        self", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "\t\tPreprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tLOGGER.info(\"Pipeline created\");\n\t\treturn new GenerationService(pipeline.getGenerationService(), preprocessors, postprocessors);\n\t}\n\n\tprivate", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private StarItem starItem;\n    private Repo", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "        expiry = Column(Timestamp, range_key=True)\n        old = Column(String, range_key=True)\n        new = Column(String, range_key=True)\n        old_expiry = Column(Timestamp, range_key=True)\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "    // https://cloud.google.com/c/docs/reference/rest/v1/projects/list\n    PCollection<KV<GCPResource, GCPResourceState>> projects =\n        pipeline.apply(\"Read projects from the CRM API\",\n            Read", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "    //   _delegate = new ChatManagerCallback(this);\n    // Guarded by _lockObject.\n    private ChatManagerCallback _delegate;\n    // Guarded by _lockObject.\n    private Object _txLockObject;\n    // Guarded by _lockObject.\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "                self._def_reader = MeanReadDefinitions(def_num_input_words, emb_def_dim,\n                                                       dim, vocab, lookup,\n                                                       cache=self._cache)\n            elif def_reader =='max':\n                self._def_reader =", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    RotateInUpRight(RotateInUpRight.class),\n    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInDownLeft(RotateInDownLeft.class),\n", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "    private int videoPlayResId;\n    private int videoPlayResId2;\n    private int videoPlayResId3;\n    private int videoPlayResId4;\n    private int videoPlayResId5;\n    private int videoPlayResId6;\n    private int videoPlay", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    public static FogDescriptor convert(FogDescriptor descriptor, GameObject go,\n            Map<String, Asset> assets) {\n        FogDescriptor fog = (FogDescriptor) assets.get(descriptor.getFogID());\n\n        if (", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "        return self.render_to_response(form)\n\nclass CrearUser(UserBase, CreateView):\n    template_name = \"relevamiento/crear_user.html\"\n    success_url = \"/\"\n    success_message = \"User creada", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    }\n}\n\nA:\n\nYou can use the following code to get the list of movies from the database.\npublic List<Movie> getMovies() {\n    List<Movie> movies = new ArrayList<>();\n    // code to get movies from the database\n    return", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\tpublic String[] readStringBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\treturn this.handle", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    sync_stats_manager = SyncStatsManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    cipipeline_", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @return if run succeeds or not\n\t */\n\tpublic boolean runBenchmark() {\n\t\ttry", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamient", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Getting the service discovery file.\");\n\t\t\tDataParser dataParser = DataParserFactory.getInstance()\n\t\t\t\t\t.buildDataParser(Format.XML);\n\t\t\tServiceDiscoveryInfo serviceDiscoveryInfo = cache\n\t\t\t\t\t.retrieveCached", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "  private ActionSupportHandler<TransferAction>     transferActionSupportHandler     = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<WaitAction>           waitActionSupportHandler           = new ActionSupportHandler<WaitAction>(WaitAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "    self._cstr = root.data[0]\n    self._cstr = root.data[0]\n    self._cstr = root.data[0]\n    self._cstr = root.data[0]\n    self._cstr = root.data[0]", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\t\tif (getRound()== null) {\n\t\t\tthrow new PlayerOfflineException(\"Player is offline\");\n\t\t}\n\t\tif (getRound().getPlayers().contains(this)) {\n\t\t\tthrow new PlayerPresentException(\"Player is already in a round\");\n\t\t}\n\t\tif (get", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\t\t\tif col == 0:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags | Qt.ItemIsEditable\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\tprint(\"Col: \" + str(col", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "    return result\n\n###\n# String functions\n@method(function('concat', nargs=2,\n                 sequence_types=('xs:string', 'xs:string?', 'xs:string?', 'xs:string')))\ndef evaluate_concat_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "        \n        //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        byte[] catBytes = buildRawCatalogData(clientConfig, templateSource);\n        \n        //TODO: C,  for multi test we really need to have", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "        array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, array)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "                is(searchAllResponse.contains(\"[{\\\"_id\\\":\\\"\" + mapping.getIndex() + \"\\\"\" + mapping.getType() + \"\\\"\" + \"\\\"}\" + \"]\"));\n    }\n\n    @Test\n    public void storeFocused() throws Exception", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\t// Instantiates the {@link GeoJSONWriter}\n\t\tgeoJSONWriter = new GeoJSONWriter();\n\n\t\t// Instantiates the {@link GeoJSONListener}\n\t\tgeo", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "            (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEncryptAndSign): ElG", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "    url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/(?P<user_id>[-\\w]+)/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                        res = (Collection<ExtMap>) (context.get(ContextKeys.SEARCH_RESULT, Collection.class).iterator().next());\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, Cli.SQL_", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    private void init(Context context) {\n        super(context);\n        dymdicCycler = new RecyclerView(R.layout.dymdic_view);\n        swipeLayout = new SwipeRefreshLayout(R.layout.swipe_refresh_", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "                            stack.addListener(this);\n                        }\n                    }\n                });\n                dialogFragment.show();\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack!= null) {\n            if (stack.getNumberOfC", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "        f = XDA(d1, d2)\n        beta = XorDiff(d3)\n        i, j = self._find_preimage(f, beta)\n        assert i == d1 and j == d2\n\nNext line of code:\n        f = X", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "        obj.blockLabel = NameLabel(obj.block.getName(), obj.block.getLocationOnScreen(), obj.block.getBlockType(), obj.block.getBlockColor(), obj.block.getBlockSize(), obj.block.getBlockType(), obj.block.getBlockColor", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "\t\tpublic abstract Node transformContext(Context node);\n\t}\n\t\n\tprivate static Node getTransform(Node node, NodeTransformer transformer) {\n\t\tif(node.isTerminal()) {\n\t\t\treturn node;\n\t\t}\n\t\tif(node.isNonTerminal()) {\n", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "    # Speck32\n    # Simon32\n    # Simeck32\n    # Threefish32\n    # Feal32\n    # Xtea32\n    # Tea32\n    # Xtea64\n    # Tea64\n    # Shacal1Cipher32\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "        if (challengeData.equals(\"\")) {\n            connection.challengeReceived();\n        } else {\n            connection.challengeReceived(new Challenge(challengeData));\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        ", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "            mImmersiveSensorNavigation = new ImmersiveSensorNavigation(effect);\n            mImmersiveSensorNavigation.activate();\n        }\n        if(effect instanceof QrMarkerEffect) {\n            mImmersiveTouchNavigation = new ImmersiveTouchNavigation(effect);\n", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "    private RecyclerView mRecyclerView;\n\n    private List<Song> mSongList;\n\n    private int mCurrentSongIndex;\n\n    private int mCurrentSongIndexInView;\n\n    private int mCurrentSongIndexInViewGroup;\n\n    private int mCurrentSongIndexIn", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            // TODO Auto-generated method stub\n        }\n    };\n    private PlaylistPicker.OnPickerPressedListener mOnPickerPressedListener = new PlaylistPicker.OnPickerPressedListener() {\n        @Override\n        public void onPickerPressed", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "        Bit('PDN', ReprName='PDN Type', Pt=4, BitLen=4, Dict=PD_dict,\n            Repr='hum'),\n        Bit('PDN', ReprName='PDN Type', Pt=6, BitLen=4, Dict=", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "\tpublic boolean addUser(String user) {\n\t\treturn KeyringStore.addUser(getCurrentUserName(), user);\n\t}\n\n\t@POST\n\t@Path(\"deleteuser/{user}\")\n\t@Produces(\"application/json\")\n\t@OverrideNext line of code", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "                if self.stopped.stop_check():\n                    return\n                self.log_debug(f\"Inside relative root {relative_path}:\")\n                self.log_debug(f\"    Found {len(exts.identifiers)} identifiers\")\n                self.log_debug(", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "    @Override next() {\n      if (this.vmOptionsBuilder.isEmpty()) {\n        return this;\n      }\n      ImmutableMap<String, String> vmOptions = this.vmOptionsBuilder.build();\n      checkState(!vmOptions.isEmpty());\n      V", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    @GET(\"api-info\")\n    Observable<String> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "            offset = fp.tell() - file_tell\n    else:\n        dataset = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                                     encoding, offset)\n        if dataset is None:  # None is returned", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    assert almost_eq(erb[\"slaney_83\"], bandwidth, places=3)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 348.517),\n     ])\n  def test_slaney_example", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "    @Override\n    protected void onNext() {\n        if (isLoading) {\n            return;\n        }\n        if (paginator.isNext()) {\n            paginator.next();\n            updateSearchCriteriaDescription();\n            startSearch();\n        }\n    ", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    try {\n      if (proxyBuilder.getContextRoot() instanceof WordprocessingMLPackage) {\n        WordprocessingMLPackage document = (WordprocessingMLPackage) proxyBuilder.getContextRoot();\n        for (ICommentProcessor commentProcessor : commentProcessors) {\n          try", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "        if self.chumopen:\n            self.chum.sendMessage(serverMsg)\n            self.chumopen = False\n        else:\n            self.chum.sendMessage(serverMsg)\n            self.chum.sendMessage(serverMsg)\n            self.", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "    @flags.register(RevocationKey)\n    def flags_revocation_key(self, val):\n        self._flags += val.keyclass\n\n    @flags.register(int)\n    def flags_int(self, val):\n        self._flags += val\n\n    @", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "def check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\ndef check_arg(arg, type_", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    @Override\n    public void performWorkAndUpdatePlayerUI(@NonNull FsmPlayer fsmPlayer) {\n        super.performWorkAndUpdatePlayerUI(fsmPlayer);\n\n        if (isNull(fsmPlayer)) {\n            return;\n        }\n\n        pausePlayer", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "    # TODO: Add support for fitting to multiple datasets\n    datasets = [datasets]\n    # TODO: Add support for fitting to multiple phases\n    phase_name = [phase_name]\n    # TODO: Add support for fitting to multiple configurations\n    configuration", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    Call<Void> getSuggest(@QueryMap Map<String, String> serviceIds,\n                          @Query(\"tag\") String tag,\n                          @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n    @GET(\"suggest?platform=android", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    if parsed_args.output is None:\n        parsed_args.output = parsed_args.input.with_suffix(\".confusion_matrix.txt\")\n    if parsed_args.output.exists():\n        raise IOError(\"failed to open output file at", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "        s = Search(\n            mode=\"stream\", engine=self, model=model, position=position)\n        return iter(s.prepare())\n\nbloop/models.py\nclass Stream(object):\n    \"\"\"\n    A stream of records from a DynamoDB table.\n\n    ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "from pyorient.ogm.graph import Graph\nfrom pyorient.ogm.vertex import Vertex\nfrom pyorient.ogm.edge import Edge\nfrom pyorient.ogm.declarative import DeclarativeType\nfrom pyorient.ogm.broker import VertexBro", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\t@RequestMapping\n\t@RequestMethod\n\t@PathVariable\n\tprivate String userId;\n\t@RequestMapping\n\t@RequestMethod\n\t@PathVariable\n\tprivate String username;\n\t@RequestMapping\n\t@RequestMethod\n\t@PathVariable\n\tprivate String", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\n# Next line of code:\nfor platform in Platform.objects.all():\n    if platform.platform_slug not in all_platform_slugs:\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    @scoped_subgraph\n    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the hidden representation\n        of the input sequences.\n\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "src/main/java/br/com/caelum/vraptor/html/tags/Img.java\npublic class Img implements Tag {\n\tprivate NestedElement[] children = new NestedElement[0];\n\tprivate final Attribute[] attributes;\n\tprivate final", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "    @Override\n    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SingleLineCommentNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SingleLineCommentNode node", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "      self._graph.dfs_postorder(node, visitor)\n      return visitor.edges\n\n    def get_parent_loop_with_true_false_branches(node):\n      parent_loop = get_parent_loop(node)\n      if not has_true_", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "        final StringBuilder sb = new StringBuilder();\n        sb.append(\"\\n\");\n        sb.append(\"\\n\");\n        sb.append(\"\\n\");\n        sb.append(\"\\n\");\n        sb.append(\"\\n\");\n        sb.append(\"\\n", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "#\n# Copyright (c), 2018-2020, SISSA (International School for Advanced Studies).\n# All rights reserved.\n# This file is distributed under the terms of the MIT License.\n# See the file 'LICENSE' in the root directory of the present\n# distribution, or http", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void train(DataManager data) {\n\t\tthis.allocateClassifiers", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\t\n\tprivate Preprocessor poguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new Preprocessor();\n\t\n\tprivate PreprocessorPoguesXmlInsertFilterLoopIntoQuestionTreeFake poguesXmlInsertFilterLoopInt", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "                        updateMenuEntries();\n                    }\n                }\n            });\n        }\n    };\n\n    private void updateMenuEntries() {\n        // update the menu items\n        if (mVoiceMenuItem!= null) {\n            mVoiceMenuItem.setEnabled(!mIgnore", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "        H += dot(crossmat(c - p), m * H_trans) + dot(I, J_rot)\n        H += dot(crossmat(c - p), m * crosstens(J_rot))\n        H += dot(crossmat(c - p),", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if annee is not None:\n            self.releves_choice.SetSelection(self.releves_choice.GetCount() - 1)\n        else:\n            self.releves_choice.SetSelection(0)\n        self.EvtRele", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "                new VirtualBalanceCommand(),\n                new VirtualEconCommand(),\n                new VirtualAddCommand(),\n                new VirtualSetCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualPayCommand(),\n                new PayVirtualCommand(),\n                new VirtualBalTopCommand(),\n                new VirtualEconCommand", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        if (queuedProjectResult.isSuccess()) {\n            if (queuedProjectResult.getId()!= 0) {\n                name.setText(queuedProjectResult.getName());\n                author.setText(queuedProjectResult.getAuthor());\n                gauge", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "    return Const(arg)\n  elif op == LOAD_NAME:\n    return Symbol(arg)\n  elif op == LOAD_GLOBAL:\n    return Symbol(arg)\n  elif op == LOAD_FAST:\n    return Symbol(arg)\n", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "        _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        _log.info('Initializing a %s prior for the parameters.', prior", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "                    ((PresencePresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case HUE:\n                    HueSensorView hview = new HueSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tprivate final EntityParser parser = new EntityParser();\n\n\tprivate final int id;\n\tprivate final int belongsTo;\n\tprivate final Vector2 pos;\n\tprivate final Vector2 rot;\n\tprivate final Vector2 vel;\n\tprivate final Vector2 rotVel;\n\n\tprivate final int", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, ISchema schema) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t}\n\n}\n\npublic class SQLBatch<T> extends batch.sql.syntax.Factory implements Service", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "\tpublic String getAuthorName(Long id) {\n\t\treturn jdbcTemplate.query(\"SELECT AUTHOR.NAME FROM AUTHOR WHERE AUTHOR.ID = \" + id, r -> {\n\t\t\treturn r.getString(\"AUTHOR.NAME\");\n\t\t});\n\n\t}\n\n\t@Transact", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n    ", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['package'], app_info['launcher'], is_activity=False)\n        \n        # Download logs\n        download_logs_thread(adb, download_dir", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "        assertThat(ds, isPrepared());\n        assertThat(ds, isBatchPrepared());\n        assertThat(ds, isPreparedOrBatchPrepared());\n        assertThat(ds, isCallable());\n        assertThat(ds, isBatchCallable());\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "            Symbol.typed(bar_type, 'bar'),\n            Symbol.typed(IntType, 'baz'),\n        ]),\n        ])\n    check_expr_type(\n        \"\"\"\n        inc bar.baz\n        \"\"\",\n        Tuple.typed", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "                            return new NotFoundException(cause);\n                        case 500:\n                            return new InternalServerException(cause);\n                        case 503:\n                            return new ServiceUnavailableException(cause);\n                        case 504:\n                            return new GatewayTimeoutException(cause);\n                        case 406:\n                            return new", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\tdef on_add_part_to_document(self):\n\t\tcreate_add_part_to_parent(self._document)\n\nNext line of code:\n\tdef on_add_sketch_to_view(self):\n\t\tcreate_add_sketch_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "\t\t\tlabelFactory.setCapitalize(true);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static FacetSubQueryType getFacetSubQueryType(SearchConfig config, Element elt) {\n\t\tFacetSubQueryType subQueryType;\n\t\tif (", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Boolean.class, new DefaultBooleanRenderer());\r\n\t\tregisterRenderer(Integer.class, new DefaultIntegerRenderer());\r\n\t\tregisterRenderer", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "                        mRunnable = new Runnable() {\r\n                            @Override\r\n                            public void run() {\r\n                                try {\r\n                                    mHandler.setRequest(intent);\r\n                                    mHandler.setRequestPermissions(true);\r\n                                    mHandler.set", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    url(r'^(?P<pipeline_slug>[\\w\\-\\+]+)$', staff_member_required(PipelinesView.as_view(), login_url=LOGIN_URL),\n        name=\"pipelines-{}\".format(p", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                pointing_dir, vignetting_loss, extinction_loss = \\\n                    pointingDirVignettingExtinction(platepar, x_mean, y_mean, test_px_sum)\n\n\n                # Compute the correction factor for the collection area\n                correction_factor", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    account = Account.objects.get(service='vimeo.com', ident=access_token.user_id)\n    if not account.person.avatar_source or account.person.avatar_source == 'vimeo.com':\n        (primary_blog,) = [blog", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "            if (fMove == 0) {\n              if (fTurn == 1) {\n                SetGameTurn(0, 1);\n              } else {\n                SetGameTurn(1, 0);\n              }\n            } else {\n              if (fTurn == 1) {\n                ", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "    param_grid = _param_grid(options)\n    # Generate grid of values for priors\n    prior_grid = _prior_grid(options)\n    # Generate grid of values for threshold\n    threshold_grid = _threshold_grid(options)\n", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "    async def test_soft_404_response_not_found(self):\n        r = self.rule\n        await r.after_request(Entry.create(\"http://example.om/test\", response=StaticResponse(404, {})))\n        await r.after_", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    def test_etree_iter_paths(self):\n        root = ElementTree.XML('<a><b1><c1/><c2/></b1><b2/><b3><c3/></b3></a>')\n        root[2].", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of users.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "    cfe = CFeCancelamento(\n            Destinatario(\n                    CPF='11122233396',\n                    xNome=u'João de Teste'),\n            chCanc=_opcao('--chCanc'),\n            entrega", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\tdef get_icon(self, name):\n\t\tglobal icons_instance\n\t\tif not icons_instance:\n\t\t\ticons_instance = Icons()\n\t\treturn icons_instance.icon(name)\nNext line of code:\n\tdef __init__(self, data, model, parent", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "            //    client.sendRequest(req);\n            //    client.sendRequest(req);\n            //    client.sendRequest(req);\n            //    client.sendRequest(req);\n            //    client.sendRequest(req);\n            //    client.sendRequest(req", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\tprivate List<String> roster;\n\t\n\tprivate List<String> teamLeaders;\n\tprivate List<String> teamLeadersResponse;\n\t\n\tprivate List<Game> teamSchedule;\n\tprivate TeamScheduleResponse teamScheduleResponse;\n\t\n\tprivate List", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "            RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "            table_index[table_name] = self.session.describe_table(table_name)\n            object_index[table_name] = self.session.describe_item(table_name, key)\n            request[table_name] = {\n                \"TableName", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "        if (packageInfo == null) {\n            AppliverySdk.Logger.log(\"Cannot send feedback: no package info\");\n            return;\n        }\n\n        Feedback feedback = new Feedback();\n        feedback.setType(FeedbackType.FEEDBACK_INFO", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "admin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "                print('{0:<20} {1:<20} {2:<20} {3:<20} {4:<20} {5:<20} {6:<20} {7:<20} {8:<20} {9:<20} {", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "    def test_node_document_uri_function(self):\n        self.assertEqual(node_document_uri(self.elem), 'http://www.w3.org/XML/1998/namespace')\n        self.assertIsNone(node_document_uri", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n\n    def extrair_logs_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesS", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "            raise e\n        self.logger.info(f\"Initialization complete in {time.time() - begin}\")\n        self.training_complete = True\n        self.worker.current_subset = self.subset\n        self.worker.current_utterance = 0\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "                    for (int i = 0; i < sorted.length; i++) {\n                        for (int j = i + 1; j < sorted.length; j++) {\n                            if (sorted[i].getDate() > sorted[j].getDate()) {\n                                CalendarItem temp =", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "    private final SpringVms vms;\n    private final SpringTasks tasks;\n    private final SpringJobs jobs;\n    \n    private final SpringErrands errands;\n    private final SpringErrands errands;\n    private final SpringErrands errands;\n    ", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    private final String clientSecret;\n    private final String clientId;\n    private final SessionController sessionController;\n    private final StateController stateController;\n    private final OkHttpClient httpClient;\n    \n    public OAuth2ClientImpl(String clientId, String clientSecret, SessionController", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "        return new SvnCommand( COMMAND_LINE, \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"add\", \"", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "Difian/DifianApp/src/main/java/com/sonova/difian/communication/chat/ChatManager.java\npublic void broadcastState()\n{\n    synchronized (_lockObject)\n    {\n        if (_chat.getState()!= F", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "            new DoubleSad(DATA[looptest][0], new DoubleDerivatives(DATA[looptest][1], DATA[looptest][2], DATA[looptest][3], DATA[looptest][4])), EPSILON);\n        double[] d3Put =", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "    public void onClick(MouseEvent e) {\n        if (e.getMouseEvent() == MouseEvent.CLICK) {\n            if (channel.getStatus()!= null) {\n                if (channel.getStatus().getVisibility() == ChatVisibility.NORMAL) {", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "    public static DownloadQueue<String> newDownloadQueue(int size) {\n        return new DownloadQueue<String>(size);\n    }\n\n    /**\n     * Create a new download queue, the default thread pool size is 3.\n     *\n     * @return {@link DownloadQueue}.", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "            VotingModule.class,\n            PlayerFreezeModule.class,\n            WorldBorderModule.class,\n            ChatModule.class,\n            VotingModule.class,\n            PlayerFreezeModule.class,\n            WorldBorderModule.class,\n            ChatModule.class,\n", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    @Override\n    public ContextDefinition parseQuerySetConfig(Element element) throws JMingoParserException {\n        LOGGER.debug(\"parse query set config: {}\", element);\n        ContextSet querySetConfig = new ContextSet();\n        Element querySet = element.getElementsByTagName", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "  public void nextLineOfCode() {\n    try {\n      String line = Files.readAllLines(Paths.get(this.getConfig().pluginDir()));\n      if (line.length() == 0) {\n        Log.e(\"packager\", \"empty plugin directory", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n                weight=contact_weight)\n        ", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "        # print('L: ',L)\n        for x in L:\n            try :\n                ret = self.CheckIt(S, x)\n            except Exception :\n                print('In check Exception: ')\n                print('S: ',S)\n                print('x: ',", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "\t\t\taJPEG.mICCProfile.write(aOutput);\n\t\t}\n\n\t\taJPEG.mJFIFSegmentMarker.write(aOutput);\n\n\t\taJPEG.mDensitiesUnits = aJPEG.mDensityX = aJPEG.", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "    from arxpy.bitvector.core import Constant, Variable\n    from arxpy.bitvector.operation import (\n        BvAnd, BvOr, BvXor, BvComp, BvUlt, BvUle, BvUgt, BvUge", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "    from.config import BLAS_THREADS\n    os.environ[\"OPENBLAS_NUM_THREADS\"] = f\"{BLAS_THREADS}\"\n    os.environ[\"MKL_NUM_THREADS\"] = f\"{BLAS_TH", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "            if (sl == null) {\n                logger.log(Level.ERROR, \"SammelLastschrift ist null\");\n                return;\n            }\n\n            if (type == HibiscusExportType.SAMMEL) {\n                exportSammelLastsch", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    private static final DateTimeFormatter RECURRING_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter TRANSACTION_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    ", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n            properties.addLore(key);\n    }\n\nA:\n\nYou can use the following code to get the list of all the categories", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadeOutRight.class),\n    FadeOutUp(FadeOutUp.class),\n\n    SlideIn(SlideIn.class),\n    SlideInDown(SlideInDown", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "\tpublic static <T> T getLogger(String name) {\n\t\treturn instance.getLogger(name);\n\t}\n\nNext line of code:\n\tpublic static <T> T getLogger(Class<?> c) {\n\t\treturn instance.getLogger(c", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "        return { 'h1': [ h1() ], 'h2': [ h2() ], 'h3': [ h3() ], 'h4': [ h4() ] }\n    def test_get_hosts(self):\n        \"\"\" Test get_hosts. \"\"\"\n        ", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Optimization problem:\")\n        smart_print(problem)\n\n    if search_mode == ChSearchMode.Optimal:\n        problem", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "            return command.startswith(self.get_tc_base_command(TcSubCommand.QDISC))\n\n        return run_command_helper(\n            \" \".join(\n                [\n                    self.get_tc_base_command(TcSubCommand.Q", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "    private Calendar[] monthCalendars;\n    private SparseArray<List<Event>> monthEvents;\n    private List<Event> events;\n    private List<Event> selectedEvents;\n    private List<Event> selectedEventsByDay;\n    private List<Event> selectedEventsByMonth", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "            isinstance(t2, RecordMeta) and\n            t1.__instance__.__items__ == t2.__items__\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "\tdef __init__(self, sketch):\n\tdef text_type(self):\n\tdef name(self):\n\tdef key_point(self):\n\tdef key_point(self, value):\n\tdef value(self):\n\tdef vertical_alignment(self):\n", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "        self.auth = Auth(\n            blink_url=blink_url,\n            blink_api_key=blink_api_key,\n            blink_api_secret=blink_api_secret,\n            blink_api_token=blink_api", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "        //\n        //   Thread: remotely-observed-thread\n        //   Thread: remotely-observed-thread\n        //   Thread: remotely-observed-thread\n        //   Thread: remotely-observed-thread\n        //   Thread: remotely-observed-thread\n        ", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "    self._varz.serialization_failures()\n    self._varz.message_bytes_sent()\n    self._varz.message_bytes_recv()\n    self._varz.deserialization_failures()\n    self._varz.serialization_fail", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size()", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return data;\n    }\n\n    private static Map<Long, DrumStoreEntry<String, String>> getContentAsMap(String name, Class<? extends DrumStoreEntry<?,?>> valueClass) {\n        Map<Long, DrumStoreEntry<String, String>> content = new HashMap", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "    self._SendMessage(self._ping_msg)\n    self._last_ping_start = time.time()\n\n  def _SendMessage(self, msg):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self._log.debug('Sending message.')\n    self", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "        return this;\n    }\n\n    private void setRoxanaProperties(RoxanaProperties roxanaProperties) {\n        this.setRoxanaProperties(roxanaProperties);\n    }\n\n    private void setRoxanaProperties(RoxanaPro", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "    assert freq2lag(lag2freq(v)) == v\n    assert lag2freq(freq2lag(v)) == v\n\n  def test_freq_lag_converters_are_inverses_with_complex_inputs(self):\n    ", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "    if operands[0] == operands[1]:\n        return True\n    elif operands[0] < operands[1]:\n        return False\n    else:\n        return True\n\n###\n# Value comparison operators (in, not in)\n#\n# Ref:", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "    @commands.command(aliases=['config'])\n    @commands.guild_only()\n    @commands.bot_has_permissions(manage_guild=True)\n    @commands.check(is_guild_mod)\n    as", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "            // Invoke the fragment's method to show the chat activity\n            Log.i(\"chat_activity\", \"Chat activity: \" + newChat.getName());\n            Log.i(\"chat_activity\", \"Chat id: \" + newChat.getId());\n            Log.i(\"chat", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        welcomeString.setText(\"Welcome to the Country Activity!\");\n        return header;\n    }\n\n    private void initializeEvents() {\n        // Initialize the events...\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n\n        ", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "        assertEquals(null, creator.getTranslator());\n    }\n\n    @Test\n    void createTestWithLocaleTest() {\n        Translator translator = new MockedTranslator();\n        MessageTranslatedCreator creator = new MessageTranslatedCreator(translator, Locale", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "        try {\n            WXPayVIPClient.send(request);\n            Log.d(\"WXPayVIPClient\", \"Send: \" + request.getHttpVerb() + \" \" + request.getApiURL() + \" \" + request.getApplicationParams());\n", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quota(self)\n        self.auth_system = auth_system\n        self.auth_plugin = auth_plugin\n        self.auth = auth\n        self.insecure = insecure\n        ", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "src/main/java/erjang/beam/repr/Operands.java\npublic class Operand {\n\tpublic static abstract class Operand {\n\t\tpublic SourceOperand asSource() {\n\t\t\tthrow new IllegalArgumentException(\"Not a source: \"+this);\n\t\t}\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "            m.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\r\n        }\r\n        else\r\n        {\r\n            m.setDefaultVideoFrameRate(1);\r\n        }\r\n\r\n        // set video width\r", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            AlpineLinuxPingParser,\n            MacOsPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                return self.__parser.parse(ping_lines)\n            except Parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "    @Override\n    public final void doNext() throws Exception {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildNextUri(context);", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "            self._probe = probe\n        # Load the probe.\n        self._probe = probe\n        # Load the probe.\n        self._probe = probe\n        # Load the probe.\n        self._probe = probe\n        # Load the probe.\n        self._pro", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "        mListener = new OnQRCodeFragmentInteractionListener();\n        mListener.setOnQRCodeFragmentInteraction(this);\n        mListener.setOnQRCodeFragmentInteractionListener(this);\n        mListener.setOnQRCodeFragmentInteraction", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def entry_node(self):\n    \"\"\"\n      Returns the CFG node that represents the entry point of the program.\n    \"\"\"\n    return self._entry\n\n  @property", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "\t\t\tString file1 = \"ddi-to-xforms/ddi-to-xforms.xml\";\n\t\t\tString file2 = \"ddi-to-xforms/ddi-to-xforms-1.xml\";\n\t\t\tFile file1 = new File(basePath + \"/", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "src/main/java/com/octo/java/sql/exp/Exp.java\npublic abstract class Exp implements Visitable {\n  private boolean valid = true;\n\npublic void invalidate() {\n    valid = false;\n  }\n\npublic boolean isValid() {\n    ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "        state = stateFactory.createState(VastAdSandBox.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vad state\n\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "        self.assertEqual(\n            self.dist.draw(1),\n            self.dist.draw(1)[0],\n        )\n        self.assertEqual(\n            self.dist.draw(2),\n            self.dist.draw(2),\n        )\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015, 2016, 2017, 2018, 2019, 2020, 2021\n# Distributed under the terms of the MIT License\n#\n# The full license is in", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "\tpublic void acceptString(final String value, FixTag tag) throws InvalidValueException {\n\t\t\n\t\tif (validities.containsKey(tag)) {\n\t\t\t\n\t\t\tValidity validity = validities.get(tag);\n\t\t\t\n\t\t\tif (validity.isValid(value))", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        # if the rest bits are not mapped, map them\n        if rem > 0:\n            # get the rest bits\n            rest = string[-rem:]\n            # map them\n            self.map(rest)\n        # return the rest bits\n        return rest\n\n# P1", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "                        expect(systemUnderTestMock.nonVoidFailWithParameter(GIVEN_STRING)).andThrow(\n                                new UnexpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(system", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def extrair_logs_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "        if not skip_table_setup:\n            self.session.create_table(\n                TableName=self._compute_table_name(model),\n                KeySchema=[\n                    {\n                        'AttributeName': 'id',\n                        'KeyType': 'HASH'\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "    assert u6.dimensions == solar_mass_cgs\n    assert u6.base_value == 1.0\n\n    # nonzero non-CGS conversion factor\n    u7 = Unit(\"1e-3\")\n    assert u7.dimensions == 1e-3\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "    engine.bind(User)\n    with pytest.raises(TypeError):\n        engine.bind(User.by_email)\n\n\ndef test_bind_non_stream(engine):\n    \"\"\"Can't bind things that don't subclass BaseModel\"\"\"\n    engine.bind(", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "        //   import io.github.flibio.economylite.commands.virtual.VirtualPayCommand;\n        //   import io.github.flibio.economylite.commands.virtual.VirtualRemoveCommand;\n        //   import io.github.flibio.", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "                 '\\\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references --no", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "                    @Override\n                    public void startActivity(ActivityActivity activity) {\n                        MainActivity.this.uiHandler.postDelayed(() ->\n                                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE),\n                                    500);", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "        tag = c_void_p()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        return TAG(tag.value)\n\n    def get_tag_info(self, tag):\n        \"\"\"Retrieve information on a metadata", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, fdm_data[\"temperature\"], 3)\n\nI am getting the following error:\nAttributeError: 'object' object has no attribute'sensors'\n\nI am not sure what", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "\tCall<ImgurResponseWrapper<List<ImageProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page\n\t\t\t);\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "            progressDialog.hide();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getStatus() == MethodResult.SUCCESS) {\r\n            progressDialog.hide();\r\n            return true;\r\n        } else {\r\n            progressDialog.", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \":v0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n1\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves trending terms to be used in gif searching.\n     *\n     * @param serviceIds a {@link Map} of a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "    return render(request, self.template_name, {'post' : post, 'nodes' : nodes})\n\nclass CommentView(LoginRequiredMixin, DetailView):\n    template_name = 'ploghubapp/comment.html'\n    form_class = CommentForm", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type ==", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "            wifiLog(\"CONNECTION ERROR: \" + connectionErrorCode.toString());\n            of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::error);\n        }\n    };\n\n    @NonNull\n    private final WifiManager mWifiManager = new WifiManager", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "    def run(self):\n        \"\"\"Run the function\"\"\"\n\n        speaker = Speaker(\"speech\")\n\n        vad = load_scp(self.vad_path, data_type=int)\n        for recording, frames in vad.items():\n            file = File(rec", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "        for (StackManagerListener listener : listeners) {\n            listener.addListener(stack);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "        if name is None:\n            index = 0\n            tag.type = TAGTYPE.ALL\n            tag.updated = False\n        else:\n            tag.type = TAGTYPE.get(name)\n            tag.updated = False\n        self._call_fmod(\"FMOD_", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "    private final SpringVms vms;\n    private final SpringErrands errands;\n    private final SpringTasks tasks;\n    private final SpringDeployments deployments;\n    private final SpringJobs jobs;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, Info info,", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        if request.POST['user_id'] == logged_against.id:\n            raise PermissionDenied\n        else:\n            # Log moderation event\n            log_comment = '{}'.format(request.POST['comment'])\n            log_moderator_event(msg", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "                section.end_of_message = True\n                section.section_index = section_index\n                section.section_length = nbytes_write\n                section.section_offset = bit_writer.get_pos()\n                section.section_length_calculated = True\n                section", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        \n        // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n        \n        // Checking PhyML binary\n        if (!PhyMLv", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "    @Override\n    public void print(final BenchmarkResult result) {\n        if (result.getClass().getSimpleName()!= \"BenchmarkResult\") {\n            throw new AbstractPerfidixMethodException(\"Only BenchmarkResult can be printed.\");\n        }\n        if (", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "                resposta.setValor(listaDeRespostas.getPropriedades().getValor());\n                resposta.setNota(listaDeRespostas.getPropriedades().getNota());\n                resposta.setCaminhoParaDiretorio", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\ttropo.say(\"Please wait while the recording is being made.\");\n\t\ttropo.say(\"The recording will be saved to the file \" + request.getParameter(\"file\") + \".\");\n\t\ttropo.say(\"The recording will be saved to the file \" + request.get", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "    @Mock\n    MediaModel vastAd;\n\n    @Mock\n    MediaModel vpaidAd;\n\n    @Mock\n    MediaModel queuePoint;\n\n    @Mock\n    MediaModel queuePoint2;\n\n    @Mock\n    MediaModel queuePoint3;\n\n    ", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t@OverrideOnPageChangeListener line of code:\n\t\t\t@OverrideOnPageChangeListener line of code:\n\t\t\t@OverrideOnPageChangeListener line of code:\n\t\t\t@OverrideOnPageChangeListener line of code:\n\t\t\t@OverrideOnPageChangeListener line of code:\n\t\t\t@OverrideOn", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    String packageName = getPackage(type).getQualifiedName().toString();\n    String className = type.getQualifiedName().toString();\n    String methodName = \"inject\";\n    String className = type.getQualifiedName().toString();\n    String method", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "\t\t\t\t\tsuper.handle(e) ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while closing the window\", e) ;\n\t\t}\n\t}\n\t\n\t\n\t@Override\n\tpublic void onCloseRequestProperty(final", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "            new PushReceiverApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 关闭通知栏消息\r\n         * @param enable 打开/关", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "def _check_length(i, k, v, length_last):\n    if len(v) > length_last:\n        length_last = len(v)\n    return length_last\n\nA:\n\nI think you can use the following code:\ndef _check_", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "    return f'/{path}{suffix}'\n\n@method(function('path', nargs=(0, 1), sequence_types=('node()?', 'xs:string?')))\ndef evaluate_path_function(self, context=None):\n    if context is None:\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\t\tif opts.cosinormediation[3]:\n\t\t\tdmy_covariates = np.concatenate(covars,1)\n\t\telse:\n\t\t\tdmy_covariates = None\n\n\t\tEXOG.append(dmy_covari", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "                _isTyping = true;\n            }\n            else if (message.getType() == MessageType.RE_MESSAGE)\n            {\n                SmartReplyMessage m = (SmartReplyMessage)message;\n\n                if (m.getReMessage()!= null)\n", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "                // 如果按钮是退出，则退出\n                if (mSwitchButton.isChecked() && mSureQuit) {\n                    finish();\n                    return;\n                }\n                // �", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        ThreadDumpThread thread = sut.thread(\"thread\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        ThreadDumpThread thread2 = sut.thread(\"thread2\");\n        assertThat(thread2.getStatus(), equal", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "    private SetOtherFragment setOtherFragment;\n\n    private List<ShortCut> shortCutList;\n    private List<XpNavBarSetting> navbarSettings;\n\n    private int navbarHeightOpt;\n    private boolean goHomeAfterClick;\n\n    private int homePointPosition;", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type ==", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, File)\n    assert deltas.deltas[4].cursor == \"file_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert del", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.tracerouter.start()\n        self.tracerouter.set_tracer_name(\"Switzerland\")\n        self.tracerouter.set_tracer_level(logging.DEBUG", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "        new ActivityLightLevelManager(getActivity(),\n            new ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.ActivityLightLevelManager.Activity", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        return WebhookCollection(self)\n\n    @property\n    def notifications(self):\n        return NotificationCollection(self)\n\n    @property\n    def notifications_by_email(self):\n        return NotificationCollection(self, email_filter=True)\n\n    @property\n    def notifications", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "            Str('Identity', Pt=Identity(), Len=8),\r\n            Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('MSCm3', Pt=MSCm3(), Len=1),\r\n            Str('MSC", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_eq_thermochemical_prob = 0\n", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    ", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "        self.__filter_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_mangle(self, device):\n        self.__filter_parser", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "    @validation_error(SwaggerMappingError)\n    def validate(self, value):\n        pass\n\nNext line of code:\n    @validation_error(SwaggerMappingError)\n    def validate(self, value):\n        pass\n\nNext line of code", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
